{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 690
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\nlibrary SafeTransferLib {\n    /*///////////////////////////////////////////////////////////////\n                            ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool callStatus;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 100 because the calldata length is 4 + 32 * 3.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                         INTERNAL HELPER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\n        assembly {\n            // Get how many bytes the call returned.\n            let returnDataSize := returndatasize()\n\n            // If the call reverted:\n            if iszero(callStatus) {\n                // Copy the revert message into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Revert with the same message.\n                revert(0, returnDataSize)\n            }\n\n            switch returnDataSize\n            case 32 {\n                // Copy the return data into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Set success to whether it returned true.\n                success := iszero(iszero(mload(0)))\n            }\n            case 0 {\n                // There was no return data.\n                success := 1\n            }\n            default {\n                // It returned some malformed input.\n                success := 0\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/curve/IFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// solhint-disable func-name-mixedcase\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface IFeeDistributor {\r\n    function claim(address account) external returns (uint256);\r\n\r\n    function claim_many(address[20] calldata) external returns (bool);\r\n\r\n    function last_token_time() external view returns (uint256);\r\n\r\n    function time_cursor() external view returns (uint256);\r\n\r\n    function time_cursor_of(address) external view returns (uint256);\r\n\r\n    function checkpoint_token() external;\r\n}\r\n"
    },
    "contracts/interfaces/curve/IGaugeController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// solhint-disable func-name-mixedcase\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface IGaugeController {\r\n    function vote_for_gauge_weights(address, uint256) external;\r\n}"
    },
    "contracts/interfaces/curve/IVoteEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// solhint-disable func-name-mixedcase\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface IVoteEscrow {\r\n    function create_lock(uint256, uint256) external;\r\n\r\n    function increase_amount(uint256) external;\r\n\r\n    function increase_unlock_time(uint256) external;\r\n\r\n    function withdraw() external;\r\n}\r\n"
    },
    "contracts/interfaces/curve/IVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12;\r\n\r\ninterface IVoting {\r\n    function vote(\r\n        uint256 _voteData,\r\n        bool _supports,\r\n        bool _executesIfDecided\r\n    ) external;\r\n}\r\n"
    },
    "contracts/magic-crv/CurveVoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Inspired by Yearn CurveYCRVVoter and StrategyProxy\r\n// solhint-disable not-rely-on-time\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/curve/IFeeDistributor.sol\";\r\nimport \"../interfaces/curve/IVoteEscrow.sol\";\r\nimport \"../interfaces/curve/IGaugeController.sol\";\r\nimport \"../interfaces/curve/IVoting.sol\";\r\n\r\ncontract CurveVoter is Ownable {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    event LogAllowedVoterChanged(address voter, bool allowed);\r\n    event LogMagicCRVChanged(address magicCRV);\r\n    event LogHarvesterChangeed(address harvester);\r\n\r\n    error NotAllowedVoter();\r\n    error NotMagicCRV();\r\n    error NotAuthorized();\r\n\r\n    uint256 public constant MAX_LOCKTIME = 4 * 365 * 86400; // 4 years\r\n\r\n    ERC20 public constant CRV = ERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    address public constant ESCROW = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\r\n    address public constant GAUGE_CONTROLLER = 0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\r\n    address public constant FEE_DISTRIBUTOR = 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc;\r\n    address public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n    address public constant MIM_GAUGE = 0xd8b712d29381748dB89c36BCa0138d7c75866ddF;\r\n    uint256 public constant MAX_VOTE_WEIGHT = 10_000;\r\n\r\n    mapping(address => bool) public voters;\r\n\r\n    uint256 public lastClaimTimestamp;\r\n    uint256 public totalCRVTokens;\r\n    address public magicCRV;\r\n    address public harvester;\r\n\r\n    bool public migrationEnabled;\r\n\r\n    modifier onlyAllowedVoters() {\r\n        if (!voters[msg.sender] && msg.sender != owner()) {\r\n            revert NotAllowedVoter();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyHarvester() {\r\n        if (msg.sender != harvester) {\r\n            revert NotMagicCRV();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedLockers() {\r\n        if (msg.sender != magicCRV && msg.sender != owner() && msg.sender != harvester) {\r\n            revert NotAuthorized();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setAllowedVoter(address voter, bool allowed) external onlyOwner {\r\n        voters[voter] = allowed;\r\n\r\n        emit LogAllowedVoterChanged(voter, allowed);\r\n    }\r\n\r\n    function setMagicCRV(address _magicCRV) external onlyOwner {\r\n        magicCRV = _magicCRV;\r\n\r\n        emit LogMagicCRVChanged(_magicCRV);\r\n    }\r\n\r\n    function setHarvester(address _harvester) external onlyOwner {\r\n        harvester = _harvester;\r\n\r\n        emit LogHarvesterChangeed(_harvester);\r\n    }\r\n\r\n    /// @notice amount 10000 = 100%\r\n    function voteForGaugeWeights(address gauge, uint256 amount) public onlyAllowedVoters {\r\n        IGaugeController(GAUGE_CONTROLLER).vote_for_gauge_weights(gauge, amount);\r\n    }\r\n\r\n    function voteForMaxMIMGaugeWeights() public onlyAllowedVoters {\r\n        IGaugeController(GAUGE_CONTROLLER).vote_for_gauge_weights(MIM_GAUGE, MAX_VOTE_WEIGHT);\r\n    }\r\n\r\n    function claim(address recipient) external onlyHarvester returns (uint256 amount) {\r\n        if (block.timestamp < lastClaimTimestamp + 7 days) {\r\n            return 0;\r\n        }\r\n\r\n        amount = IFeeDistributor(FEE_DISTRIBUTOR).claim(address(this));\r\n        lastClaimTimestamp = IFeeDistributor(FEE_DISTRIBUTOR).time_cursor_of(address(this));\r\n\r\n        if (amount > 0) {\r\n            ERC20(CRV3).transfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    function claimAll(address recipient) external onlyHarvester returns (uint256 amount) {\r\n        if (block.timestamp < lastClaimTimestamp + 7 days) {\r\n            return 0;\r\n        }\r\n\r\n        address p = address(this);\r\n\r\n        // curve claims are divided by weeks and each iterate can claim up to 20 weeks of rewards.\r\n        IFeeDistributor(FEE_DISTRIBUTOR).claim_many([p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p]);\r\n        lastClaimTimestamp = IFeeDistributor(FEE_DISTRIBUTOR).time_cursor_of(p);\r\n\r\n        amount = ERC20(CRV3).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            ERC20(CRV3).transfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice add amount to the current lock created with `createLock` or `createMaxLock`\r\n    function lock() external onlyAllowedLockers {\r\n        uint256 amount = ERC20(CRV).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            CRV.safeApprove(ESCROW, 0);\r\n            CRV.safeApprove(ESCROW, amount);\r\n            IVoteEscrow(ESCROW).increase_amount(amount);\r\n            totalCRVTokens += amount;\r\n        }\r\n    }\r\n\r\n    /// @notice creates a 4 years lock\r\n    function createMaxLock(uint256 value) external onlyOwner {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _createLock(value, block.timestamp + MAX_LOCKTIME);\r\n    }\r\n\r\n    function createLock(uint256 value, uint256 unlockTime) external onlyOwner {\r\n        _createLock(value, unlockTime);\r\n    }\r\n\r\n    /// @notice extend to 4 years lock\r\n    function increaseMaxLock() external onlyOwner {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        _increaseLock(block.timestamp + MAX_LOCKTIME);\r\n    }\r\n\r\n    function increaseLock(uint256 unlockTime) external onlyOwner {\r\n        _increaseLock(unlockTime);\r\n    }\r\n\r\n    function _createLock(uint256 value, uint256 unlockTime) internal {\r\n        CRV.transferFrom(msg.sender, address(this), value);\r\n        CRV.safeApprove(ESCROW, 0);\r\n        CRV.safeApprove(ESCROW, value);\r\n        IVoteEscrow(ESCROW).create_lock(value, unlockTime);\r\n    }\r\n\r\n    function _increaseLock(uint256 unlockTime) internal {\r\n        IVoteEscrow(ESCROW).increase_unlock_time(unlockTime);\r\n    }\r\n\r\n    function release() external onlyOwner {\r\n        IVoteEscrow(ESCROW).withdraw();\r\n    }\r\n\r\n    function vote(\r\n        uint256 voteId,\r\n        address votingAddress,\r\n        bool support\r\n    ) external onlyOwner {\r\n        IVoting(votingAddress).vote(voteId, support, false);\r\n    }\r\n\r\n    function withdraw(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        token.safeTransfer(to, amount);\r\n    }\r\n\r\n    function execute(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external onlyOwner returns (bool, bytes memory) {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory result) = to.call{value: value}(data);\r\n\r\n        return (success, result);\r\n    }\r\n}\r\n"
    }
  }
}}