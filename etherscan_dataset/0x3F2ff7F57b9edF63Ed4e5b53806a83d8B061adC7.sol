{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "berlin",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/JBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './interfaces/IJBOperatorStore.sol';\n\n/** \n  @notice\n  Stores operator permissions for all addresses. Addresses can give permissions to any other address to take specific indexed actions on their behalf.\n\n  @dev\n  Adheres to -\n  IJBOperatorStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\n*/\ncontract JBOperatorStore is IJBOperatorStore {\n  //*********************************************************************//\n  // --------------------------- custom errors ------------------------- //\n  //*********************************************************************//\n  error PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n  //*********************************************************************//\n  // --------------------- public stored properties -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice\n    The permissions that an operator has been given to operate on a specific domain.\n    \n    @dev\n    An account can give an operator permissions that only pertain to a specific domain namespace.\n    There is no domain with a value of 0 â€“ accounts can use the 0 domain to give an operator\n    permissions to all domains on their behalf.\n\n    @dev\n    Permissions are stored in a packed `uint256`. Each 256 bits represents the on/off state of a permission. Applications can specify the significance of each index.\n\n    _operator The address of the operator.\n    _account The address of the account being operated.\n    _domain The domain within which the permissions apply. Applications can use the domain namespace as they wish.\n  */\n  mapping(address => mapping(address => mapping(uint256 => uint256))) public override permissionsOf;\n\n  //*********************************************************************//\n  // ------------------------- external views -------------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take a certain action pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndex The permission index to check for.\n\n    @return A flag indicating whether the operator has the specified permission.\n  */\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view override returns (bool) {\n    if (_permissionIndex > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n    return (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 1);\n  }\n\n  /** \n    @notice \n    Whether or not an operator has the permission to take certain actions pertaining to the specified domain.\n\n    @param _operator The operator to check.\n    @param _account The account that has given out permissions to the operator.\n    @param _domain The domain that the operator has been given permissions to operate.\n    @param _permissionIndexes An array of permission indexes to check for.\n\n    @return A flag indicating whether the operator has all specified permissions.\n  */\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view override returns (bool) {\n    for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\n      uint256 _permissionIndex = _permissionIndexes[_i];\n\n      if (_permissionIndex > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n      if (((permissionsOf[_operator][_account][_domain] >> _permissionIndex) & 1) == 0)\n        return false;\n    }\n    return true;\n  }\n\n  //*********************************************************************//\n  // ---------------------- external transactions ---------------------- //\n  //*********************************************************************//\n\n  /**\n    @notice\n    Sets permissions for an operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specifies the params for the operator being set.\n  */\n  function setOperator(JBOperatorData calldata _operatorData) external override {\n    // Pack the indexes into a uint256.\n    uint256 _packed = _packedPermissions(_operatorData.permissionIndexes);\n\n    // Store the new value.\n    permissionsOf[_operatorData.operator][msg.sender][_operatorData.domain] = _packed;\n\n    emit SetOperator(\n      _operatorData.operator,\n      msg.sender,\n      _operatorData.domain,\n      _operatorData.permissionIndexes,\n      _packed\n    );\n  }\n\n  /**\n    @notice\n    Sets permissions for many operators.\n\n    @dev\n    Only an address can set its own operators.\n\n    @param _operatorData The data that specify the params for each operator being set.\n  */\n  function setOperators(JBOperatorData[] calldata _operatorData) external override {\n    for (uint256 _i = 0; _i < _operatorData.length; _i++) {\n      // Pack the indexes into a uint256.\n      uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\n\n      // Store the new value.\n      permissionsOf[_operatorData[_i].operator][msg.sender][_operatorData[_i].domain] = _packed;\n\n      emit SetOperator(\n        _operatorData[_i].operator,\n        msg.sender,\n        _operatorData[_i].domain,\n        _operatorData[_i].permissionIndexes,\n        _packed\n      );\n    }\n  }\n\n  //*********************************************************************//\n  // --------------------- private helper functions -------------------- //\n  //*********************************************************************//\n\n  /** \n    @notice \n    Converts an array of permission indexes to a packed `uint256`.\n\n    @param _indexes The indexes of the permissions to pack.\n\n    @return packed The packed value.\n  */\n  function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\n    for (uint256 _i = 0; _i < _indexes.length; _i++) {\n      uint256 _index = _indexes[_i];\n\n      if (_index > 255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n\n      // Turn the bit at the index on.\n      packed |= 1 << _index;\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IJBOperatorStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './../structs/JBOperatorData.sol';\n\ninterface IJBOperatorStore {\n  event SetOperator(\n    address indexed operator,\n    address indexed account,\n    uint256 indexed domain,\n    uint256[] permissionIndexes,\n    uint256 packed\n  );\n\n  function permissionsOf(\n    address _operator,\n    address _account,\n    uint256 _domain\n  ) external view returns (uint256);\n\n  function hasPermission(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256 _permissionIndex\n  ) external view returns (bool);\n\n  function hasPermissions(\n    address _operator,\n    address _account,\n    uint256 _domain,\n    uint256[] calldata _permissionIndexes\n  ) external view returns (bool);\n\n  function setOperator(JBOperatorData calldata _operatorData) external;\n\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\n}\n"
    },
    "contracts/structs/JBOperatorData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/** \n  @member operator The address of the operator.\n  @member domain The domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains.\n  @member permissionIndexes The indexes of the permissions the operator is being given.\n*/\nstruct JBOperatorData {\n  address operator;\n  uint256 domain;\n  uint256[] permissionIndexes;\n}\n"
    }
  }
}}