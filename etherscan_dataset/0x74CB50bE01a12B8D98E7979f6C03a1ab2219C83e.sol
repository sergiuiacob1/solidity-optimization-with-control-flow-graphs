{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/persistent/external-positions/IExternalPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPosition Contract\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IExternalPosition {\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\n\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\n\n    function init(bytes memory) external;\n\n    function receiveCallFromVault(bytes memory) external;\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/IExternalPositionParser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPositionParser Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Interface for all external position parsers\ninterface IExternalPositionParser {\n    function parseAssetsForAction(\n        address _externalPosition,\n        uint256 _actionId,\n        bytes memory _encodedActionArgs\n    )\n        external\n        returns (\n            address[] memory assetsToTransfer_,\n            uint256[] memory amountsToTransfer_,\n            address[] memory assetsToReceive_\n        );\n\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\n        external\n        returns (bytes memory initArgs_);\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/liquity-debt/ILiquityDebtPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"../../../../../persistent/external-positions/IExternalPosition.sol\";\n\npragma solidity 0.6.12;\n\n/// @title ILiquityDebtPosition Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ILiquityDebtPosition is IExternalPosition {\n    enum Actions {OpenTrove, AddCollateral, RemoveCollateral, Borrow, RepayBorrow, CloseTrove}\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/liquity-debt/LiquityDebtPositionDataDecoder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title LiquityDebtPositionDataDecoder Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Abstract contract containing data decodings for LiquityDebtPosition payloads\nabstract contract LiquityDebtPositionDataDecoder {\n    /// @dev Helper to decode args used during the AddCollateral action\n    function __decodeAddCollateralActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            uint256 collateralAmount_,\n            address upperHint_,\n            address lowerHint_\n        )\n    {\n        return abi.decode(_actionArgs, (uint256, address, address));\n    }\n\n    /// @dev Helper to decode args used during the Borrow action\n    function __decodeBorrowActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            uint256 maxFeePercentage_,\n            uint256 lusdAmount_,\n            address upperHint_,\n            address lowerHint_\n        )\n    {\n        return abi.decode(_actionArgs, (uint256, uint256, address, address));\n    }\n\n    /// @dev Helper to decode args used during the CloseTrove action\n    function __decodeCloseTroveActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (uint256 lusdAmount_)\n    {\n        return abi.decode(_actionArgs, (uint256));\n    }\n\n    /// @dev Helper to decode args used during the OpenTrove action\n    function __decodeOpenTroveArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            uint256 maxFeePercentage_,\n            uint256 collateralAmount_,\n            uint256 lusdAmount_,\n            address upperHint_,\n            address lowerHint_\n        )\n    {\n        return abi.decode(_actionArgs, (uint256, uint256, uint256, address, address));\n    }\n\n    /// @dev Helper to decode args used during the RemoveCollateral action\n    function __decodeRemoveCollateralActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            uint256 collateralAmount_,\n            address upperHint_,\n            address lowerHint_\n        )\n    {\n        return abi.decode(_actionArgs, (uint256, address, address));\n    }\n\n    /// @dev Helper to decode args used during the RepayBorrow action\n    function __decodeRepayBorrowActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            uint256 lusdAmount_,\n            address upperHint_,\n            address lowerHint_\n        )\n    {\n        return abi.decode(_actionArgs, (uint256, address, address));\n    }\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/liquity-debt/LiquityDebtPositionParser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"../.../../../../../interfaces/ILiquityTroveManager.sol\";\nimport \"../IExternalPositionParser.sol\";\nimport \"./ILiquityDebtPosition.sol\";\nimport \"./LiquityDebtPositionDataDecoder.sol\";\n\npragma solidity 0.6.12;\n\n/// @title LiquityDebtPositionParser\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Parser for Liquity Debt Positions\ncontract LiquityDebtPositionParser is IExternalPositionParser, LiquityDebtPositionDataDecoder {\n    address private immutable LIQUITY_TROVE_MANAGER;\n    address private immutable LUSD_TOKEN;\n    address private immutable WETH_TOKEN;\n\n    constructor(\n        address _liquityTroveManager,\n        address _lusdToken,\n        address _wethToken\n    ) public {\n        LIQUITY_TROVE_MANAGER = _liquityTroveManager;\n        LUSD_TOKEN = _lusdToken;\n        WETH_TOKEN = _wethToken;\n    }\n\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\n    /// @param _externalPosition The _externalPosition to be called\n    /// @param _actionId The _actionId for the callOnExternalPosition\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\n    /// @return assetsToTransfer_ The assets to be transfered from the Vault\n    /// @return amountsToTransfer_ The amounts to be transfered from the Vault\n    /// @return assetsToReceive_ The assets to be received at the Vault\n    function parseAssetsForAction(\n        address _externalPosition,\n        uint256 _actionId,\n        bytes memory _encodedActionArgs\n    )\n        external\n        override\n        returns (\n            address[] memory assetsToTransfer_,\n            uint256[] memory amountsToTransfer_,\n            address[] memory assetsToReceive_\n        )\n    {\n        if (_actionId == uint256(ILiquityDebtPosition.Actions.OpenTrove)) {\n            (, uint256 collateralAmount, , , ) = __decodeOpenTroveArgs(_encodedActionArgs);\n\n            assetsToTransfer_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n            assetsToTransfer_[0] = WETH_TOKEN;\n            amountsToTransfer_[0] = collateralAmount;\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = LUSD_TOKEN;\n        }\n        if (_actionId == uint256(ILiquityDebtPosition.Actions.AddCollateral)) {\n            (uint256 collateralAmount, , ) = __decodeAddCollateralActionArgs(_encodedActionArgs);\n\n            assetsToTransfer_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n            assetsToTransfer_[0] = WETH_TOKEN;\n            amountsToTransfer_[0] = collateralAmount;\n        }\n        if (_actionId == uint256(ILiquityDebtPosition.Actions.RemoveCollateral)) {\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = WETH_TOKEN;\n        } else if (_actionId == uint256(ILiquityDebtPosition.Actions.RepayBorrow)) {\n            (uint256 lusdAmount, , ) = __decodeRepayBorrowActionArgs(_encodedActionArgs);\n            assetsToTransfer_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n            assetsToTransfer_[0] = LUSD_TOKEN;\n            amountsToTransfer_[0] = lusdAmount;\n        } else if (_actionId == uint256(ILiquityDebtPosition.Actions.Borrow)) {\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = LUSD_TOKEN;\n        } else if (_actionId == uint256(ILiquityDebtPosition.Actions.CloseTrove)) {\n            uint256 lusdAmount = ILiquityTroveManager(LIQUITY_TROVE_MANAGER).getTroveDebt(\n                _externalPosition\n            );\n\n            assetsToTransfer_ = new address[](1);\n            assetsToReceive_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n\n            assetsToTransfer_[0] = LUSD_TOKEN;\n            amountsToTransfer_[0] = lusdAmount;\n            assetsToReceive_[0] = WETH_TOKEN;\n        }\n\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\n    }\n\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\n    /// @return initArgs_ Parsed and encoded args for ExternalPositionProxy.init()\n    function parseInitArgs(address, bytes memory)\n        external\n        override\n        returns (bytes memory initArgs_)\n    {\n        return \"\";\n    }\n}\n"
    },
    "contracts/release/interfaces/ILiquityTroveManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ILiquityTroveManager Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Minimal interface for our interactions with Liquity Trove Mangager contract\ninterface ILiquityTroveManager {\n    function getTroveColl(address) external view returns (uint256);\n\n    function getTroveDebt(address) external view returns (uint256);\n}\n"
    }
  }
}}