{{
  "language": "Solidity",
  "sources": {
    "src/passport/Passport.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\nimport {ERC721, ERC721TokenReceiver} from \"@rari-capital/solmate/src/tokens/ERC721.sol\";\nimport {SafeTransferLib} from \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport {Controlled} from \"../utils/Controlled.sol\";\nimport {Renderer} from \"./render/Renderer.sol\";\n\n/// @notice Non-fungible, limited-transferable token that grants citizen status in Nation3.\n/// @author Nation3 (https://github.com/nation3/app/blob/main/contracts/contracts/passport/Passport.sol).\n/// @dev Most ERC721 operations are restricted to controller contract.\n/// @dev Is modified from the EIP-721 because of the lack of enough integration of the EIP-4973 at the moment of development.\n/// @dev Token metadata is renderer on-chain through an external contract.\ncontract Passport is ERC721, Controlled {\n    /*///////////////////////////////////////////////////////////////\n                               LIBRARIES\n    //////////////////////////////////////////////////////////////*/\n\n    using SafeTransferLib for ERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                               ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error NotMinted();\n    error NotAuthorized();\n    error InvalidFrom();\n    error NotSafeRecipient();\n\n    /*///////////////////////////////////////////////////////////////\n                            STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    // @notice On-chain metadata renderer.\n    Renderer public renderer;\n\n    /// @dev Tracks the number of tokens minted & not burned.\n    uint256 internal _supply;\n    /// @dev Tracks the next id to mint.\n    uint256 internal _idTracker;\n\n    // @dev Timestamp of each token mint.\n    mapping(uint256 => uint256) internal _timestampOf;\n    // @dev Authorized address to sign messages in behalf of the passport holder, it can be different from the owner.\n    // @dev Could be used for IRL events authentication.\n    mapping(uint256 => address) internal _signerOf;\n\n    /*///////////////////////////////////////////////////////////////\n                            VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns total number of tokens in supply.\n    function totalSupply() external view virtual returns (uint256) {\n        return _supply;\n    }\n\n    /// @notice Gets next id to mint.\n    function getNextId() external view virtual returns (uint256) {\n        return _idTracker;\n    }\n\n    /// @notice Returns the timestamp of the mint of a token.\n    /// @param id Token to retrieve timestamp from.\n    function timestampOf(uint256 id) public view virtual returns (uint256) {\n        if (_ownerOf[id] == address(0)) revert NotMinted();\n        return _timestampOf[id];\n    }\n\n    /// @notice Returns the authorized signer of a token.\n    /// @param id Token to retrieve signer from.\n    function signerOf(uint256 id) external view virtual returns (address) {\n        if (_ownerOf[id] == address(0)) revert NotMinted();\n        return _signerOf[id];\n    }\n\n    /// @notice Get encoded metadata from renderer.\n    /// @param id Token to retrieve metadata from.\n    function tokenURI(uint256 id) public view override returns (string memory) {\n        return renderer.render(id, ownerOf(id), timestampOf(id));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Sets name & symbol.\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    /*///////////////////////////////////////////////////////////////\n                       USER ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the owner of a passport to update the signer.\n    /// @param id Token to update the signer.\n    /// @param signer Address of the new signer account.\n    function setSigner(uint256 id, address signer) external virtual {\n        if (_ownerOf[id] != msg.sender) revert NotAuthorized();\n        _signerOf[id] = signer;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       CONTROLLED ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice ERC721 method to set allowance. Only allowed to controller.\n    /// @dev Prevent approvals on marketplaces & other contracts.\n    function approve(address spender, uint256 id) public override onlyController {\n        getApproved[id] = spender;\n\n        emit Approval(_ownerOf[id], spender, id);\n    }\n\n    /// @notice ERC721 method to set allowance. Only allowed to controller.\n    /// @dev Prevent approvals on marketplaces & other contracts.\n    function setApprovalForAll(address operator, bool approved) public override onlyController {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Allows controller to transfer a passport (id) between two addresses.\n    /// @param from Current owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public override onlyController {\n        if (from != _ownerOf[id]) revert InvalidFrom();\n        if (to == address(0)) revert TargetIsZeroAddress();\n\n        unchecked {\n            _balanceOf[from]--;\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n        _timestampOf[id] = block.timestamp;\n        _signerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    /// @notice Allows controller to safe transfer a passport (id) between two address.\n    /// @param from Curent owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public override onlyController {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") !=\n            ERC721TokenReceiver.onERC721Received.selector\n        ) revert NotSafeRecipient();\n    }\n\n    /// @notice Allows controller to safe transfer a passport (id) between two address.\n    /// @param from Curent owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public override onlyController {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\n            ERC721TokenReceiver.onERC721Received.selector\n        ) revert NotSafeRecipient();\n    }\n\n    /// @notice Mints a new passport to the recipient.\n    /// @param to Token recipient.\n    /// @dev Id is auto assigned.\n    function mint(address to) external virtual onlyController returns (uint256 tokenId) {\n        tokenId = _idTracker;\n        _mint(to, tokenId);\n\n        // Realistically won't overflow;\n        unchecked {\n            _timestampOf[tokenId] = block.timestamp;\n            _signerOf[tokenId] = to;\n            _idTracker++;\n            _supply++;\n        }\n    }\n\n    /// @notice Mints a new passport to the recipient.\n    /// @param to Token recipient.\n    /// @dev Id is auto assigned.\n    function safeMint(address to) external virtual onlyController returns (uint256 tokenId) {\n        tokenId = _idTracker;\n        _safeMint(to, tokenId);\n\n        // Realistically won't overflow;\n        unchecked {\n            _timestampOf[tokenId] = block.timestamp;\n            _signerOf[tokenId] = to;\n            _idTracker++;\n            _supply++;\n        }\n    }\n\n    /// @notice Burns the specified token.\n    /// @param id Token to burn.\n    function burn(uint256 id) external virtual onlyController {\n        _burn(id);\n\n        // Would have reverted before if the token wasnt minted\n        unchecked {\n            delete _timestampOf[id];\n            delete _signerOf[id];\n            _supply--;\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       ADMIN ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the owner to update the renderer contract.\n    /// @param _renderer New renderer address.\n    function setRenderer(Renderer _renderer) external virtual onlyOwner {\n        renderer = _renderer;\n    }\n\n    /// @notice Allows the owner to withdraw any ERC20 sent to the contract.\n    /// @param token Token to withdraw.\n    /// @param to Recipient address of the tokens.\n    function recoverTokens(ERC20 token, address to) external virtual onlyOwner returns (uint256 amount) {\n        amount = token.balanceOf(address(this));\n        token.safeTransfer(to, amount);\n    }\n}\n"
    },
    "src/passport/render/Renderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract Renderer {\n    function render(\n        uint256 tokenId,\n        address owner,\n        uint256 timestamp\n    ) public view virtual returns (string memory tokenURI) {\n        string memory name = Strings.toString(uint256(uint160(owner)));\n        tokenURI = string(abi.encodePacked(Strings.toString(tokenId),'-',name,'-',Strings.toString(timestamp)));\n    }\n}\n"
    },
    "src/utils/Controlled.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\n/// @notice Minimal implementation of access control mechanism with two roles (owner & controller)\n/// @dev Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol)\ncontract Controlled {\n    /*///////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error CallerIsNotAuthorized();\n    error TargetIsZeroAddress();\n\n    /*///////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event ControlTransferred(address indexed previousController, address indexed newController);\n\n    /*///////////////////////////////////////////////////////////////\n                             ROLES STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address private _owner;\n    address private _controller;\n\n    /*///////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor() {\n        _transferOwnership(msg.sender);\n        _transferControl(msg.sender);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    modifier onlyOwner() {\n        if (_owner != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    modifier onlyController() {\n        if (_controller != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    modifier onlyOwnerOrController() {\n        if (_owner != msg.sender && _controller != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function controller() public view virtual returns (address) {\n        return _controller;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function renounceOwnership() external virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function removeControl() external virtual onlyOwnerOrController {\n        _transferControl(address(0));\n    }\n\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        if (newOwner == address(0)) revert TargetIsZeroAddress();\n        _transferOwnership(newOwner);\n    }\n\n    function transferControl(address newController) external virtual onlyOwnerOrController {\n        if (newController == address(0)) revert TargetIsZeroAddress();\n        _transferControl(newController);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function _transferControl(address newController) internal virtual {\n        address oldController = _controller;\n        _controller = newController;\n        emit ControlTransferred(oldController, newController);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}