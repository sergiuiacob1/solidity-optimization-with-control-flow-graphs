\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\citation{sif}
\@writefile{toc}{\contentsline {chapter}{List of Figures}{}{chapter*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{2}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Context}{2}{section.1.1}\protected@file@percent }
\citation{solidity-yul-optimizer}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Objective}{3}{section.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.3}Motivation}{3}{section.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Thesis structure}{4}{section.1.4}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Contributions}{5}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}A way to contribute}{5}{section.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Enhancement of optimization steps}{6}{section.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Reducing gas usage of smart contracts}{6}{section.2.3}\protected@file@percent }
\citation{solidity-lang}
\citation{coin-telegraph-2020}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Solidity}{7}{chapter.3}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Overview}{7}{section.3.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Solidity interest from 1st of January, 2014, to 1st of June, 2022, according to Google web searches}}{7}{figure.3.1}\protected@file@percent }
\newlabel{fig:solidity-interest}{{3.1}{7}{Solidity interest from 1st of January, 2014, to 1st of June, 2022, according to Google web searches}{figure.3.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces Contract deployment per month in the past year, according to Dune Analytics}}{8}{figure.3.2}\protected@file@percent }
\newlabel{fig:dune-analytics-2022}{{3.2}{8}{Contract deployment per month in the past year, according to Dune Analytics}{figure.3.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Solidity's Compiler and Optimizer}{8}{section.3.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Solidity compilation flow}}{9}{figure.3.3}\protected@file@percent }
\newlabel{fig:solc-compilation-flow}{{3.3}{9}{Solidity compilation flow}{figure.3.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Intermediate Representations}{9}{section.3.3}\protected@file@percent }
\citation{yul-description}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Solidity AST Example. The body of the function is an AST node itself, in which the statements are other AST nodes. Generated using AST Explorer.}}{10}{figure.3.4}\protected@file@percent }
\newlabel{fig:solidity-ast-example}{{3.4}{10}{Solidity AST Example. The body of the function is an AST node itself, in which the statements are other AST nodes. Generated using AST Explorer}{figure.3.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces Node types in the YUL AST. Node properties vary depending on their nature.}}{11}{figure.3.5}\protected@file@percent }
\newlabel{fig:yul-ast-node-types}{{3.5}{11}{Node types in the YUL AST. Node properties vary depending on their nature}{figure.3.5}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {3.1}Example of Yul code which computes exponentiation recursively}{11}{lstlisting.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Other tools performing static analysis}{11}{section.3.4}\protected@file@percent }
\citation{sif}
\citation{sif}
\citation{sif}
\citation{slither}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces SIF workflow, captured from SIF: A Framework for Solidity Contract Instrumentation and Analysis \cite  {sif}}}{12}{figure.3.6}\protected@file@percent }
\newlabel{fig:sif-workflow}{{3.6}{12}{SIF workflow, captured from SIF: A Framework for Solidity Contract Instrumentation and Analysis \cite {sif}}{figure.3.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.1}Solidity Instrumentation Framework (SIF)}{12}{subsection.3.4.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces Slither Architecture}}{13}{figure.3.7}\protected@file@percent }
\newlabel{fig:slither-architecture}{{3.7}{13}{Slither Architecture}{figure.3.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.2}Slither}{13}{subsection.3.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4.3}Why focus on the official optimizer}{13}{subsection.3.4.3}\protected@file@percent }
\citation{static-program-analysis}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Static Analysis}{14}{chapter.4}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\citation{jax-to-jit-or-not-to-jit}
\citation{cfg-dcc}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Control Flow Graphs}{16}{section.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.1}Overview}{16}{subsection.4.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.2}Properties}{16}{subsection.4.1.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces Example of a CFG built on top of a simple Rust program. The entry blocks allocate memory for variables, while the exit block act as garbage collection and terminate the execution flow. Source: Wikipedia}}{17}{figure.4.1}\protected@file@percent }
\newlabel{fig:cfg-rust-example}{{4.1}{17}{Example of a CFG built on top of a simple Rust program. The entry blocks allocate memory for variables, while the exit block act as garbage collection and terminate the execution flow. Source: Wikipedia}{figure.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.3}Usage examples. Local and global optimizations}{18}{subsection.4.1.3}\protected@file@percent }
\citation{cfg-dcc}
\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces Representing the inputs of a basic block using DAGs. Example of the peephole optimizer and where common subexpression eliminator could be used.}}{19}{figure.4.2}\protected@file@percent }
\newlabel{fig:dag-peephole-example}{{4.2}{19}{Representing the inputs of a basic block using DAGs. Example of the peephole optimizer and where common subexpression eliminator could be used}{figure.4.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Data Flow Analysis}{19}{section.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Overview}{19}{subsection.4.2.1}\protected@file@percent }
\citation{program-analysis-corectness-cmu}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4.1}Simple example of how data flow analysis is used to trace the values of a variable through the execution flow.}{20}{lstlisting.4.1}\protected@file@percent }
\citation{proxify-dart-null}
\citation{dart-dev-null-safety}
\citation{solidity-yul-optimizer}
\citation{solidity-yul-optimizer}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}YUL Optimizer Deep Dive}{22}{chapter.5}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Optimization flow}{22}{section.5.1}\protected@file@percent }
\citation{hari-gas-dispatch}
\newlabel{code:variable-declaration}{{5.1}{23}{}{section*.61}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.1}Code example of bad variable declaration inside a for loop}{23}{lstlisting.5.1}\protected@file@percent }
\citation{solidity-yul-optimizer}
\newlabel{code:solidity-redundant-assignment}{{5.1}{24}{}{lstnumber.-1.1}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.2}Example of a smart contract with a redundant assignment and variable declaration}{24}{lstlisting.5.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.1}{\ignorespaces Unoptimized vs. optimized YUL IR for Solidity code \ref  {code:solidity-redundant-assignment}, order of optimizers: UnusedPruner then UnusedAssignEliminator}}{25}{figure.5.1}\protected@file@percent }
\newlabel{fig:optimization-order-ur}{{5.1}{25}{Unoptimized vs. optimized YUL IR for Solidity code \ref {code:solidity-redundant-assignment}, order of optimizers: UnusedPruner then UnusedAssignEliminator}{figure.5.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.2}{\ignorespaces Unoptimized vs. optimized YUL IR for Solidity code \ref  {code:solidity-redundant-assignment}, order of optimizers: UnusedAssignEliminator then UnusedPruner}}{25}{figure.5.2}\protected@file@percent }
\newlabel{fig:optimization-order-ru}{{5.2}{25}{Unoptimized vs. optimized YUL IR for Solidity code \ref {code:solidity-redundant-assignment}, order of optimizers: UnusedAssignEliminator then UnusedPruner}{figure.5.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}UnusedPruner. UnusedAssignEliminator.}{25}{section.5.2}\protected@file@percent }
\newlabel{code:assignment-sample}{{5.2}{26}{}{section*.66}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.3}YUL IR code sample for variable assignments. Both variables a and b are used in a different control flow.}{26}{lstlisting.5.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.1}Variable states in UnusedAssignEliminator}{26}{subsection.5.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.3}{\ignorespaces Control flow types in YUL IR}}{27}{figure.5.3}\protected@file@percent }
\newlabel{fig:cfg-control-flow-types}{{5.3}{27}{Control flow types in YUL IR}{figure.5.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.3}Handling termination flows}{27}{section.5.3}\protected@file@percent }
\newlabel{code:unused-assign-eliminator-handle-termination-flow}{{5.3}{27}{}{section*.71}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {5.4}YUL IR code sample for variable assignments. Both variables a and b are used in a different control flow.}{27}{lstlisting.5.4}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {5.4}{\ignorespaces Optimized YUL IR using UnusedAssignEliminator then UnusedPruner. UnusedAssignEliminator does not handle termination flows while pruning}}{29}{figure.5.4}\protected@file@percent }
\newlabel{fig:unused-assign-eliminator-termination2}{{5.4}{29}{Optimized YUL IR using UnusedAssignEliminator then UnusedPruner. UnusedAssignEliminator does not handle termination flows while pruning}{figure.5.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.5}{\ignorespaces Example of termination flow inside a YUL AST's basic block node. DeadCodeEliminator is used to prune unreachable code}}{29}{figure.5.5}\protected@file@percent }
\newlabel{fig:basic-block-termination-ast-example}{{5.5}{29}{Example of termination flow inside a YUL AST's basic block node. DeadCodeEliminator is used to prune unreachable code}{figure.5.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.6}{\ignorespaces Full optimizer suite ran against code sample \ref  {code:unused-assign-eliminator-handle-termination-flow}. The right hand side YUL IR handles termination flows within basic blocks for variable assignments and declarations.}}{30}{figure.5.6}\protected@file@percent }
\newlabel{fig:unused-assign-eliminator-handle-termination-flow}{{5.6}{30}{Full optimizer suite ran against code sample \ref {code:unused-assign-eliminator-handle-termination-flow}. The right hand side YUL IR handles termination flows within basic blocks for variable assignments and declarations}{figure.5.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.4}Pruning redundant termination flows}{30}{section.5.4}\protected@file@percent }
\newlabel{structural-simplifier-cascading-example}{{5.4}{31}{}{lstnumber.-2.1}{}}
\@writefile{toc}{\contentsline {chapter}{\numberline {6}Validation and benchmarking}{32}{chapter.6}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Conclusions}{34}{chapter.7}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\bibcite{static-program-analysis}{1}
\bibcite{solidity-lang}{2}
\bibcite{solidity-yul-optimizer}{3}
\bibcite{coin-telegraph-2020}{4}
\bibcite{sif}{5}
\bibcite{slither}{6}
\bibcite{yul-description}{7}
\bibcite{jax-to-jit-or-not-to-jit}{8}
\bibcite{proxify-dart-null}{9}
\bibcite{dart-dev-null-safety}{10}
\bibcite{cfg-dcc}{11}
\bibcite{program-analysis-corectness-cmu}{12}
\bibcite{hari-gas-dispatch}{13}
\bibcite{engineering-a-compiler}{14}
\@writefile{toc}{\contentsline {chapter}{Bibliography}{35}{chapter*.84}\protected@file@percent }
\gdef \@abspage@last{40}
