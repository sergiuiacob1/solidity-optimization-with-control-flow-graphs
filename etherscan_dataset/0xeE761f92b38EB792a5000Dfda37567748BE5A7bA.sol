{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/access/interfaces/IManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\ninterface IManager {\n    function isAdmin(address _user) external view returns (bool);\n\n    function isGorvernance(address _user) external view returns (bool);\n}\n"
    },
    "contracts/pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../token/protocol/extension/mintable/interface/IERC20Mintable.sol\";\n\nimport \"./interface/IPool.sol\";\nimport \"./interface/IPoolFactory.sol\";\n\nimport \"../token/wrapped/IWNATIVE.sol\";\n\nimport \"../util/TransferHelper.sol\";\nimport \"../access/interfaces/IManager.sol\";\n\ninterface IFactory {\n    function getFee() external returns (uint256, uint256);\n}\n\ncontract Pool is Context, IPool {\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 pendingReward;\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of REWARD\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws STAKE tokens to a pool. Here's what happens:\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives any pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        address stakeToken; // Address of STAKED token\n        uint256 totalStake; // total amount of STAKED token\n        uint256 allocPoint; // How many allocation points assigned to this POOL. REWARD to distribute per block.\n        uint256 lastRewardBlock; // Last block number that REWARD distribution occurs.\n        uint256 accRewardPerShare; // Accumulated REWARD per share, times PRECISION_FACTOR. See below.\n        uint256 bonusEndBlock; // Block number when BONUS REWARD period ends for this POOL\n        uint256 startBlock; // The block number when REWARD mining starts for this POOL\n        uint256 minStakePeriod; // the minimum number of blocks a participant should stake for (early withdrawal will incure penatly fees)\n        uint256 bonusMultiplier; // Bonus muliplier for early REWARD participation for this POOL\n        uint256 rewardAmount; // the amount of total rewards to be distributed (only used for !mintable reward tokens)\n        bool isLpToken; // the amount of total rewards to be distributed (only used for !mintable reward tokens)\n    }\n\n    bool private _isInitialized;\n    IManager public manager;\n\n    address public _factory;\n\n    address public override rewardToken;\n\n    uint256 public override rewardPerBlock; // REWARD tokens allocated per block for the entire POOL\n\n    bool public override mintable;\n\n    address public override treasury;\n\n    address public override nativeToken;\n\n    uint256 public override PRECISION_FACTOR;\n\n    mapping(address => bool) public override staked;\n\n    // Info of each pool. (by pid)\n    PoolInfo[] public override poolInfo;\n\n    // Info of each user that stakes tokens for a pool (by pid, by user address)\n    mapping(uint256 => mapping(address => UserInfo)) public override userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public override totalAllocPoint = 0;\n\n    modifier onlyAdmin() {\n        require(manager.isAdmin(_msgSender()), \"Pool::onlyAdmin\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(manager.isGorvernance(_msgSender()), \"Pool::onlyGovernance\");\n        _;\n    }\n\n    constructor() {\n        _factory = _msgSender();\n    }\n\n    // NOTE: intialize() will fail for !mintable REWARD pools\n    function initialize(\n        address _rewardToken,\n        uint256 _rewardPerBlock,\n        address _treasury,\n        address _nativeToken,\n        uint256 _nativeAllocPoint,\n        uint256 _nativeStartBlock,\n        uint256 _nativeBonusMultiplier,\n        uint256 _nativeBonusEndBlock,\n        uint256 _nativeMinStakePeriod,\n        address _manager\n    ) external override {\n        require(_msgSender() == _factory, \"Pool::initialize: FORBIDDEN\");\n        require(!_isInitialized, \"Pool::initialize: INITIALIZED\");\n\n        manager = IManager(_manager);\n        rewardToken = _rewardToken;\n        nativeToken = _nativeToken;\n        rewardPerBlock = _rewardPerBlock;\n        treasury = _treasury;\n\n        bytes4 mint = bytes4(keccak256(bytes(\"mint(address,uint256)\")));\n        (bool success, ) = rewardToken.call(abi.encodeWithSelector(mint, address(this), 0));\n        if (success) {\n            mintable = true;\n        } else {\n            mintable = false;\n        }\n\n        uint256 decimalsRewardToken = uint256(IERC20Metadata(rewardToken).decimals());\n\n        require(decimalsRewardToken < 30, \"Pool::constructor: INVALID_REWARD_DECIMAL\");\n        PRECISION_FACTOR = uint256(10**(uint256(30) - decimalsRewardToken));\n\n        // Make this contract initialized\n        _isInitialized = true;\n\n        // pid 0 for every REWARD pool is reserved for Native token staking\n        _add(\n            nativeToken,\n            _nativeAllocPoint,\n            _nativeStartBlock,\n            _nativeBonusMultiplier,\n            _nativeBonusEndBlock,\n            _nativeMinStakePeriod,\n            0, // if this pool is !mintable, no reward amount initially, must add more REWARD later\n            false, // first pool no need to update others\n            false\n        );\n    }\n\n    function poolLength() external view override returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // NOTE: if this Pool is a non-mintable reward, then the pool contract must be given approval for trasfer of tokens before any new add() is called\n    // Add a new STAKE token to the pool. Can only be called by the owner.\n    function add(\n        address _stakeToken,\n        uint256 _allocPoint,\n        uint256 _startBlock,\n        uint256 _bonusMultiplier,\n        uint256 _bonusEndBlock,\n        uint256 _minStakePeriod,\n        uint256 _rewardAmount, // total amount of REWARD available for distribution for this pool, ignored if this rewardToken is mintable\n        bool _withUpdate,\n        bool _isLpToken\n    ) public override onlyAdmin {\n        _add(\n            _stakeToken,\n            _allocPoint,\n            _startBlock,\n            _bonusMultiplier,\n            _bonusEndBlock,\n            _minStakePeriod,\n            _rewardAmount,\n            _withUpdate,\n            _isLpToken\n        );\n    }\n\n    // Update the entire pool's reward per block. Can only be called by admin or governance\n    function updateRewardPerBlock(uint256 _rewardPerBlock) public override onlyGovernance {\n        require(_isInitialized, \"Pool::updateRewardPerBlock: POOL_NOT_INITIALIZED\");\n        rewardPerBlock = _rewardPerBlock;\n        massUpdatePools();\n        emit RewardPerBlockSet(_rewardPerBlock);\n    }\n\n    // Update the given pool's REWARD allocation points. Can only be called by admin or governance\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public override onlyGovernance {\n        require(_isInitialized, \"Pool::set: POOL_NOT_INITIALIZED\");\n        require(_pid < poolInfo.length, \"Pool::set: INVALID_PID\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n        if (prevAllocPoint != _allocPoint) {\n            totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\n            poolInfo[_pid].allocPoint = _allocPoint;\n        }\n\n        emit AllocationSet(_pid, _allocPoint);\n    }\n\n    // Update the given pool's start block. Can only be called by admin or governance\n    function updateStart(uint256 _pid, uint256 _startBlock) public override onlyGovernance {\n        require(_isInitialized, \"Pool::set: POOL_NOT_INITIALIZED\");\n        require(_pid < poolInfo.length, \"Pool::updateStart: INVALID_PID\");\n        require(\n            _startBlock > block.number && block.number <= poolInfo[_pid].startBlock,\n            \"Pool::updateStart: INVALID_START_BLOCK\"\n        );\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n        poolInfo[_pid].lastRewardBlock = lastRewardBlock;\n        poolInfo[_pid].startBlock = _startBlock;\n\n        emit StartingBlockSet(_pid, _startBlock);\n    }\n\n    // Update the given pool's bonus data. Can only be called by admin or governance\n    function updateBonus(\n        uint256 _pid,\n        uint256 _bonusEndBlock,\n        uint256 _bonusMultiplier\n    ) public override onlyGovernance {\n        require(_isInitialized, \"Pool::updateBonus: POOL_NOT_INITIALIZED\");\n        require(_pid < poolInfo.length, \"Pool::updateBonus: INVALID_PID\");\n        require(poolInfo[_pid].startBlock > block.number, \"Pool::updateBonus: STAKING_STARTED\");\n        require(poolInfo[_pid].startBlock <= _bonusEndBlock, \"Pool::updateBonus: INVALID_BONUS_END_BLOCK\");\n\n        poolInfo[_pid].bonusEndBlock = _bonusEndBlock;\n        poolInfo[_pid].bonusMultiplier = _bonusMultiplier;\n\n        updatePool(_pid);\n\n        emit BonusDataSet(_pid, _bonusEndBlock, _bonusMultiplier);\n    }\n\n    // NOTE: need to approve _rewardAmount for transfer for this pool address from the caller before calling\n    // Adds _rewardAmount to the rewardAmount for a given pool. Can only be called by admin or governance\n    function addRewardAmount(uint256 _pid, uint256 _rewardAmount) public override onlyAdmin {\n        require(_isInitialized, \"Pool::addRewardAmount: POOL_NOT_INITIALIZED\");\n        require(_pid < poolInfo.length, \"Pool::addRewardAmount: INVALID_PID\");\n        require(!mintable, \"Pool::addRewardAmount: REWARD_MINTABLE\");\n        uint256 oldAmount = poolInfo[_pid].rewardAmount;\n        poolInfo[_pid].rewardAmount = oldAmount + _rewardAmount;\n        // transfer added amount of tokens to be used as rewards for the pool at _pid\n        TransferHelper.safeTransferFrom(rewardToken, _msgSender(), address(this), _rewardAmount);\n\n        emit AddedRewardAmount(_pid, oldAmount, poolInfo[_pid].rewardAmount);\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(\n        uint256 _pid,\n        uint256 _from,\n        uint256 _to\n    ) public view override returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (_to <= pool.bonusEndBlock) {\n            return (_to - _from) * pool.bonusMultiplier;\n        } else if (_from >= pool.bonusEndBlock) {\n            return _to - _from;\n        } else {\n            return ((pool.bonusEndBlock - _from) * pool.bonusMultiplier) + (_to - pool.bonusEndBlock);\n        }\n    }\n\n    // View function to see pending REWARDs on frontend.\n    function pendingReward(uint256 _pid, address _user) external view override returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 stakeSupply = IERC20(pool.stakeToken).balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && stakeSupply != 0) {\n            uint256 multiplier = getMultiplier(_pid, pool.lastRewardBlock, block.number);\n            uint256 reward = (multiplier * rewardPerBlock * pool.allocPoint) / totalAllocPoint;\n            accRewardPerShare = accRewardPerShare + ((reward * PRECISION_FACTOR) / stakeSupply);\n        }\n        uint256 result = ((user.amount * accRewardPerShare) / PRECISION_FACTOR) - user.rewardDebt;\n        if (!mintable) {\n            if (result > pool.rewardAmount) {\n                result = pool.rewardAmount;\n            }\n        }\n        return result + user.pendingReward;\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public override {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public override {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 stakeSupply = IERC20(pool.stakeToken).balanceOf(address(this));\n\n        if (stakeSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(_pid, pool.lastRewardBlock, block.number);\n        uint256 reward = (multiplier * rewardPerBlock * pool.allocPoint) / totalAllocPoint;\n\n        if (mintable) {\n            IERC20Mintable(rewardToken).mint(address(this), reward);\n            (uint256 ratioFee, uint256 bone) = IFactory(_factory).getFee();\n            if (ratioFee > 0) {\n                uint256 amountFee = (reward * bone) / ratioFee;\n                IERC20Mintable(rewardToken).mint(treasury, amountFee);\n            }\n            pool.accRewardPerShare = pool.accRewardPerShare + ((reward * PRECISION_FACTOR) / stakeSupply);\n        }\n\n        if (block.number >= pool.startBlock) {\n            pool.lastRewardBlock = block.number;\n        }\n    }\n\n    // Deposit STAKE tokens to POOL for REWARD allocation.\n    function deposit(uint256 _pid, uint256 _amount) public payable override {\n        if (_pid > 0) {\n            require(msg.value == 0, \"Pool::deposit: INVALID_MSG_VALUE_ZERO\");\n        } else {\n            require(msg.value == _amount, \"Pool::deposit: INVALID_MSG_VALUE_AMOUNT\");\n        }\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            // not the first deposit, so may have some existing REWARD payout pending\n            uint256 pending = ((user.amount * pool.accRewardPerShare) / PRECISION_FACTOR) - user.rewardDebt;\n            if (pending > 0) {\n                if (!mintable) {\n                    uint256 reward;\n                    if (pending <= pool.rewardAmount) {\n                        reward = pending;\n                        pool.rewardAmount = pool.rewardAmount - reward;\n                    } else {\n                        // pending reward payout is larger than remaining pool REWARDs\n                        reward = pool.rewardAmount;\n                        pool.rewardAmount = 0;\n                    }\n                    user.pendingReward = user.pendingReward + reward;\n                } else {\n                    user.pendingReward = user.pendingReward + pending;\n                }\n            }\n        }\n\n        if (_amount > 0) {\n            if (msg.value > 0) {\n                IWNATIVE(nativeToken).deposit{ value: msg.value }(); // this will trasfer the equivalent amount of wrapped tokens to this contract\n            } else {\n                TransferHelper.safeTransferFrom(pool.stakeToken, _msgSender(), address(this), _amount);\n            }\n            user.amount = user.amount + _amount;\n            pool.totalStake = pool.totalStake + _amount;\n        }\n\n        user.rewardDebt = (user.amount * pool.accRewardPerShare) / PRECISION_FACTOR;\n        emit Deposit(_msgSender(), _pid, _amount);\n    }\n\n    // Withdraw STAKED tokens from Pool.\n    function withdraw(uint256 _pid, uint256 _amount) public override {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n        require(user.amount >= _amount, \"Pool::withdraw: INVALID_AMOUNT\");\n        updatePool(_pid);\n        uint256 pending = ((user.amount * pool.accRewardPerShare) / PRECISION_FACTOR) - user.rewardDebt;\n        uint256 newReward;\n        if (pending > 0) {\n            // enforce min block staking penalty for withdrawals (any penalty amount is paid to treasury)\n            // uint256 rewardPercentage = _calcRewardPercentage(pool.startBlock, pool.minStakePeriod);\n            // uint256 rewardToUser;\n            // uint256 rewardToTreasury;\n            if (!mintable) {\n                uint256 reward;\n                if (pending <= pool.rewardAmount) {\n                    reward = pending;\n                    pool.rewardAmount = pool.rewardAmount - reward;\n                } else {\n                    // pending reward payout is larger than remaining pool REWARDs\n                    reward = pool.rewardAmount;\n                    pool.rewardAmount = 0;\n                }\n                // rewardToUser = ((reward * rewardPercentage) / 10000);\n                // rewardToTreasury = reward - rewardToUser;\n                newReward = reward;\n                // _safeRewardTransfer(treasury, rewardToTreasury);\n            } else {\n                // rewardToUser = ((pending * rewardPercentage) / 10000);\n                // rewardToTreasury = pending - rewardToUser;\n                newReward = pending;\n                // _safeRewardTransfer(treasury, rewardToTreasury);\n            }\n        }\n        uint256 pendingAmount = user.pendingReward;\n        user.pendingReward = 0;\n        if (pendingAmount + newReward > 0) {\n            _safeRewardTransfer(_msgSender(), newReward + pendingAmount);\n        }\n\n        if (_amount > 0) {\n            user.amount = user.amount - _amount;\n            pool.totalStake = pool.totalStake - _amount;\n            if (_pid > 0) {\n                TransferHelper.safeTransfer(pool.stakeToken, _msgSender(), _amount);\n            } else {\n                IWNATIVE(nativeToken).withdraw(_amount);\n                TransferHelper.safeTransferNative(_msgSender(), _amount);\n            }\n        }\n\n        user.rewardDebt = (user.amount * pool.accRewardPerShare) / PRECISION_FACTOR;\n\n        emit Withdraw(_msgSender(), _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public override {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n        if (_pid > 0) {\n            TransferHelper.safeTransfer(pool.stakeToken, _msgSender(), user.amount);\n        } else {\n            IWNATIVE(nativeToken).withdraw(user.amount);\n            TransferHelper.safeTransferNative(_msgSender(), user.amount);\n        }\n        user.amount = 0;\n        pool.totalStake = pool.totalStake - user.amount;\n        user.rewardDebt = 0;\n        user.pendingReward = 0;\n        emit EmergencyWithdraw(_msgSender(), _pid, user.amount);\n    }\n\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external override onlyAdmin {\n        require(!staked[_tokenAddress], \"Pool::recoverWrongTokens: STAKED_TOKEN\");\n        require(_tokenAddress != rewardToken, \"Pool::recoverWrongTokens: REWARD_TOKEN\");\n\n        TransferHelper.safeTransfer(_tokenAddress, _msgSender(), _tokenAmount);\n\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\n    }\n\n    // Safe reward token transfer function, just in case a rounding error causes the pool to not have enough reward tokens.\n    function _safeRewardTransfer(address to, uint256 amount) internal {\n        uint256 rewardBal = IERC20(rewardToken).balanceOf(address(this));\n        if (amount > rewardBal) {\n            TransferHelper.safeTransfer(rewardToken, to, rewardBal);\n        } else {\n            TransferHelper.safeTransfer(rewardToken, to, amount);\n        }\n    }\n\n    // for calculating minimum staking period and linear reduction of rewards\n    // function _calcRewardPercentage(uint256 _startBlock, uint256 _minStakePeriod) internal view returns (uint256) {\n    //     if(block.number >= _startBlock + _minStakePeriod) {\n    //         return 10000; // 100.00%\n    //     } else if (block.number > _startBlock) { // range 1 - 9999, .01% - 99.99%\n    //         uint256 elapsed = block.number - _startBlock;\n    //         return ((elapsed * 10000) / _minStakePeriod);\n    //     } else {\n    //         return 0; // 0%\n    //     }\n    // }\n\n    // internal add to expose to initialize() and callable\n    function _add(\n        address _stakeToken,\n        uint256 _allocPoint,\n        uint256 _startBlock,\n        uint256 _bonusMultiplier,\n        uint256 _bonusEndBlock,\n        uint256 _minStakePeriod,\n        uint256 _rewardAmount,\n        bool _withUpdate,\n        bool _isLpToken\n    ) internal {\n        require(_isInitialized, \"Pool::add: POOL_NOT_INITIALIZED\");\n        require(!staked[_stakeToken], \"Pool::add: STAKE_POOL_ALREADY_EXISTS\");\n        require(_startBlock >= block.number, \"Pool::add: INVALID_START_BLOCK\");\n\n        require(_bonusMultiplier >= 1, \"Pool::add: INVALID_BONUS_MULTIPLIER\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n\n        PoolInfo storage newPool = poolInfo.push();\n        newPool.stakeToken = _stakeToken;\n        newPool.allocPoint = _allocPoint;\n        newPool.lastRewardBlock = lastRewardBlock;\n        newPool.accRewardPerShare = 0;\n        newPool.bonusEndBlock = _bonusEndBlock;\n        newPool.startBlock = _startBlock;\n        newPool.minStakePeriod = _minStakePeriod;\n        newPool.bonusMultiplier = _bonusMultiplier;\n        newPool.totalStake = 0;\n        newPool.isLpToken = _isLpToken;\n\n        if (!mintable) {\n            if (_rewardAmount > 0) {\n                // transfer initial amount of tokens to be used as rewards for this pool\n                TransferHelper.safeTransferFrom(rewardToken, _msgSender(), address(this), _rewardAmount);\n                newPool.rewardAmount = _rewardAmount;\n            }\n        }\n\n        emit PoolAdded(\n            poolInfo.length - 1,\n            _stakeToken,\n            _allocPoint,\n            _startBlock,\n            _bonusMultiplier,\n            _bonusEndBlock,\n            _minStakePeriod\n        );\n    }\n}\n"
    },
    "contracts/pool/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./interface/IPoolFactory.sol\";\nimport \"../access/interfaces/IManager.sol\";\nimport \"./Pool.sol\";\n\ncontract PoolFactory is Context, IPoolFactory {\n    address public override treasury;\n\n    address public override WNATIVE;\n    IManager public manager;\n\n    uint256 public feeRatio = 0;\n    uint256 public BONE = 1e4;\n\n    // map of created pools - by reward token\n    mapping(address => address) public override rewardPools;\n\n    constructor(\n        address _treasury,\n        address _nativeToken,\n        address _manager\n    ) {\n        treasury = _treasury;\n        WNATIVE = _nativeToken; // @dev _nativeToken must be a wrapped native token or all subsequent pool logic will fail\n        manager = IManager(_manager);\n    }\n\n    modifier onlyAdmin() {\n        require(manager.isAdmin(_msgSender()), \"Pool::onlyAdmin\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(manager.isGorvernance(_msgSender()), \"Pool::onlyGovernance\");\n        _;\n    }\n\n    /*\n     * @notice Deploy a reward pool\n     * @param _rewardToken: reward token address for POOL rewards\n     * @param _rewardPerBlock: the amountof tokens to reward per block for the entire POOL\n     * remaining parmas define the condition variables for the first NATIVE token staking pool for this REWARD\n     */\n    function deployPool(\n        address _rewardToken,\n        uint256 _rewardPerBlock,\n        uint256 _nativeAllocPoint,\n        uint256 _nativeStartBlock,\n        uint256 _nativeBonusMultiplier,\n        uint256 _nativeBonusEndBlock,\n        uint256 _nativeMinStakePeriod\n    ) external override onlyAdmin {\n        require(rewardPools[_rewardToken] == address(0), \"PoolFactory::deployPool: REWARD_POOL_ALREADY_DEPLOYED\");\n\n        bytes memory bytecode = type(Pool).creationCode;\n        bytes32 salt = keccak256(\n            abi.encodePacked(\n                _rewardToken,\n                _rewardPerBlock,\n                treasury,\n                _nativeAllocPoint,\n                _nativeStartBlock,\n                _nativeBonusMultiplier,\n                _nativeBonusEndBlock,\n                _nativeMinStakePeriod\n            )\n        );\n        address poolAddress;\n\n        assembly {\n            poolAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        rewardPools[_rewardToken] = poolAddress;\n\n        IPool(poolAddress).initialize(\n            _rewardToken,\n            _rewardPerBlock,\n            treasury,\n            WNATIVE,\n            _nativeAllocPoint,\n            _nativeStartBlock,\n            _nativeBonusMultiplier,\n            _nativeBonusEndBlock,\n            _nativeMinStakePeriod,\n            address(manager)\n        );\n\n        emit PoolCreated(_rewardToken, poolAddress);\n    }\n\n    // Update Treasury. NOTE: better for treasury to be upgradable so no need to use this.\n    function setTreasury(address newTreasury) external override onlyAdmin {\n        treasury = newTreasury;\n    }\n\n    // Update Wrapped Native implementation, @dev this must be a wrapped native token or all subsequent pool logic can fail\n    // NOTE: better for WNATIVE to be upgradable so no need to use this.\n    function setNative(address newNative) external override onlyAdmin {\n        WNATIVE = newNative;\n    }\n\n    function setFeeRatio(uint256 _feeRatio, uint256 _BONE) external override onlyGovernance {\n        feeRatio = _feeRatio;\n        BONE = _BONE;\n    }\n\n    function getFee() external view override returns (uint256, uint256) {\n        return (feeRatio, BONE);\n    }\n}\n"
    },
    "contracts/pool/interface/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\ninterface IPool {\n    /* EVENTS */\n    event PoolAdded(\n        uint256 pid,\n        address stakeToken,\n        uint256 allocPoint,\n        uint256 startBlock,\n        uint256 bonusMultiplier,\n        uint256 bonusEndBlock,\n        uint256 minStakePeriod\n    );\n\n    event AllocationSet(uint256 pid, uint256 allocPoint);\n\n    event RewardPerBlockSet(uint256 rewardPerBlock);\n\n    event StartingBlockSet(uint256 pid, uint256 startBlock);\n\n    event MinStakePeriodSet(uint256 pid, uint256 minStakePeriod);\n\n    event AddedRewardAmount(uint256 pid, uint256 oldAmount, uint256 newAmount);\n\n    event BonusDataSet(uint256 pid, uint256 bonusEndBlock, uint256 bonusMultiplier);\n\n    event AdminTokenRecovery(address token, uint256 amount);\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    /* public var getters */\n\n    function rewardToken() external view returns (address);\n\n    function rewardPerBlock() external view returns (uint256);\n\n    function mintable() external view returns (bool);\n\n    function treasury() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function PRECISION_FACTOR() external view returns (uint256);\n\n    function staked(address) external view returns (bool);\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            bool\n        );\n\n    function userInfo(uint256, address)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function totalAllocPoint() external view returns (uint256);\n\n    /* PUBLIC GETTERS */\n\n    function poolLength() external view returns (uint256);\n\n    function getMultiplier(\n        uint256 _pid,\n        uint256 _from,\n        uint256 _to\n    ) external view returns (uint256);\n\n    // should change back to pendingReward for live deploy\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256);\n\n    /* PUBLIC */\n\n    function deposit(uint256 _pid, uint256 _amount) external payable;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function massUpdatePools() external;\n\n    function updatePool(uint256 _pid) external;\n\n    /* ADMIN/GOVERNANCE */\n\n    function initialize(\n        address _rewardToken,\n        uint256 _rewardPerBlock,\n        address _treasury,\n        address _nativeToken,\n        uint256 _nativeAllocPoint,\n        uint256 _nativeStartBlock,\n        uint256 _nativeBonusMultiplier,\n        uint256 _nativeBonusEndBlock,\n        uint256 _nativeMinStakePeriod,\n        address _manager\n    ) external;\n\n    function add(\n        address _stakeToken,\n        uint256 _allocPoint,\n        uint256 _startBlock,\n        uint256 _bonusMultiplier,\n        uint256 _bonusEndBlock,\n        uint256 _minStakePeriod,\n        uint256 _rewardAmount,\n        bool _withUpdate,\n        bool _isLpToken\n    ) external;\n\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) external;\n\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external;\n\n    function updateStart(uint256 _pid, uint256 _startBlock) external;\n\n    // function updateMinStakePeriod(uint256 _pid, uint256 _minStakePeriod) external;\n\n    function updateBonus(\n        uint256 _pid,\n        uint256 _bonusEndBlock,\n        uint256 _bonusMultiplier\n    ) external;\n\n    function addRewardAmount(uint256 _pid, uint256 _rewardAmount) external;\n\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external;\n}\n"
    },
    "contracts/pool/interface/IPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\ninterface IPoolFactory {\n    event PoolCreated(address indexed rewardToken, address indexed pool);\n\n    function treasury() external view returns (address);\n\n    function WNATIVE() external view returns (address);\n\n    function rewardPools(address) external view returns (address);\n\n    function deployPool(\n        address _rewardToken,\n        uint256 _rewardPerBlock,\n        uint256 _nativeAllocPoint,\n        uint256 _nativeStartBlock,\n        uint256 _nativeBonusMultiplier,\n        uint256 _nativeBonusEndBlock,\n        uint256 _nativeMinStakePeriod\n    ) external;\n\n    function setTreasury(address newTreasury) external;\n\n    function setNative(address newNative) external;\n\n    function getFee() external returns (uint256, uint256);\n\n    function setFeeRatio(uint256 _feeRatio, uint256 _BONE) external;\n}\n"
    },
    "contracts/token/protocol/extension/mintable/interface/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\n/**\n * @dev Interface of ERC20 Mint functionality.\n */\n\ninterface IERC20Mintable {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/token/wrapped/IWNATIVE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n\n/**\n * @dev Interface of added Wrapped Native token functionality.\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWNATIVE is IERC20 {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external override returns (bool);\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawFor(address account, uint256 amount) external;\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n}\n"
    },
    "contracts/util/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity >=0.8.2 <0.9.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferNative(address to, uint256 value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"TransferHelper::safeTransferNative: TRANSFER_FAILED\");\n    }\n}\n"
    }
  }
}}