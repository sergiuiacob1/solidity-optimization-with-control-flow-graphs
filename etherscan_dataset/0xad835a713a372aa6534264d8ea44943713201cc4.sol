{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IFxMessageProcessor represents interface to process message\ninterface IFxMessageProcessor {\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\n}\n\n/**\n* @notice Mock child tunnel contract to receive and send message from L2\n*/\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\n    // MessageTunnel on L1 will get data from this event\n    event MessageSent(bytes message);\n\n    // fx child\n    address public fxChild;\n\n    // fx root tunnel\n    address public fxRootTunnel;\n\n    constructor(address _fxChild) {\n        fxChild = _fxChild;\n    }\n\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\n    modifier validateSender(address sender) {\n        require(sender == fxRootTunnel, \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\");\n        _;\n    }\n\n    // set fxRootTunnel if not set already\n    function setFxRootTunnel(address _fxRootTunnel) external {\n        require(fxRootTunnel == address(0x0), \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\");\n        fxRootTunnel = _fxRootTunnel;\n    }\n\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\n        _processMessageFromRoot(stateId, rootMessageSender, data);\n    }\n\n    /**\n     * @notice Emit message that can be received on Root Tunnel\n     * @dev Call the internal function when need to emit message\n     * @param message bytes message that will be sent to Root Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToRoot(bytes memory message) internal {\n        emit MessageSent(message);\n    }\n\n    /**\n     * @notice Process message received from Root Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param stateId unique state id\n     * @param sender root message sender\n     * @param message bytes message that was sent from Root Tunnel\n     */\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/shared/Adminable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Utilities.sol\";\n\ncontract Adminable is Utilities {\n\n    mapping(address => bool) private admins;\n\n    function addAdmin(address _address) external onlyOwner {\n        require(_address.code.length > 0, \"must be a contract\");\n        admins[_address] = true;\n    }\n\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\n        uint256 len = _addresses.length;\n        for(uint256 i = 0; i < len; i++) {\n            require(_addresses[i].code.length > 0, \"must be a contract\");\n            admins[_addresses[i]] = true;\n        }\n    }\n\n    function removeAdmin(address _address) external onlyOwner {\n        admins[_address] = false;\n    }\n\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\n        uint256 len = _addresses.length;\n        for(uint256 i = 0; i < len; i++) {\n            admins[_addresses[i]] = false;\n        }\n    }\n\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\n        if(_shouldPause) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    function isAdmin(address _address) public view returns(bool) {\n        return admins[_address];\n    }\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender], \"Not admin\");\n        _;\n    }\n\n    modifier onlyAdminOrOwner() {\n        require(admins[msg.sender] || isOwner(), \"Not admin or owner\");\n        _;\n    }\n}"
    },
    "contracts/shared/Utilities.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ncontract Utilities is Ownable, Pausable {\n\n    modifier nonZeroAddress(address _address) {\n        require(address(0) != _address, \"0 address\");\n        _;\n    }\n\n    modifier nonZeroLength(uint[] memory _array) {\n        require(_array.length > 0, \"Empty array\");\n        _;\n    }\n\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\n        require(_array1.length == _array2.length, \"Unequal lengths\");\n        _;\n    }\n\n    modifier onlyEOA() {\n        /* solhint-disable avoid-tx-origin */\n        require(msg.sender == tx.origin, \"No contracts\");\n        _;\n    }\n\n    function isOwner() internal view returns(bool) {\n        return owner() == msg.sender;\n    }\n}"
    },
    "contracts/wnd/tunnels/ChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\";\n\nimport \"../../shared/Adminable.sol\";\nimport \"./IMessageHandler.sol\";\nimport \"./IChildTunnel.sol\";\n\ncontract ChildTunnel is IChildTunnel, FxBaseChildTunnel, Adminable {\n\n    IMessageHandler public messageHandler;\n\n    constructor(\n        address _fxChild\n    ) FxBaseChildTunnel(_fxChild) {\n        _pause();\n    }\n\n    function setMessageHandler(address _messageHandlerAddress) external onlyAdminOrOwner {\n        require(_messageHandlerAddress != address(0), \"invalid message handler\");\n        messageHandler = IMessageHandler(_messageHandlerAddress);\n    }\n\n    function sendMessageToRoot(bytes calldata _message) external override onlyAdminOrOwner {\n        require(address(messageHandler) != address(0), \"Message handler not set\");\n        _sendMessageToRoot(_message);\n    }\n\n    // Purposefully exclude the first argument as it is not needed.\n    function _processMessageFromRoot(\n        uint256,\n        address sender,\n        bytes memory data\n    ) internal override validateSender(sender) {\n        messageHandler.handleMessage(data);\n    }\n}"
    },
    "contracts/wnd/tunnels/IChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IChildTunnel {\n\n    // Sends the bytes to the root (L1).\n    // Admin only.\n    function sendMessageToRoot(bytes calldata _data) external;\n}"
    },
    "contracts/wnd/tunnels/IMessageHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMessageHandler {\n\n    // Handles the given message from the other bridge\n    // Admin only.\n    function handleMessage(bytes calldata _data) external;\n}"
    }
  }
}}