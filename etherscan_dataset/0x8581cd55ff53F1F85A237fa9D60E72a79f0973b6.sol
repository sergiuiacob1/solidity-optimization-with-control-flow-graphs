{{
  "language": "Solidity",
  "sources": {
    "contracts/Broker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IOnchainVaults.sol\";\nimport \"./interfaces/IOrderRegistry.sol\";\nimport \"./interfaces/IShareToken.sol\";\nimport \"./interfaces/IStrategyPool.sol\";\n\n/**\n * @title common broker\n */\ncontract Broker is Ownable {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    event PriceChanged(uint256 rideId, uint256 oldVal, uint256 newVal);\n    event SlippageChanged(uint256 rideId, uint256 oldVal, uint256 newVal);\n    event RideInfoRegistered(uint256 rideId, RideInfo rideInfo);\n    event MintAndSell(uint256 rideId, uint256 mintShareAmt, uint256 price, uint256 slippage);\n    event CancelSell(uint256 rideId, uint256 cancelShareAmt);\n    event RideDeparted(uint256 rideId, uint256 usedInputTokenAmt);\n    event SharesBurned(uint256 rideId, uint256 burnedShareAmt);\n    event SharesRedeemed(uint256 rideId, uint256 redeemedShareAmt);\n    event OnchainVaultsChanged(address oldAddr, address newAddr);\n\n    address public onchainVaults;\n\n    mapping (uint256=>uint256) public prices; // rideid=>price, price in decimal 1e18\n    uint256 public constant PRICE_DECIMALS = 1e18;\n    mapping (uint256=>uint256) public slippages; // rideid=>slippage, slippage in denominator 10000\n    uint256 public constant SLIPPAGE_DENOMINATOR = 10000;\n\n    bytes4 internal constant ERC20_SELECTOR = bytes4(keccak256(\"ERC20Token(address)\"));\n    bytes4 internal constant ETH_SELECTOR = bytes4(keccak256(\"ETH()\"));\n    uint256 internal constant SELECTOR_OFFSET = 0x20;\n\n    // Starkex token id of this mint token\n\n    struct RideInfo {\n        address share;\n        uint256 tokenIdShare;\n        uint256 quantumShare; \n        address inputToken;\n        uint256 tokenIdInput;\n        uint256 quantumInput;\n        address outputToken;\n        uint256 tokenIdOutput;\n        uint256 quantumOutput;\n\n        address strategyPool; // 3rd defi pool\n    }\n    // rideid => RideInfo\n    // rideId will also be used as vaultIdShare, vaultIdInput and vaultIdOutput,\n    // this is easy to maintain and will assure funds from different rides wonâ€™t mix together and create weird edge cases\n    mapping (uint256 => RideInfo) public rideInfos; \n\n    mapping (uint256=>uint256) public ridesShares; // rideid=>amount\n    mapping (uint256=>bool) public rideDeparted; // rideid=>bool\n    \n    uint256 public nonce;\n    uint256 public constant EXP_TIME = 2e6; // expiration time stamp of the limit order \n\n    mapping (uint256=>uint256) public actualPrices; //rideid=>actual price\n\n    struct OrderAssetInfo {\n        uint256 tokenId;\n        uint256 quantizedAmt;\n        uint256 vaultId;\n    }\n\n    /**\n     * @dev Constructor\n     */\n    constructor(\n        address _onchainVaults\n    ) {\n        onchainVaults = _onchainVaults;\n    }\n\n    /**\n     * @notice can be set multiple times, will use latest when mintShareAndSell.\n     */\n    function setPrice(uint256 _rideId, uint256 _price) external onlyOwner {\n        require(ridesShares[_rideId] == 0, \"change forbidden once share starting to sell\");\n\n        uint256 oldVal = prices[_rideId];\n        prices[_rideId] = _price;\n        emit PriceChanged(_rideId, oldVal, _price);\n    }\n\n    /**\n     * @notice price slippage allowance when executing strategy\n     */\n    function setSlippage(uint256 _rideId, uint256 _slippage) external onlyOwner {\n        require(_slippage <= 10000, \"invalid slippage\");\n        require(ridesShares[_rideId] == 0, \"change forbidden once share starting to sell\");\n\n        uint256 oldVal = slippages[_rideId];\n        slippages[_rideId] = _slippage;\n        emit SlippageChanged(_rideId, oldVal, _slippage);\n    }\n\n    /**\n     * @notice registers ride info\n     */\n    function addRideInfo(uint256 _rideId, uint256[3] memory _tokenIds, address[3] memory _tokens, address _strategyPool) external onlyOwner {\n        RideInfo memory rideInfo = rideInfos[_rideId];\n        require(rideInfo.tokenIdInput == 0, \"ride assets info registered already\");\n\n        require(_strategyPool.isContract(), \"invalid strategy pool addr\");\n        _checkValidTokenIdAndAddr(_tokenIds[0], _tokens[0]);\n        _checkValidTokenIdAndAddr(_tokenIds[1], _tokens[1]);\n        _checkValidTokenIdAndAddr(_tokenIds[2], _tokens[2]);\n\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\n        uint256 quantumShare = ocv.getQuantum(_tokenIds[0]);\n        uint256 quantumInput = ocv.getQuantum(_tokenIds[1]);\n        uint256 quantumOutput = ocv.getQuantum(_tokenIds[2]);\n        rideInfo = RideInfo(_tokens[0], _tokenIds[0], quantumShare, _tokens[1], _tokenIds[1], \n            quantumInput,  _tokens[2], _tokenIds[2], quantumOutput, _strategyPool);\n        rideInfos[_rideId] = rideInfo;\n        emit RideInfoRegistered(_rideId, rideInfo);\n    }\n\n    /**\n     * @notice mint share and sell for input token\n     */\n    function mintShareAndSell(uint256 _rideId, uint256 _amount, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\n        RideInfo memory rideInfo = rideInfos[_rideId];\n        require(rideInfo.tokenIdInput != 0, \"ride assets info not registered\");\n        require(prices[_rideId] != 0, \"price not set\");\n        require(slippages[_rideId] != 0, \"slippage not set\");\n        require(ridesShares[_rideId] == 0, \"already mint for this ride\"); \n        if (_tokenIdFee != 0) {\n            _checkValidTokenId(_tokenIdFee);\n        }\n\n        IShareToken(rideInfo.share).mint(address(this), _amount);\n\n        IERC20(rideInfo.share).safeIncreaseAllowance(onchainVaults, _amount);\n        IOnchainVaults(onchainVaults).depositERC20ToVault(rideInfo.tokenIdShare, _rideId, _amount / rideInfo.quantumShare);\n        \n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdShare, _amount / rideInfo.quantumShare, _rideId), \n            OrderAssetInfo(rideInfo.tokenIdInput, _amount / rideInfo.quantumInput, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\n        \n        ridesShares[_rideId] = _amount;\n\n        emit MintAndSell(_rideId, _amount, prices[_rideId], slippages[_rideId]);\n    }\n\n    /**\n     * @notice cancel selling for input token\n     */\n    function cancelSell(uint256 _rideId, uint256 _amount, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\n        uint256 amount = ridesShares[_rideId];\n        require(amount >= _amount, \"no enough shares to cancel sell\"); \n        require(!rideDeparted[_rideId], \"ride departed already\");\n        if (_tokenIdFee != 0) {\n            _checkValidTokenId(_tokenIdFee);\n        }\n\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdInput, _amount / rideInfo.quantumInput, _rideId), \n            OrderAssetInfo(rideInfo.tokenIdShare, _amount / rideInfo.quantumShare, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\n\n        emit CancelSell(_rideId, _amount);\n    }\n\n    /**\n     * @notice ride departure to execute strategy (swap input token for output token)\n     * share : inputtoken = 1 : 1, outputtoken : share = price\n     */\n    function departRide(uint256 _rideId, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\n        require(!rideDeparted[_rideId], \"ride departed already\");\n        if (_tokenIdFee != 0) {\n            _checkValidTokenId(_tokenIdFee);\n        }\n\n        rideDeparted[_rideId] = true;\n\n        burnRideShares(_rideId); //burn unsold shares\n        uint256 amount = ridesShares[_rideId]; //get the left share amount\n        require(amount > 0, \"no shares to depart\"); \n        \n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\n\n        uint256 inputTokenAmt;\n        {\n            uint256 inputTokenQuantizedAmt = ocv.getQuantizedVaultBalance(address(this), rideInfo.tokenIdInput, _rideId);\n            assert(inputTokenQuantizedAmt > 0); \n            ocv.withdrawFromVault(rideInfo.tokenIdInput, _rideId, inputTokenQuantizedAmt);\n            inputTokenAmt = inputTokenQuantizedAmt * rideInfo.quantumInput;\n        }\n\n        uint256 outputAmt;\n        if (rideInfo.inputToken == address(0) /*ETH*/) {\n            outputAmt = IStrategyPool(rideInfo.strategyPool).sellEth{value: inputTokenAmt}(rideInfo.outputToken);\n        } else {\n            IERC20(rideInfo.inputToken).safeIncreaseAllowance(rideInfo.strategyPool, inputTokenAmt);\n            outputAmt = IStrategyPool(rideInfo.strategyPool).sellErc(rideInfo.inputToken, rideInfo.outputToken, inputTokenAmt);\n        }\n\n        {\n            uint256 expectMinResult = amount * prices[_rideId] * (SLIPPAGE_DENOMINATOR - slippages[_rideId]) / PRICE_DECIMALS / SLIPPAGE_DENOMINATOR;\n            require(outputAmt >= expectMinResult, \"price and slippage not fulfilled\");\n            \n            actualPrices[_rideId] = outputAmt * PRICE_DECIMALS / amount;\n\n            if (rideInfo.outputToken != address(0) /*ERC20*/) {\n                IERC20(rideInfo.outputToken).safeIncreaseAllowance(onchainVaults, outputAmt);\n                ocv.depositERC20ToVault(rideInfo.tokenIdOutput, _rideId, outputAmt / rideInfo.quantumOutput);\n            } else {\n                ocv.depositEthToVault{value: outputAmt / rideInfo.quantumOutput * rideInfo.quantumOutput}(rideInfo.tokenIdOutput, _rideId);\n            }\n        }\n\n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdOutput, outputAmt / rideInfo.quantumOutput, _rideId), \n            OrderAssetInfo(rideInfo.tokenIdShare, amount / rideInfo.quantumShare, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\n\n        emit RideDeparted(_rideId, inputTokenAmt);\n    }\n\n    /**\n     * @notice burn ride shares after ride is done\n     */\n    function burnRideShares(uint256 _rideId) public onlyOwner {\n        uint256 amount = ridesShares[_rideId];\n        require(amount > 0, \"no shares to burn\"); \n        \n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\n        uint256 quantizedAmountToBurn = ocv.getQuantizedVaultBalance(address(this), rideInfo.tokenIdShare, _rideId);\n        require(quantizedAmountToBurn > 0, \"no shares to burn\");\n\n        ocv.withdrawFromVault(rideInfo.tokenIdShare, _rideId, quantizedAmountToBurn);\n\n        uint256 burnAmt = quantizedAmountToBurn * rideInfo.quantumShare;\n        ridesShares[_rideId] = amount - burnAmt; // update to left amount\n        IShareToken(rideInfo.share).burn(address(this), burnAmt);\n\n        emit SharesBurned(_rideId, burnAmt);\n    }\n\n    /**\n     * @notice user to redeem share for input or output token \n     * input token when ride has not been departed, otherwise, output token\n     */\n    function redeemShare(uint256 _rideId, uint256 _redeemAmount) external {\n        uint256 amount = ridesShares[_rideId];\n        require(amount > 0, \"no shares to redeem\");\n\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\n\n        IERC20(rideInfo.share).safeTransferFrom(msg.sender, address(this), _redeemAmount);\n\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\n        bool departed = rideDeparted[_rideId];\n        if (departed) {\n            //swap to output token\n            uint256 boughtAmt = _redeemAmount * actualPrices[_rideId] / PRICE_DECIMALS;            \n            ocv.withdrawFromVault(rideInfo.tokenIdOutput, _rideId, boughtAmt / rideInfo.quantumOutput);\n            if (rideInfo.outputToken == address(0) /*ETH*/) {\n                (bool success, ) = msg.sender.call{value: boughtAmt}(\"\"); \n                require(success, \"ETH_TRANSFER_FAILED\");                \n            } else {\n                IERC20(rideInfo.outputToken).safeTransfer(msg.sender, boughtAmt);\n            }\n        } else {\n            //swap to input token\n            ocv.withdrawFromVault(rideInfo.tokenIdInput, _rideId, _redeemAmount / rideInfo.quantumInput);\n            if (rideInfo.inputToken == address(0) /*ETH*/) {\n                (bool success, ) = msg.sender.call{value: _redeemAmount}(\"\"); \n                require(success, \"ETH_TRANSFER_FAILED\");\n            } else {\n                IERC20(rideInfo.inputToken).safeTransfer(msg.sender, _redeemAmount);\n            }\n        }\n\n        ridesShares[_rideId] -= _redeemAmount;\n        IShareToken(rideInfo.share).burn(address(this), _redeemAmount);\n\n        emit SharesRedeemed(_rideId, _redeemAmount);\n    }\n\n    function _checkValidTokenIdAndAddr(uint256 tokenId, address token) view internal {\n        bytes4 selector = _checkValidTokenId(tokenId);\n        if (selector == ETH_SELECTOR) {\n            require(token == address(0), \"ETH addr should be 0\");\n        } else if (selector == ERC20_SELECTOR) {\n            require(token.isContract(), \"invalid token addr\");\n        }\n    }\n\n    function _checkValidTokenId(uint256 tokenId) view internal returns (bytes4 selector) {\n        selector = extractTokenSelector(IOnchainVaults(onchainVaults).getAssetInfo(tokenId));\n        require(selector == ETH_SELECTOR || selector == ERC20_SELECTOR, \"unsupported token\"); \n    }\n\n    function extractTokenSelector(bytes memory assetInfo)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        assembly {\n            selector := and(\n                0xffffffff00000000000000000000000000000000000000000000000000000000,\n                mload(add(assetInfo, SELECTOR_OFFSET))\n            )\n        }\n    }\n\n    function _submitOrder(OrderAssetInfo memory sellInfo, OrderAssetInfo memory buyInfo, OrderAssetInfo memory feeInfo) private {\n        nonce += 1;\n        address orderRegistryAddr = IOnchainVaults(onchainVaults).orderRegistryAddress();\n        IOrderRegistry(orderRegistryAddr).registerLimitOrder(onchainVaults, sellInfo.tokenId, buyInfo.tokenId, feeInfo.tokenId, \n            sellInfo.quantizedAmt, buyInfo.quantizedAmt, feeInfo.quantizedAmt, sellInfo.vaultId, buyInfo.vaultId, feeInfo.vaultId, nonce, EXP_TIME);\n    }\n\n    function setOnchainVaults(address _newAddr) external onlyOwner {\n        emit OnchainVaultsChanged(onchainVaults, _newAddr);\n        onchainVaults = _newAddr;\n    }\n\n    // To receive ETH when invoking IOnchainVaults.withdrawFromVault\n    receive() external payable {}\n    fallback() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IOnchainVaults.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IOnchainVaults {\n    function depositERC20ToVault(\n        uint256 assetId,\n        uint256 vaultId,\n        uint256 quantizedAmount\n    ) external;\n\n    function depositEthToVault(\n        uint256 assetId, \n        uint256 vaultId) \n    external payable;\n\n    function withdrawFromVault(\n        uint256 assetId,\n        uint256 vaultId,\n        uint256 quantizedAmount\n    ) external;\n\n    function getQuantizedVaultBalance(\n        address ethKey,\n        uint256 assetId,\n        uint256 vaultId\n    ) external view returns (uint256);\n\n    function getVaultBalance(\n        address ethKey,\n        uint256 assetId,\n        uint256 vaultId\n    ) external view returns (uint256);\n\n    function getQuantum(uint256 presumedAssetType) external view returns (uint256);\n\n    function orderRegistryAddress() external view returns (address);\n\n    function isAssetRegistered(uint256 assetType) external view returns (bool);\n\n    function getAssetInfo(uint256 assetType) external view returns (bytes memory assetInfo);\n}"
    },
    "contracts/interfaces/IOrderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IOrderRegistry {\n\n    function registerLimitOrder(\n        address exchangeAddress,\n        uint256 tokenIdSell,\n        uint256 tokenIdBuy,\n        uint256 tokenIdFee,\n        uint256 amountSell,\n        uint256 amountBuy,\n        uint256 amountFee,\n        uint256 vaultIdSell,\n        uint256 vaultIdBuy,\n        uint256 vaultIdFee,\n        uint256 nonce,\n        uint256 expirationTimestamp\n    ) external;\n}"
    },
    "contracts/interfaces/IShareToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\ninterface IShareToken {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IStrategyPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\ninterface IStrategyPool {\n    // sell the amount of the input token, and the amount of output token will be sent to msg.sender\n    function sellErc(address inputToken, address outputToken, uint256 inputAmt) external returns (uint256 outputAmt);\n\n    function sellEth(address outputToken) external payable returns (uint256 outputAmt);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/strategies/dummy/StrategyDummy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../interfaces/IStrategyPool.sol\";\n\nimport \"./interfaces/IDummyToken.sol\";\n\n/**\n * @title Dummy pool\n */\ncontract StrategyDummy is IStrategyPool, Ownable {\n    using SafeERC20 for IERC20;\n\n    address public broker;\n    modifier onlyBroker() {\n        require(msg.sender == broker, \"caller is not broker\");\n        _;\n    }\n\n    event BrokerUpdated(address broker);\n    event OutputTokensUpdated(address wrapToken, bool enabled);\n\n    mapping(address => bool) public supportedOutputTokens;\n\n    constructor(\n        address _broker\n    ) {\n        broker = _broker;\n    }\n\n    function sellErc(address inputToken, address outputToken, uint256 inputAmt) external onlyBroker returns (uint256 outputAmt) {\n        bool toBuy = supportedOutputTokens[outputToken];\n        bool toSell = supportedOutputTokens[inputToken];\n\n        require(toBuy || toSell, \"not supported tokens!\");\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmt);\n        if (toBuy) {\n            IERC20(inputToken).safeIncreaseAllowance(outputToken, inputAmt);\n            IDummyToken(outputToken).buy(inputAmt);\n            outputAmt = IERC20(outputToken).balanceOf(address(this));\n            IERC20(outputToken).safeTransfer(msg.sender, outputAmt);\n        } else {\n            IDummyToken(inputToken).sell(inputAmt);\n            outputAmt = IERC20(outputToken).balanceOf(address(this));\n            IERC20(outputToken).safeTransfer(msg.sender, outputAmt);\n        }\n    }\n\n    function sellEth(address outputToken) external onlyBroker payable returns (uint256 outputAmt) {\n        // do nothing\n    }\n\n    function updateBroker(address _broker) external onlyOwner {\n        broker = _broker;\n        emit BrokerUpdated(broker);\n    }\n\n    function setSupportedOutputToken(address _outputToken, bool _enabled) external onlyOwner {\n        supportedOutputTokens[_outputToken] = _enabled;\n        emit OutputTokensUpdated(_outputToken, _enabled);\n    }\n}\n"
    },
    "contracts/strategies/dummy/interfaces/IDummyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IDummyToken {\n\n    function name() external view  returns (string memory);\n\n    function symbol() external view returns (string memory);\n    \n    function decimals() external view returns (uint8);\n\n    function mint(address _to, uint _amount) external; \n\n    function buy(uint _amount) external; \n\n    function sell(uint _amount) external; \n}"
    },
    "contracts/strategies/dummy/OutputTokenDummy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IDummyToken.sol\";\n\n/**\n * @title Dummy output token\n */\ncontract OutputTokenDummy is ERC20, Ownable {\n    using SafeERC20 for IERC20;\n\n    uint8 private immutable _decimals;\n\n    address private supplyToken;\n\n    uint256 private lastHarvestBlockNum;\n\n    uint256 public harvestPerBlock;  \n\n    address public controller; // st comp\n    modifier onlyController() {\n        require(msg.sender == controller, \"caller is not controller\");\n        _;\n    }\n\n    event ControllerUpdated(address controller);\n\n    constructor(\n        address _supplyToken,\n        address _controller,\n        uint256 _harvestPerBlock\n    ) ERC20(string(abi.encodePacked(\"Celer \", IDummyToken(_supplyToken).name())), string(abi.encodePacked(\"celr\", IDummyToken(_supplyToken).symbol()))) {\n        _decimals = IDummyToken(_supplyToken).decimals();\n        supplyToken = _supplyToken;\n        controller = _controller;\n        lastHarvestBlockNum = block.number;\n        harvestPerBlock = _harvestPerBlock;\n    }\n    \n    function buy(uint _amount) external onlyController {\n        require(_amount > 0, \"invalid amount\");\n        IERC20(supplyToken).safeTransferFrom(msg.sender, address(this), _amount);\n        _mint(msg.sender, _amount);\n    }\n    \n    function sell(uint _amount) external {\n        require(_amount > 0, \"invalid amount\");\n        require(totalSupply() >= _amount, \"not enough supply\");\n\n        IDummyToken(supplyToken).mint(address(this), harvestPerBlock * (block.number - lastHarvestBlockNum));\n        lastHarvestBlockNum = block.number;\n\n        IERC20(supplyToken).safeTransfer(msg.sender, _amount * IERC20(supplyToken).balanceOf(address(this)) / totalSupply());\n        _burn(msg.sender, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function underlyingToken() public view returns (address) {\n        return supplyToken;\n    }\n\n    function updateController(address _controller) external onlyOwner {\n        controller = _controller;\n        emit ControllerUpdated(_controller);\n    }\n\n    function updateHarvestPerBlock(uint256 newVal) external onlyOwner {\n        harvestPerBlock = newVal;\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/strategies/compound/WrappedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/ICErc20.sol\";\nimport \"./interfaces/IComptroller.sol\";\n\n/**\n * @title Wrapped Token of compound c tokens\n */\ncontract WrappedToken is ERC20, Ownable {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    uint8 private immutable _decimals;\n\n    address private immutable ctoken;\n    address public immutable comp; // compound comp token\n    address public immutable comptroller; //compound controller\n\n    // min comp reward to distribute, taking into the account of the comp swap gas cost in the strategy. default as 0\n    uint256 public minCompRewardToDistribute; \n\n    address public controller; // st comp\n    modifier onlyController() {\n        require(msg.sender == controller, \"caller is not controller\");\n        _;\n    }\n\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin && !address(msg.sender).isContract(), \"Not EOA\");\n        _;\n    }\n\n    event ControllerUpdated(address controller);\n    event MinCompRewardToDistributeUpdated(uint256 newValue);\n\n    constructor(\n        address _ctoken,\n        address _controller,\n        address _comptroller,\n        address _comp\n    ) ERC20(string(abi.encodePacked(\"Wrapped \", ICErc20(_ctoken).name())), string(abi.encodePacked(\"W\", ICErc20(_ctoken).symbol()))) {\n        _decimals = ICErc20(_ctoken).decimals();\n        ctoken = _ctoken;\n        controller = _controller;\n        comptroller = _comptroller;\n        comp = _comp;\n    }\n    \n    function mint(uint _amount) external onlyController {\n        require(_amount > 0, \"invalid amount\");\n        IERC20(ctoken).safeTransferFrom(msg.sender, address(this), _amount);\n        _mint(msg.sender, _amount);\n    }\n    \n    function burn(uint _amount) external {\n        require(_amount > 0, \"invalid amount\");\n        require(totalSupply() >= _amount, \"not enough supply\");\n        \n        // distribute harvested comp proportional\n        uint256 compBalance = IERC20(comp).balanceOf(address(this));\n        if (compBalance > 0) {\n            uint256 distAmt = compBalance * _amount / totalSupply();\n            if (distAmt >= minCompRewardToDistribute) {\n                IERC20(comp).safeTransfer(msg.sender, distAmt);\n            }\n        }\n\n        _burn(msg.sender, _amount);\n        IERC20(ctoken).safeTransfer(msg.sender, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function underlyingCToken() public view returns (address) {\n        return ctoken;\n    }\n\n    function harvest() external onlyEOA {\n        // Claim COMP token.\n        address[] memory holders = new address[](1);\n        holders[0] = address(this);\n        ICErc20[] memory cTokens = new ICErc20[](1);\n        cTokens[0] = ICErc20(ctoken);\n        IComptroller(comptroller).claimComp(holders, cTokens, false, true);\n    }\n\n    function updateController(address _controller) external onlyOwner {\n        controller = _controller;\n        emit ControllerUpdated(_controller);\n    }\n\n    function updateMinCompRewardToDistribute(uint256 _minComp) external onlyOwner {\n        minCompRewardToDistribute = _minComp;\n        emit MinCompRewardToDistributeUpdated(_minComp);\n    }\n}"
    },
    "contracts/strategies/compound/interfaces/ICErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ICErc20 {\n    /**\n     * @notice Accrue interest for `owner` and return the underlying balance.\n     *\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @notice Supply ERC20 token to the market, receive cTokens in exchange.\n     *\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return 0 = success, otherwise a failure\n     */\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    /**\n     * @notice Redeem cTokens in exchange for a specified amount of underlying asset.\n     *\n     * @param redeemAmount The amount of underlying to redeem\n     * @return 0 = success, otherwise a failure\n     */\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view returns (uint256);\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() external returns (uint256);\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() external view returns (uint256);\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transfer(address dst, uint256 amount) external returns (bool);\n\n    function name() external view  returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/strategies/compound/interfaces/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./ICErc20.sol\";\n\ninterface IComptroller {\n    /**\n     * @notice Claim all the comp accrued by the holder in all markets.\n     *\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) external;\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        ICErc20[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) external;\n}\n"
    },
    "contracts/strategies/compound/StrategyCompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/ICErc20.sol\";\nimport \"./interfaces/ICEth.sol\";\nimport \"./interfaces/IWrappedToken.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\nimport \"../../interfaces/IStrategyPool.sol\";\n\n/**\n * @title Compound pool\n */\ncontract StrategyCompound is IStrategyPool, Ownable {\n    using SafeERC20 for IERC20;\n\n    address public broker;\n    modifier onlyBroker() {\n        require(msg.sender == broker, \"caller is not broker\");\n        _;\n    }\n\n    address public immutable comp; // compound comp token\n    address public immutable uniswap; // The address of the Uniswap V2 router\n    address public immutable weth; // The address of WETH token\n\n    event BrokerUpdated(address broker);\n    event WrapTokenUpdated(address wrapToken, bool enabled);\n\n    mapping(address => bool) public supportedWrapTokens; //wrappedtoken => true\n\n    constructor(\n        address _broker,\n        address _comp,\n        address _uniswap,\n        address _weth\n    ) {\n        broker = _broker;\n        comp = _comp;\n        uniswap = _uniswap;\n        weth = _weth;\n    }\n\n    function sellErc(address inputToken, address outputToken, uint256 inputAmt) external onlyBroker returns (uint256 outputAmt) {\n        bool toBuy = supportedWrapTokens[outputToken];\n        bool toSell = supportedWrapTokens[inputToken];\n\n        require(toBuy || toSell, \"not supported tokens!\");\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmt);\n        if (toBuy) { // to buy a wrapped token\n            address cToken = IWrappedToken(outputToken).underlyingCToken();\n            IERC20(inputToken).safeIncreaseAllowance(cToken, inputAmt);\n            uint256 mintResult = ICErc20(cToken).mint(inputAmt);\n            require(mintResult == 0, \"Couldn't mint cToken\");\n            outputAmt = ICErc20(cToken).balanceOf(address(this));\n            \n            // transfer cToken into wrapped token contract and mint equal wrapped tokens \n            IERC20(cToken).safeIncreaseAllowance(outputToken, outputAmt);\n            IWrappedToken(outputToken).mint(outputAmt);\n\n            IERC20(outputToken).safeTransfer(msg.sender, outputAmt);\n        } else { // to sell a wrapped token\n            address cToken = IWrappedToken(inputToken).underlyingCToken();\n            \n            // transfer cToken/comp from wrapped token contract and burn the wrapped tokens \n            IWrappedToken(inputToken).burn(inputAmt);\n            uint256 redeemResult = ICErc20(cToken).redeem(inputAmt);\n            require(redeemResult == 0, \"Couldn't redeem cToken\");\n\n            if (outputToken != address(0) /*ERC20*/) {\n                sellCompForErc(outputToken);\n                outputAmt = IERC20(outputToken).balanceOf(address(this));\n                IERC20(outputToken).safeTransfer(msg.sender, outputAmt);\n            } else /*ETH*/ {\n                sellCompForEth();\n                outputAmt = address(this).balance;\n                (bool success, ) = msg.sender.call{value: outputAmt}(\"\"); // NOLINT: low-level-calls.\n                require(success, \"eth transfer failed\");\n            }\n        }\n    }\n\n    function sellCompForErc(address target) private {\n        uint256 compBalance = IERC20(comp).balanceOf(address(this));\n        if (compBalance > 0) {\n            // Sell COMP token for obtain more supplying token(e.g. DAI, USDT)\n            IERC20(comp).safeIncreaseAllowance(uniswap, compBalance);\n\n            address[] memory paths = new address[](3);\n            paths[0] = comp;\n            paths[1] = weth;\n            paths[2] = target;\n\n            IUniswapV2Router02(uniswap).swapExactTokensForTokens(\n                compBalance,\n                uint256(0),\n                paths,\n                address(this),\n                block.timestamp + 1800\n            );\n        }\n    }\n\n    function sellCompForEth() private {\n        uint256 compBalance = IERC20(comp).balanceOf(address(this));\n        if (compBalance > 0) {\n            // Sell COMP token for obtain more ETH\n            IERC20(comp).safeIncreaseAllowance(uniswap, compBalance);\n\n            address[] memory paths = new address[](2);\n            paths[0] = comp;\n            paths[1] = weth;\n\n            IUniswapV2Router02(uniswap).swapExactTokensForETH(\n                compBalance,\n                uint256(0),\n                paths,\n                address(this),\n                block.timestamp + 1800\n            );\n        }\n    }\n\n    function sellEth(address outputToken) external onlyBroker payable returns (uint256 outputAmt) {\n        require(supportedWrapTokens[outputToken], \"not supported tokens!\");\n        \n        address cToken = IWrappedToken(outputToken).underlyingCToken();\n        ICEth(cToken).mint{value: msg.value}();\n        outputAmt = ICEth(cToken).balanceOf(address(this));\n\n        // transfer cToken into wrapped token contract and mint equal wrapped tokens \n        IERC20(cToken).safeIncreaseAllowance(outputToken, outputAmt);\n        IWrappedToken(outputToken).mint(outputAmt);\n\n        IERC20(outputToken).safeTransfer(msg.sender, outputAmt);\n    }\n\n    function updateBroker(address _broker) external onlyOwner {\n        broker = _broker;\n        emit BrokerUpdated(broker);\n    }\n\n    function setSupportedWrapToken(address _wrapToken, bool _enabled) external onlyOwner {\n        supportedWrapTokens[_wrapToken] = _enabled;\n        emit WrapTokenUpdated(_wrapToken, _enabled);\n    }\n\n    receive() external payable {}\n    fallback() external payable {}\n}\n"
    },
    "contracts/strategies/compound/interfaces/ICEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ICEth {\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @notice Accrue interest for `owner` and return the underlying balance.\n     *\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    /**\n     * @notice Supply ETH to the market, receive cTokens in exchange.\n     */\n    function mint() external payable;\n\n    /**\n     * @notice Redeem cTokens in exchange for a specified amount of underlying asset.\n     *\n     * @param redeemAmount The amount of underlying to redeem\n     * @return 0 = success, otherwise a failure\n     */\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() external returns (uint256);\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/compound/interfaces/IWrappedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IWrappedToken {\n    \n    function mint(uint _amount) external; \n    \n    function burn(uint _amount) external;\n\n    function underlyingCToken() external view returns (address);\n}"
    },
    "contracts/strategies/compound/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForTokens(\n        uint256,\n        uint256,\n        address[] calldata,\n        address,\n        uint256\n    ) external;\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata paths,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/strategies/dummy/InputTokenDummy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\n/**\n * @title A mintable {ERC20} token.\n */\ncontract InputTokenDummy is ERC20Burnable, Ownable {\n    uint8 private _decimals;\n\n    /**\n     * @dev Constructor that gives msg.sender an initial supply of tokens.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 initialSupply_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n        _mint(msg.sender, initialSupply_);\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     */\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/ShareToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IShareToken.sol\";\n\n/**\n * @title A {ERC20} token used for ride share.\n */\ncontract ShareToken is IShareToken, ERC20, Ownable {\n    uint8 private immutable _decimals;\n\n    address public broker;\n    modifier onlyBroker() {\n        require(msg.sender == broker, \"caller is not broker\");\n        _;\n    }\n\n    event BrokerUpdated(address broker);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address _broker\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n        broker = _broker;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyBroker {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external onlyBroker {\n        _burn(_from, _amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function updateBroker(address _broker) external onlyOwner {\n        broker = _broker;\n        emit BrokerUpdated(broker);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}}