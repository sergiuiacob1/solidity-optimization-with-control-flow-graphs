{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/registry/PortalRegistry.sol": {
      "content": "// Copyright (C) 2022 Portals.fi\n\n/// @author Portals.fi\n/// @notice Registry of Portals and Portal Factories\n\n/// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.11;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PortalRegistryV1 is Ownable {\n    // The multisig collector address\n    address public collector;\n\n    // The addresses of the registrars\n    mapping(address => bool) public registrars;\n\n    // Tracks existing portals for use as targets for calldata execution\n    mapping(address => bool) public isPortal;\n\n    // Tracks portal partners for revenue sharing\n    mapping(address => bool) public partners;\n\n    // Returns a portal address given a protocolId and portal type\n    mapping(bytes32 => mapping(PortalType => Portal)) public getPortalById;\n\n    // Tracks supported platforms\n    bytes32[] internal supportedPlatforms;\n\n    // Tracks the total number of portals\n    uint256 public numPortals;\n\n    // The type of Portal where 1 = Portal In and 2 = Portal Out\n    enum PortalType {\n        IN,\n        OUT\n    }\n\n    struct Portal {\n        address portal;\n        PortalType portalType;\n        bytes32 protocolId;\n        uint96 version;\n        bool active;\n    }\n\n    /// @notice Emitted when a new portal is created\n    /// @param portal The newly created portal\n    /// @param numPortals The total number of portals in existence\n    event AddPortal(Portal portal, uint256 numPortals);\n\n    /// @notice Emitted when a portal is updated\n    /// @param portal The updated portal\n    /// @param numPortals The total number of portals in existence\n    event UpdatePortal(Portal portal, uint256 numPortals);\n\n    /// @notice Emitted when a portal is removed\n    /// @param portal The removed portal\n    /// @param numPortals The total number of portals in existence\n    event RemovePortal(Portal portal, uint256 numPortals);\n\n    // Only registrars may add new portals to the registry\n    modifier onlyRegistrars() {\n        require(registrars[tx.origin], \"Invalid origin\");\n        _;\n    }\n\n    constructor(address _collector, address _owner) {\n        collector = _collector;\n        registrars[msg.sender] = true;\n        registrars[_owner] = true;\n        transferOwnership(_owner);\n    }\n\n    /// @notice Adds new portals deployed by active registrars\n    /// @param portal The address of the new portal\n    /// @param portalType The type of portal - in or out\n    /// @param protocolId The bytes32 representation of the name of the protocol\n    function addPortal(\n        address portal,\n        PortalType portalType,\n        bytes32 protocolId\n    ) external onlyRegistrars {\n        Portal storage existingPortal = getPortalById[protocolId][portalType];\n        if (existingPortal.version != 0) {\n            isPortal[existingPortal.portal] = false;\n            existingPortal.portal = portal;\n            existingPortal.version++;\n            existingPortal.active = true;\n            isPortal[portal] = true;\n            emit UpdatePortal(existingPortal, numPortals);\n        } else {\n            Portal memory newPortal = Portal(\n                portal,\n                portalType,\n                protocolId,\n                1,\n                true\n            );\n            getPortalById[protocolId][portalType] = newPortal;\n            isPortal[portal] = true;\n            supportedPlatforms.push(protocolId);\n            emit AddPortal(newPortal, numPortals++);\n        }\n    }\n\n    /// @notice Removes an inactivates existing portals\n    /// @param portalType The type of portal - in or out\n    /// @param protocolId The bytes32 representation of the name of the protocol\n    function removePortal(bytes32 protocolId, PortalType portalType)\n        external\n        onlyOwner\n    {\n        Portal storage deletedPortal = getPortalById[protocolId][portalType];\n        deletedPortal.active = false;\n        isPortal[deletedPortal.portal] = false;\n\n        emit RemovePortal(deletedPortal, numPortals);\n    }\n\n    /// @notice Returns an array of all of the portal objects by type\n    /// @param portalType The type of portal - in or out\n    function getAllPortals(PortalType portalType)\n        external\n        view\n        returns (Portal[] memory)\n    {\n        Portal[] memory portals = new Portal[](numPortals);\n        for (uint256 i = 0; i < supportedPlatforms.length; i++) {\n            Portal memory portal = getPortalById[supportedPlatforms[i]][\n                portalType\n            ];\n\n            portals[i] = portal;\n        }\n        return portals;\n    }\n\n    /// @notice Returns an array of all supported platforms\n    function getSupportedPlatforms() external view returns (bytes32[] memory) {\n        return supportedPlatforms;\n    }\n\n    /// @notice Updates a registrar's active status\n    /// @param registrar The address of the registrar\n    /// @param active The status of the registrar. Set true if\n    /// the registrar is active, false otherwise\n    function updateRegistrars(address registrar, bool active)\n        external\n        onlyOwner\n    {\n        registrars[registrar] = active;\n    }\n\n    /// @notice Updates a partner's active status\n    /// @param partner The address of the registrar\n    /// @param active The status of the partner. Set true if\n    /// the partner is active, false otherwise\n    function updatePartners(address partner, bool active) external onlyOwner {\n        partners[partner] = active;\n    }\n\n    /// @notice Updates the collector's address\n    /// @param _collector The address of the new collector\n    function updateCollector(address _collector) external onlyOwner {\n        collector = _collector;\n    }\n\n    /// @notice Helper function to convert a protocolId string into bytes32\n    function stringToBytes32(string memory _string)\n        external\n        pure\n        returns (bytes32 _bytes32String)\n    {\n        assembly {\n            _bytes32String := mload(add(_string, 32))\n        }\n    }\n\n    /// @notice Helper function to convert protocolId bytes32 into a string\n    function bytes32ToString(bytes32 _bytes)\n        external\n        pure\n        returns (string memory)\n    {\n        return string(abi.encode(_bytes));\n    }\n}\n"
    }
  }
}}