{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/staking-rewards/StakingRewardsHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ITokenInterface.sol\";\nimport \"./interfaces/StakingRewardsInterface.sol\";\nimport \"./interfaces/StakingRewardsFactoryInterface.sol\";\n\ncontract StakingRewardsHelper is Ownable {\n    using SafeERC20 for IERC20;\n\n    StakingRewardsFactoryInterface public immutable factory;\n\n    /**\n     * @notice Emitted when tokens are seized\n     */\n    event TokenSeized(address token, uint256 amount);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _factory) {\n        factory = StakingRewardsFactoryInterface(_factory);\n    }\n\n    /* ========== VIEWS ========== */\n\n    struct RewardTokenInfo {\n        address rewardTokenAddress;\n        string rewardTokenSymbol;\n        uint8 rewardTokenDecimals;\n    }\n\n    struct RewardClaimable {\n        RewardTokenInfo rewardToken;\n        uint256 amount;\n    }\n\n    struct UserStaked {\n        address stakingTokenAddress;\n        uint256 balance;\n    }\n\n    struct StakingInfo {\n        address stakingTokenAddress;\n        uint256 totalSupply;\n        uint256 supplyRatePerBlock;\n        uint256 exchangeRate;\n        RewardRate[] rewardRates;\n    }\n\n    struct RewardRate {\n        address rewardTokenAddress;\n        uint256 rate;\n    }\n\n    /**\n     * @notice Getthe reward token info\n     * @param rewardToken The reward token\n     * @return The reward token info\n     */\n    function getRewardTokenInfo(address rewardToken)\n        public\n        view\n        returns (RewardTokenInfo memory)\n    {\n        return\n            RewardTokenInfo({\n                rewardTokenAddress: rewardToken,\n                rewardTokenSymbol: IERC20Metadata(rewardToken).symbol(),\n                rewardTokenDecimals: IERC20Metadata(rewardToken).decimals()\n            });\n    }\n\n    /**\n     * @notice Get user claimable rewards\n     * @param account The account\n     * @param rewardTokens The list of reward tokens\n     * @return The list of user claimable rewards\n     */\n    function getUserClaimableRewards(\n        address account,\n        address[] calldata rewardTokens\n    ) public view returns (RewardClaimable[] memory) {\n        RewardClaimable[] memory rewardsClaimable = new RewardClaimable[](\n            rewardTokens.length\n        );\n\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            uint256 amount;\n            for (uint256 j = 0; j < allStakingRewards.length; j++) {\n                address stakingRewards = allStakingRewards[j];\n                amount += StakingRewardsInterface(stakingRewards).earned(\n                    rewardTokens[i],\n                    account\n                );\n            }\n\n            rewardsClaimable[i] = RewardClaimable({\n                rewardToken: getRewardTokenInfo(rewardTokens[i]),\n                amount: amount\n            });\n        }\n        return rewardsClaimable;\n    }\n\n    /**\n     * @notice Get user staked info\n     * @param account The account\n     * @return The list of user staked info\n     */\n    function getUserStaked(address account)\n        public\n        view\n        returns (UserStaked[] memory)\n    {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        UserStaked[] memory stakedInfo = new UserStaked[](\n            allStakingRewards.length\n        );\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\n            address stakingRewards = allStakingRewards[i];\n            address stakingToken = StakingRewardsInterface(stakingRewards)\n                .getStakingToken();\n            uint256 balance = StakingRewardsInterface(stakingRewards).balanceOf(\n                account\n            );\n            stakedInfo[i] = UserStaked({\n                stakingTokenAddress: stakingToken,\n                balance: balance\n            });\n        }\n        return stakedInfo;\n    }\n\n    /**\n     * @notice Get all the staking info\n     * @return The list of staking info\n     */\n    function getStakingInfo() public view returns (StakingInfo[] memory) {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        StakingInfo[] memory stakingRewardRates = new StakingInfo[](\n            allStakingRewards.length\n        );\n        for (uint256 i = 0; i < allStakingRewards.length; i++) {\n            address stakingRewards = allStakingRewards[i];\n            address[] memory allRewardTokens = StakingRewardsInterface(\n                stakingRewards\n            ).getAllRewardsTokens();\n\n            RewardRate[] memory rewardRates = new RewardRate[](\n                allRewardTokens.length\n            );\n            for (uint256 j = 0; j < allRewardTokens.length; j++) {\n                address rewardToken = allRewardTokens[j];\n                uint256 rate = StakingRewardsInterface(stakingRewards)\n                    .getRewardRate(rewardToken);\n                rewardRates[j] = RewardRate({\n                    rewardTokenAddress: rewardToken,\n                    rate: rate\n                });\n            }\n\n            address stakingToken = StakingRewardsInterface(stakingRewards)\n                .getStakingToken();\n            uint256 totalSupply = StakingRewardsInterface(stakingRewards)\n                .totalSupply();\n            uint256 supplyRatePerBlock = ITokenInterface(stakingToken)\n                .supplyRatePerBlock();\n            uint256 exchangeRate = ITokenInterface(stakingToken)\n                .exchangeRateStored();\n            stakingRewardRates[i] = StakingInfo({\n                stakingTokenAddress: stakingToken,\n                totalSupply: totalSupply,\n                supplyRatePerBlock: supplyRatePerBlock,\n                exchangeRate: exchangeRate,\n                rewardRates: rewardRates\n            });\n        }\n        return stakingRewardRates;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Mint and stake tokens into staking rewards\n     * @param underlying The underlying token\n     * @param amount The amount\n     */\n    function stake(address underlying, uint256 amount) public {\n        require(amount > 0, \"invalid amount\");\n        address stakingToken = factory.getStakingToken(underlying);\n        require(stakingToken != address(0), \"invalid staking token\");\n        address stakingRewards = factory.getStakingRewards(stakingToken);\n        require(stakingRewards != address(0), \"staking rewards not exist\");\n\n        // Get funds from user.\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Mint\n        IERC20(underlying).approve(stakingToken, amount);\n        require(ITokenInterface(stakingToken).mint(amount) == 0, \"mint failed\");\n\n        // Stake to staking rewards.\n        uint256 balance = IERC20(stakingToken).balanceOf(address(this));\n        IERC20(stakingToken).approve(stakingRewards, balance);\n        StakingRewardsInterface(stakingRewards).stakeFor(msg.sender, balance);\n\n        assert(IERC20(stakingToken).balanceOf(address(this)) == 0);\n    }\n\n    /**\n     * @notice Unstake tokens from staking rewards and redeem\n     * @param stakingRewards The staking rewards\n     * @param amount The amount\n     */\n    function unstake(address stakingRewards, uint256 amount) public {\n        require(amount > 0, \"invalid amount\");\n        address stakingToken = StakingRewardsInterface(stakingRewards)\n            .getStakingToken();\n        require(stakingToken != address(0), \"invalid staking token\");\n        address underlying = ITokenInterface(stakingToken).underlying();\n        require(underlying != address(0), \"invalid underlying\");\n\n        // Withdraw from staking rewards.\n        StakingRewardsInterface(stakingRewards).withdrawFor(msg.sender, amount);\n\n        // Redeem\n        require(\n            ITokenInterface(stakingToken).redeem(amount) == 0,\n            \"redeem failed\"\n        );\n\n        // Send funds to user.\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\n        IERC20(underlying).transfer(msg.sender, balance);\n\n        assert(IERC20(underlying).balanceOf(address(this)) == 0);\n    }\n\n    /**\n     * @notice Exit all staking rewards\n     */\n    function exitAll() public {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        exit(allStakingRewards);\n    }\n\n    /**\n     * @notice Exit staking rewards\n     * @param stakingRewards The list of staking rewards\n     */\n    function exit(address[] memory stakingRewards) public {\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\n            uint256 balance = StakingRewardsInterface(stakingRewards[i])\n                .balanceOf(msg.sender);\n            unstake(stakingRewards[i], balance);\n            StakingRewardsInterface(stakingRewards[i]).getRewardFor(msg.sender);\n        }\n    }\n\n    /**\n     * @notice Claim all rewards\n     */\n    function claimAllRewards() public {\n        address[] memory allStakingRewards = factory.getAllStakingRewards();\n        claimRewards(allStakingRewards);\n    }\n\n    /**\n     * @notice Claim rewards by given staking rewards\n     * @param stakingRewards The list of staking rewards\n     */\n    function claimRewards(address[] memory stakingRewards) public {\n        for (uint256 i = 0; i < stakingRewards.length; i++) {\n            StakingRewardsInterface(stakingRewards[i]).getRewardFor(msg.sender);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /**\n     * @notice Seize tokens in this contract.\n     * @param token The token\n     * @param amount The amount\n     */\n    function seize(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n        emit TokenSeized(token, amount);\n    }\n}\n"
    },
    "contracts/staking-rewards/interfaces/ITokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ITokenInterface {\n    function underlying() external view returns (address);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n}\n"
    },
    "contracts/staking-rewards/interfaces/StakingRewardsFactoryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface StakingRewardsFactoryInterface {\n    function getStakingRewardsCount() external view returns (uint256);\n\n    function getAllStakingRewards() external view returns (address[] memory);\n\n    function getStakingRewards(address stakingToken)\n        external\n        view\n        returns (address);\n\n    function getStakingToken(address underlying)\n        external\n        view\n        returns (address);\n}\n"
    },
    "contracts/staking-rewards/interfaces/StakingRewardsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface StakingRewardsInterface {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function lastTimeRewardApplicable(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function rewardPerToken(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function earned(address _rewardsToken, address account)\n        external\n        view\n        returns (uint256);\n\n    function getRewardRate(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function getRewardForDuration(address _rewardsToken)\n        external\n        view\n        returns (uint256);\n\n    function getRewardsTokenCount() external view returns (uint256);\n\n    function getAllRewardsTokens() external view returns (address[] memory);\n\n    function getStakingToken() external view returns (address);\n\n    function stake(uint256 amount) external;\n\n    function stakeFor(address account, uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawFor(address account, uint256 amount) external;\n\n    function getReward() external;\n\n    function getRewardFor(address account) external;\n\n    function exit() external;\n}\n"
    }
  }
}}