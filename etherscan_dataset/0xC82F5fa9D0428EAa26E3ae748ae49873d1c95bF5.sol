{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"ERC165S.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165S.sol\";\n\n/**\n * @dev Implementation of the {IERC165S} interface.\n *\n * Contracts that want to implement IERC165S should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165S is IERC165S {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165S).interfaceId;\n    }\n}\n"},"ERC721S.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721S.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./Address.sol\";\nimport \"./Context.sol\";\nimport \"./Strings.sol\";\nimport \"./ERC165S.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721S] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721S is Context, ERC165S, IERC721S, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    // CUSTOM: Visible for child contract so it\u0027s possible to emulate methods of ERC721S\u0027s enumerable extension\n    mapping(uint256 =\u003e address) internal _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165S, IERC165S)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721S).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721S-balanceOf}.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721S: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721S-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721S: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length \u003e 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721S-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721S.ownerOf(tokenId);\n        require(to != owner, \"ERC721S: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721S: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721S-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721S-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721S-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721S: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721S-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721S-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721S: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721S protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721S: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721S: operator query for nonexistent token\"\n        );\n        address owner = ERC721S.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721S-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721S: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721S: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721S.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721S.ownerOf(tokenId) == from,\n            \"ERC721S: transfer from incorrect owner\"\n        );\n        require(to != address(0), \"ERC721S: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721S.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721S: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721S: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"},"ERC721SBurnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721S.sol\";\nimport \"./Ownable.sol\";\n\n/**\n * @title ERC721S Burnable Token\n * @dev ERC721S Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721SBurnable is Ownable, ERC721S {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(\n            _msgSender() == owner() ||\n                _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721SBurnable: caller is not owner nor approved\"\n        );\n        _burn(tokenId);\n    }\n}\n"},"GoldStaking.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721S.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownable.sol\";\nimport \"./Address.sol\";\nimport \"./IERC721Receiver.sol\";\n\ninterface IRandomNumGenerator {\n    function getRandomNumber(\n        uint256 _seed,\n        uint256 _limit,\n        uint256 _random\n    ) external view returns (uint16);\n}\n\ninterface IStakingDevice {\n    function getMultifier(uint16 tokenId) external view returns (uint8);\n}\n\ninterface IAFF {\n    function mint(address to, uint256 amount) external;\n}\n\ncontract GoldStaking is Ownable, IERC721Receiver {\n    using Address for address;\n\n    struct NftInfo {\n        uint256 lastClaimTime;\n        uint256 penddingAmount;\n        uint256 value;\n    }\n\n    struct TokenReward {\n        uint16 id;\n        uint256 reward;\n        uint8 nftType;\n        uint256 tax;\n    }\n\n    struct UserRewards {\n        uint256 totalReward;\n        TokenReward[] tokenRewards;\n    }\n\n    address private admin;\n\n    uint256 public stakeStopTime;\n\n    address public angryfrogAddress;\n    address public deviceAddress;\n    address public affAddress;\n    address public randomGen;\n\n    uint256 public stakedFrog;\n    uint256 public stakedDevice;\n    uint256 public totalClaimedToken;\n    uint256 public totalStealedToken;\n\n    uint256 public dailyRewardAmount = 3 * 10**18;\n    uint8 private taxFeeOfCitizen = 30;\n    uint8 private taxFeeOfGangster = 10;\n    uint16[] private multifierValue = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n\n    mapping(uint16 =\u003e NftInfo) public nftInfos;\n    mapping(uint16 =\u003e uint8) public nftTypes; // 0: Citizen, 1: Gangster, 2: Business\n    mapping(address =\u003e uint16[]) public stakers;\n    mapping(address =\u003e uint16[]) public devices;\n\n    address[] public businessHolders;\n    address[] public gangsterHolders;\n    uint256 public businessReward;\n    uint256 public gangsterReward;\n\n    bool public lastClaimStealed;\n\n    event StakeDeivce(address indexed user, uint16[] tokenIds);\n    event Stake(address indexed user, uint16[] tokenIds);\n    event Claim(\n        address indexed user,\n        uint16[] tokenIds,\n        uint256 amount,\n        bool unstake\n    );\n    event WithdrawDevice(address indexed user, uint16[] tokenId);\n    event Steal(address from, address to, uint256 amount, bool unstake);\n\n    string public constant CONTRACT_NAME = \"Gold Contract\";\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n        );\n\n    bytes32 public constant STAKE_TYPEHASH =\n        keccak256(\"Stake(address user,uint16[] tokenIds,uint8[] types)\");\n\n    constructor(address _admin) {\n        admin = _admin;\n    }\n\n    function setContractAddress(\n        address _randomGen,\n        address _angryfrogAddress,\n        address _deviceAddress,\n        address _affAddress\n    ) public onlyOwner {\n        require(\n            _randomGen != address(0) \u0026\u0026\n                _angryfrogAddress != address(0) \u0026\u0026\n                _deviceAddress != address(0) \u0026\u0026\n                _affAddress != address(0),\n            \"Zero address.\"\n        );\n        randomGen = _randomGen;\n        angryfrogAddress = _angryfrogAddress;\n        deviceAddress = _deviceAddress;\n        affAddress = _affAddress;\n    }\n\n    function setDailyTokenReward(\n        uint256 _dailyRewardAmount,\n        uint8 _taxFeeOfGangster,\n        uint8 _taxFeeOfCitizen\n    ) public onlyOwner {\n        dailyRewardAmount = _dailyRewardAmount;\n        taxFeeOfGangster = _taxFeeOfGangster;\n        taxFeeOfCitizen = _taxFeeOfCitizen;\n    }\n\n    function getStakedFrogCounts()\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            stakedFrog,\n            businessHolders.length,\n            gangsterHolders.length,\n            stakedFrog - businessHolders.length - gangsterHolders.length\n        );\n    }\n\n    function setStakeStop(bool _stop) public onlyOwner {\n        if (_stop) {\n            stakeStopTime = block.timestamp;\n        } else {\n            stakeStopTime = 0;\n        }\n    }\n\n    function setMultifiers(uint16[] memory _mutifiers) public onlyOwner {\n        for (uint8 i; i \u003c 10; i++) {\n            multifierValue[i] = _mutifiers[i];\n        }\n    }\n\n    function getMultifierByDeviceId(uint16 deviceId)\n        public\n        view\n        returns (uint16)\n    {\n        uint8 number = IStakingDevice(deviceAddress).getMultifier(deviceId);\n        return multifierValue[number];\n    }\n\n    function getDailyRewardByTokenId(uint16 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        if (nftTypes[tokenId] == 2) {\n            return (dailyRewardAmount * 3) / 1440;\n        } else if (nftTypes[tokenId] == 1) {\n            return (dailyRewardAmount * 2) / 1440;\n        } else {\n            return dailyRewardAmount / 1440;\n        }\n    }\n\n    function getRewardByTokenId(uint16 tokenId, address user)\n        public\n        view\n        returns (uint256)\n    {\n        NftInfo memory nftInfo = nftInfos[tokenId];\n\n        if (nftInfo.lastClaimTime == 0) {\n            return 0;\n        } else {\n            uint16[] memory deviceIds = devices[user];\n            uint16 _totalMultifier = 100;\n            for (uint8 i; i \u003c deviceIds.length; i++) {\n                _totalMultifier =\n                    _totalMultifier +\n                    getMultifierByDeviceId(deviceIds[i]);\n            }\n\n            uint256 currentTime = stakeStopTime == 0\n                ? block.timestamp\n                : stakeStopTime;\n\n            return\n                nftInfo.penddingAmount +\n                ((getDailyRewardByTokenId(tokenId) * _totalMultifier) / 100) *\n                ((currentTime - nftInfo.lastClaimTime) / 1 minutes);\n        }\n    }\n\n    function getDevices(address user) public view returns (uint16[] memory) {\n        uint16[] memory deviceIds = devices[user];\n        return deviceIds;\n    }\n\n    function getReward(address user) public view returns (UserRewards memory) {\n        uint16[] memory tokenIds = stakers[user];\n\n        uint256 _totalReward;\n\n        TokenReward[] memory _tokenRewards = new TokenReward[](tokenIds.length);\n\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            uint256 _available = getRewardByTokenId(tokenIds[i], user);\n            uint256 _tax;\n\n            if (nftTypes[tokenIds[i]] == 2) {\n                _tax = businessReward - nftInfos[tokenIds[i]].value;\n            } else if (nftTypes[tokenIds[i]] == 1) {\n                _tax = gangsterReward - nftInfos[tokenIds[i]].value;\n            }\n\n            _totalReward = _totalReward + _available + _tax;\n\n            _tokenRewards[i] = TokenReward({\n                id: tokenIds[i],\n                nftType: nftTypes[tokenIds[i]],\n                reward: _available,\n                tax: _tax\n            });\n        }\n\n        UserRewards memory _userRewards = UserRewards({\n            totalReward: _totalReward,\n            tokenRewards: _tokenRewards\n        });\n\n        return _userRewards;\n    }\n\n    function stake(\n        uint16[] memory tokenIds,\n        uint8[] memory types,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(stakeStopTime == 0, \"Stake: Not started yet\");\n        require(tx.origin == msg.sender, \"Only EOA\");\n\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(CONTRACT_NAME)),\n                getChainId(),\n                address(this)\n            )\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(\n                STAKE_TYPEHASH,\n                msg.sender,\n                keccak256(abi.encodePacked(tokenIds)),\n                keccak256(abi.encodePacked(types))\n            )\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\n        );\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory == admin, \"Invalid signatory\");\n\n        uint16[] storage staker = stakers[msg.sender];\n\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            if (msg.sender != angryfrogAddress) {\n                require(\n                    IERC721S(angryfrogAddress).ownerOf(tokenIds[i]) ==\n                        msg.sender,\n                    \"This NFT does not belong to address\"\n                );\n                IERC721S(angryfrogAddress).transferFrom(\n                    msg.sender,\n                    address(this),\n                    tokenIds[i]\n                );\n            }\n\n            staker.push(tokenIds[i]);\n            nftInfos[tokenIds[i]].lastClaimTime = block.timestamp;\n\n            if (types[i] == 2) {\n                nftTypes[tokenIds[i]] = 2;\n                businessHolders.push(msg.sender);\n                nftInfos[tokenIds[i]].value = businessReward;\n            } else if (types[i] == 1) {\n                nftTypes[tokenIds[i]] = 1;\n                gangsterHolders.push(msg.sender);\n                nftInfos[tokenIds[i]].value = gangsterReward;\n            }\n        }\n\n        stakedFrog = stakedFrog + tokenIds.length;\n\n        emit Stake(msg.sender, tokenIds);\n    }\n\n    function stakeDevice(address account, uint16[] memory deviceIds) public {\n        require(stakeStopTime == 0, \"Stake: Not starte yet\");\n        require(\n            account == msg.sender || msg.sender == deviceAddress,\n            \"You do not have a permission to do that\"\n        );\n        _tempClaimReward(account);\n\n        uint16[] storage staker = stakers[account];\n        uint16[] storage device = devices[account];\n        require(\n            staker.length \u003e= device.length + deviceIds.length,\n            \"Stake: Device stake is limited.\"\n        );\n\n        for (uint8 i; i \u003c deviceIds.length; i++) {\n            if (msg.sender != deviceAddress) {\n                require(\n                    IERC721S(deviceAddress).ownerOf(deviceIds[i]) == msg.sender,\n                    \"This NFT does not belong to address\"\n                );\n                IERC721S(deviceAddress).transferFrom(\n                    msg.sender,\n                    address(this),\n                    deviceIds[i]\n                );\n            }\n            device.push(deviceIds[i]);\n        }\n\n        stakedDevice = stakedDevice + deviceIds.length;\n        emit StakeDeivce(account, deviceIds);\n    }\n\n    function _tempClaimReward(address account) internal {\n        uint16[] memory tokenIds = stakers[account];\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            uint256 available = getRewardByTokenId(tokenIds[i], account);\n            if (available \u003e 0) {\n                nftInfos[tokenIds[i]].penddingAmount =\n                    nftInfos[tokenIds[i]].penddingAmount +\n                    available;\n                nftInfos[tokenIds[i]].lastClaimTime = block.timestamp;\n            }\n        }\n    }\n\n    function _setNftInfo(uint16 tokenId) internal {\n        nftInfos[tokenId].lastClaimTime = block.timestamp;\n        nftInfos[tokenId].penddingAmount = 0;\n    }\n\n    function _resetNftInfo(uint16 tokenId) internal {\n        nftInfos[tokenId].lastClaimTime = 0;\n        nftInfos[tokenId].penddingAmount = 0;\n    }\n\n    function _existTokenId(address account, uint16 tokenId)\n        internal\n        view\n        returns (bool, uint8)\n    {\n        uint16[] memory tokenIds = stakers[account];\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            if (tokenIds[i] == tokenId) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n    function _existDeviceId(address account, uint16 tokenId)\n        internal\n        view\n        returns (bool, uint8)\n    {\n        uint16[] memory tokenIds = devices[account];\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            if (tokenIds[i] == tokenId) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n    function claimReward(\n        uint16[] memory tokenIds,\n        bool safe,\n        bool unstake\n    ) external {\n        require(tx.origin == msg.sender, \"Only EOA\");\n\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            (bool exist, ) = _existTokenId(msg.sender, tokenIds[i]);\n            require(exist, \"Not Your Own\");\n        }\n\n        uint16[] storage staker = stakers[msg.sender];\n\n        uint256 totalReward;\n        uint256 totalBusinessReward;\n        uint256 totalGangsterReward;\n        uint256 totalCitizenReward;\n\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            if (nftTypes[tokenIds[i]] == 2) {\n                uint256 reward = _claimFromBusiness(tokenIds[i]);\n                totalBusinessReward = totalBusinessReward + reward;\n\n                if (unstake) {\n                    uint256 indexOfHolder = 0;\n                    for (uint256 j; j \u003c businessHolders.length; j++) {\n                        if (businessHolders[j] == msg.sender) {\n                            indexOfHolder = j;\n                            break;\n                        }\n                    }\n                    businessHolders[indexOfHolder] = businessHolders[\n                        businessHolders.length - 1\n                    ];\n                    businessHolders.pop();\n                }\n            } else if (nftTypes[tokenIds[i]] == 1) {\n                uint256 reward = _claimFromGangster(tokenIds[i], safe);\n                totalGangsterReward = totalGangsterReward + reward;\n\n                if (unstake) {\n                    uint256 indexOfHolder = 0;\n                    for (uint256 j; j \u003c gangsterHolders.length; j++) {\n                        if (gangsterHolders[j] == msg.sender) {\n                            indexOfHolder = j;\n                            break;\n                        }\n                    }\n                    gangsterHolders[indexOfHolder] = gangsterHolders[\n                        gangsterHolders.length - 1\n                    ];\n                    gangsterHolders.pop();\n                }\n            } else {\n                uint256 reward = _claimFromCitizen(tokenIds[i], safe);\n                totalCitizenReward = totalCitizenReward + reward;\n            }\n\n            if (unstake) {\n                _resetNftInfo(tokenIds[i]);\n                (, uint8 index) = _existTokenId(msg.sender, tokenIds[i]);\n                staker[index] = staker[staker.length - 1];\n                staker.pop();\n\n                IERC721S(angryfrogAddress).transferFrom(\n                    address(this),\n                    _msgSender(),\n                    tokenIds[i]\n                );\n            } else {\n                _setNftInfo(tokenIds[i]);\n            }\n        }\n\n        totalReward =\n            totalBusinessReward +\n            totalGangsterReward +\n            totalCitizenReward;\n        totalClaimedToken = totalClaimedToken + totalReward;\n\n        if (unstake) {\n            stakedFrog = stakedFrog - tokenIds.length;\n        }\n\n        if (safe) {\n            IAFF(affAddress).mint(msg.sender, totalReward);\n            emit Claim(_msgSender(), tokenIds, totalReward, unstake);\n        } else {\n            address recipient = _selectRecipientFromGangster(totalReward);\n\n            if (recipient != msg.sender) {\n                totalStealedToken =\n                    totalStealedToken +\n                    totalGangsterReward +\n                    totalCitizenReward;\n\n                IAFF(affAddress).mint(\n                    recipient,\n                    totalGangsterReward + totalCitizenReward\n                );\n                lastClaimStealed = true;\n                emit Steal(\n                    msg.sender,\n                    recipient,\n                    totalGangsterReward + totalCitizenReward,\n                    unstake\n                );\n\n                IAFF(affAddress).mint(recipient, totalBusinessReward);\n                emit Claim(\n                    _msgSender(),\n                    tokenIds,\n                    totalBusinessReward,\n                    unstake\n                );\n            } else {\n                lastClaimStealed = false;\n                IAFF(affAddress).mint(recipient, totalReward);\n                emit Claim(_msgSender(), tokenIds, totalReward, unstake);\n            }\n        }\n    }\n\n    function _claimFromCitizen(uint16 tokenId, bool safe)\n        internal\n        returns (uint256)\n    {\n        uint256 available = getRewardByTokenId(tokenId, msg.sender);\n        if (safe) {\n            uint256 _tax = (available * taxFeeOfCitizen) / 100;\n            _payTaxForCitizen(_tax);\n            return available - _tax;\n        } else {\n            return available;\n        }\n    }\n\n    function _claimFromGangster(uint16 tokenId, bool safe)\n        internal\n        returns (uint256)\n    {\n        uint256 available = getRewardByTokenId(tokenId, msg.sender);\n        uint256 taxReward = gangsterReward - nftInfos[tokenId].value;\n        nftInfos[tokenId].value = gangsterReward;\n\n        if (safe) {\n            uint256 _tax = ((available + taxReward) * taxFeeOfGangster) / 100;\n            _payTaxForGangster(_tax);\n            return (available + taxReward) - _tax;\n        } else {\n            return (available + taxReward);\n        }\n    }\n\n    function _claimFromBusiness(uint16 tokenId) internal returns (uint256) {\n        uint256 available = getRewardByTokenId(tokenId, msg.sender);\n        uint256 taxReward = businessReward - nftInfos[tokenId].value;\n        nftInfos[tokenId].value = businessReward;\n\n        return (available + taxReward);\n    }\n\n    function withdrawDevice(uint16[] memory deviceIds) external {\n        require(tx.origin == msg.sender, \"Only EOA\");\n\n        for (uint8 i; i \u003c deviceIds.length; i++) {\n            (bool exist, ) = _existDeviceId(msg.sender, deviceIds[i]);\n            require(exist, \"Not Your Own\");\n        }\n        _tempClaimReward(msg.sender);\n\n        uint16[] storage device = devices[msg.sender];\n\n        for (uint8 i; i \u003c deviceIds.length; i++) {\n            (, uint8 index) = _existDeviceId(msg.sender, deviceIds[i]);\n            device[index] = device[device.length - 1];\n            device.pop();\n\n            IERC721S(deviceAddress).transferFrom(\n                address(this),\n                _msgSender(),\n                deviceIds[i]\n            );\n        }\n\n        stakedDevice = stakedDevice - deviceIds.length;\n        emit WithdrawDevice(_msgSender(), deviceIds);\n    }\n\n    function _payTaxForCitizen(uint256 _amount) internal {\n        uint256 _amountForGangster = _amount / 3;\n        uint256 _amountForBusiness = _amount - _amountForGangster;\n\n        if (businessHolders.length != 0) {\n            businessReward += _amountForBusiness / businessHolders.length;\n        }\n        if (gangsterHolders.length != 0) {\n            gangsterReward += _amountForGangster / gangsterHolders.length;\n        }\n    }\n\n    function _payTaxForGangster(uint256 _amount) internal {\n        if (businessHolders.length != 0) {\n            businessReward += _amount / businessHolders.length;\n        }\n    }\n\n    function _selectRecipient(uint256 seed) private view returns (address) {\n        if (\n            IRandomNumGenerator(randomGen).getRandomNumber(\n                businessHolders.length + seed,\n                100,\n                block.timestamp\n            ) \u003e= 10\n        ) {\n            return msg.sender;\n        }\n\n        address thief = randomBusinessOwner(businessHolders.length + seed);\n        if (thief == address(0x0)) {\n            return msg.sender;\n        }\n        return thief;\n    }\n\n    function _selectRecipientFromGangster(uint256 seed)\n        private\n        view\n        returns (address)\n    {\n        if (\n            IRandomNumGenerator(randomGen).getRandomNumber(\n                gangsterHolders.length + seed,\n                100,\n                block.timestamp\n            ) \u003e= 10\n        ) {\n            return msg.sender;\n        }\n\n        address thief = randomGangsterOwner(gangsterHolders.length + seed);\n        if (thief == address(0x0)) {\n            return msg.sender;\n        }\n        return thief;\n    }\n\n    function randomBusinessOwner(uint256 seed) public view returns (address) {\n        if (businessHolders.length == 0) return address(0x0);\n\n        uint256 holderIndex = IRandomNumGenerator(randomGen).getRandomNumber(\n            businessHolders.length + seed,\n            businessHolders.length,\n            block.timestamp\n        );\n\n        return businessHolders[holderIndex];\n    }\n\n    function randomGangsterOwner(uint256 seed) public view returns (address) {\n        if (gangsterHolders.length == 0) return address(0x0);\n\n        uint256 holderIndex = IRandomNumGenerator(randomGen).getRandomNumber(\n            gangsterHolders.length + seed,\n            gangsterHolders.length,\n            block.timestamp\n        );\n\n        return gangsterHolders[holderIndex];\n    }\n\n    function onERC721Received(\n        address,\n        address from,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        require(from == address(0x0), \"Cannot send tokens to Barn directly\");\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function getChainId() internal view returns (uint256) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return chainId;\n    }\n}\n"},"IERC165S.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165S {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721S.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721S {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721S token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721S asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721S} `tokenId` token is transferred to this contract via {IERC721S-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721S.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"IERC721S.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165S.sol\";\n\n/**\n * @dev Required interface of an ERC721S compliant contract.\n */\ninterface IERC721S is IERC165S {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721S protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"StakingDevice.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721SBurnable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC721S.sol\";\n\ninterface IRandomNumGenerator {\n    function getRandomNumber(\n        uint256 _seed,\n        uint256 _limit,\n        uint256 _random\n    ) external view returns (uint16);\n}\n\ninterface IAFF {\n    function burn(address from, uint256 amount) external;\n}\n\ninterface IGoldStaking {\n    function stakeDevice(address owner, uint16[] memory tokenIds) external;\n\n    function randomBusinessOwner(uint256 seed) external view returns (address);\n}\n\n/**\n * @title StakingDevice Contract\n * @dev Extends ERC721S Non-Fungible Token Standard basic implementation\n */\ncontract StakingDevice is ERC721SBurnable {\n    using SafeMath for uint256;\n\n    string public baseTokenURI;\n    uint16 private mintedCount;\n    uint16 public MAX_SUPPLY;\n\n    uint256 public mintPrice;\n    uint16 public maxByMint;\n\n    address public stakingAddress;\n    address public tokenAddress;\n    IRandomNumGenerator randomGen;\n\n    mapping(uint16 =\u003e uint8) private multifiers;\n\n    event Steel(address from, address to, uint16 tokenId);\n\n    constructor() ERC721S(\"Staking Device\", \"GPU\") {\n        MAX_SUPPLY = 10000;\n        mintPrice = 450 ether;\n        maxByMint = 20;\n    }\n\n    function setMintPrice(uint256 newMintPrice) external onlyOwner {\n        mintPrice = newMintPrice;\n    }\n\n    function setMaxByMint(uint16 newMaxByMint) external onlyOwner {\n        maxByMint = newMaxByMint;\n    }\n\n    function setMaxSupply(uint16 _max_supply) external onlyOwner {\n        MAX_SUPPLY = _max_supply;\n    }\n\n    function setContractAddress(\n        address _stakingAddress,\n        address _tokenAddress,\n        IRandomNumGenerator _randomGen\n    ) external onlyOwner {\n        stakingAddress = _stakingAddress;\n        tokenAddress = _tokenAddress;\n        randomGen = _randomGen;\n    }\n\n    function setBaseURI(string memory baseURI) external onlyOwner {\n        baseTokenURI = baseURI;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenURI;\n    }\n\n    function getMultifier(uint16 tokenId) public view returns (uint8) {\n        return multifiers[tokenId];\n    }\n\n    function getMultifiers(uint16[] memory tokenIds)\n        public\n        view\n        returns (uint8[] memory)\n    {\n        uint8[] memory _multifiers = new uint8[](tokenIds.length);\n        for (uint8 i; i \u003c tokenIds.length; i++) {\n            _multifiers[i] = multifiers[tokenIds[i]];\n        }\n        return _multifiers;\n    }\n\n    function exists(uint256 _tokenId) public view returns (bool) {\n        return _exists(_tokenId);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        // Hardcode the Manager\u0027s approval so that users don\u0027t have to waste gas approving\n        if (_msgSender() != stakingAddress)\n            require(\n                _isApprovedOrOwner(_msgSender(), tokenId),\n                \"ERC721S: transfer caller is not owner nor approved\"\n            );\n        _transfer(from, to, tokenId);\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return mintedCount;\n    }\n\n    function getTokensOfOwner(address owner)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 tokenCount = balanceOf(owner);\n        uint256 supply = totalSupply();\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 resultIndex = 0;\n            uint256 tokenId;\n\n            for (tokenId = 0; tokenId \u003c supply; tokenId++) {\n                if (_owners[tokenId] == owner) {\n                    result[resultIndex] = tokenId;\n                    resultIndex++;\n                    if (resultIndex \u003e= tokenCount) {\n                        break;\n                    }\n                }\n            }\n            return result;\n        }\n    }\n\n    function _getRandom(uint256 _tokenId) public view returns (uint8) {\n        uint256 random = randomGen.getRandomNumber(\n            _tokenId,\n            100,\n            totalSupply()\n        );\n\n        if (random \u003e= 99) {\n            return 9;\n        } else if (random \u003e= 97) {\n            return 8;\n        } else if (random \u003e= 93) {\n            return 7;\n        } else if (random \u003e= 87) {\n            return 6;\n        } else if (random \u003e= 80) {\n            return 5;\n        } else if (random \u003e= 71) {\n            return 4;\n        } else if (random \u003e= 61) {\n            return 3;\n        } else if (random \u003e= 50) {\n            return 2;\n        } else if (random \u003e= 37) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function mintByUser(\n        uint8 _numberOfTokens,\n        uint256 _amount,\n        bool _stake\n    ) external {\n        require(tx.origin == msg.sender, \"Only EOA\");\n        require(\n            totalSupply() + _numberOfTokens \u003c= MAX_SUPPLY,\n            \"Max Limit To Presale\"\n        );\n        require(_numberOfTokens \u003c= maxByMint, \"Exceeds Amount\");\n\n        require(mintPrice.mul(_numberOfTokens) \u003c= _amount, \"Low Price To Mint\");\n\n        IAFF(tokenAddress).burn(msg.sender, _amount);\n\n        uint16[] memory tokenIds = _stake\n            ? new uint16[](_numberOfTokens)\n            : new uint16[](0);\n\n        for (uint8 i = 0; i \u003c _numberOfTokens; i += 1) {\n            address recipient = _selectRecipient(i);\n            uint16 tokenId = uint16(totalSupply() + i);\n\n            uint8 randomNumber = _getRandom(tokenId);\n            multifiers[tokenId] = randomNumber;\n\n            if (recipient != msg.sender) {\n                emit Steel(msg.sender, recipient, tokenId);\n            }\n\n            if (_stake \u0026\u0026 recipient == msg.sender) {\n                tokenIds[i] = tokenId;\n                _safeMint(stakingAddress, tokenId);\n            } else {\n                _safeMint(msg.sender, tokenId);\n            }\n        }\n        mintedCount = mintedCount + _numberOfTokens;\n\n        if (_stake \u0026\u0026 tokenIds.length \u003e 0) {\n            IGoldStaking(stakingAddress).stakeDevice(msg.sender, tokenIds);\n        }\n    }\n\n    function _selectRecipient(uint256 seed) private view returns (address) {\n        if (\n            randomGen.getRandomNumber(\n                totalSupply() + seed,\n                100,\n                totalSupply()\n            ) \u003e= 10\n        ) {\n            return msg.sender;\n        }\n\n        address thief = IGoldStaking(stakingAddress).randomBusinessOwner(\n            totalSupply() + seed\n        );\n        if (thief == address(0x0)) {\n            return msg.sender;\n        }\n        return thief;\n    }\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}}