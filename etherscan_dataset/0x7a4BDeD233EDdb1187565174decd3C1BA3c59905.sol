{{
  "language": "Solidity",
  "sources": {
    "NotionalV2FlashLiquidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"NotionalV2FlashLiquidatorBase.sol\";\nimport \"SafeInt256.sol\";\nimport \"IwstETH.sol\";\n\ncontract NotionalV2FlashLiquidator is NotionalV2FlashLiquidatorBase {\n    using SafeInt256 for int256;\n    using SafeMath for uint256;\n\n    constructor(\n        NotionalProxy notionalV2_,\n        address lendingPool_,\n        address weth_,\n        address cETH_,\n        IwstETH wstETH_,\n        address owner_,\n        address dex1,\n        address dex2\n    )\n        NotionalV2FlashLiquidatorBase(\n            notionalV2_,\n            lendingPool_,\n            weth_,\n            cETH_,\n            wstETH_,\n            owner_,\n            dex1,\n            dex2\n        )\n    {}\n\n    function _redeemAndWithdraw(\n        uint16 nTokenCurrencyId,\n        uint96 nTokenBalance,\n        bool redeemToUnderlying\n    ) internal override {\n        BalanceAction[] memory action = new BalanceAction[](1);\n        // If nTokenBalance is zero still try to withdraw entire cash balance\n        action[0].actionType = nTokenBalance == 0\n            ? DepositActionType.None\n            : DepositActionType.RedeemNToken;\n        action[0].currencyId = nTokenCurrencyId;\n        action[0].depositActionAmount = nTokenBalance;\n        action[0].withdrawEntireCashBalance = true;\n        action[0].redeemToUnderlying = redeemToUnderlying;\n        NotionalV2.batchBalanceAction(address(this), action);\n    }\n\n    function _sellfCashAssets(\n        uint16 fCashCurrency,\n        uint256[] memory fCashMaturities,\n        int256[] memory fCashNotional,\n        uint256 depositActionAmount,\n        bool redeemToUnderlying\n    ) internal override {\n        uint256 blockTime = block.timestamp;\n        BalanceActionWithTrades[] memory action = new BalanceActionWithTrades[](1);\n        action[0].actionType = depositActionAmount > 0\n            ? DepositActionType.DepositAsset\n            : DepositActionType.None;\n        action[0].depositActionAmount = depositActionAmount;\n        action[0].currencyId = fCashCurrency;\n        action[0].withdrawEntireCashBalance = true;\n        action[0].redeemToUnderlying = redeemToUnderlying;\n\n        uint256 numTrades;\n        bytes32[] memory trades = new bytes32[](fCashMaturities.length);\n        for (uint256 i; i < fCashNotional.length; i++) {\n            if (fCashNotional[i] == 0) continue;\n            (uint256 marketIndex, bool isIdiosyncratic) = DateTime.getMarketIndex(\n                7,\n                fCashMaturities[i],\n                blockTime\n            );\n            // We don't trade it out here but if the contract does take on idiosyncratic cash we need to be careful\n            if (isIdiosyncratic) continue;\n\n            trades[numTrades] = bytes32(\n                (uint256(fCashNotional[i] > 0 ? TradeActionType.Borrow : TradeActionType.Lend) <<\n                    248) |\n                    (marketIndex << 240) |\n                    (uint256(uint88(fCashNotional[i].abs())) << 152)\n            );\n            numTrades++;\n        }\n\n        if (numTrades < trades.length) {\n            // Shrink the trades array to length if it is not full\n            bytes32[] memory newTrades = new bytes32[](numTrades);\n            for (uint256 i; i < numTrades; i++) {\n                newTrades[i] = trades[i];\n            }\n            action[0].trades = newTrades;\n        } else {\n            action[0].trades = trades;\n        }\n\n        NotionalV2.batchBalanceAndTradeAction(address(this), action);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"invalid new owner\");\n        owner = newOwner;\n    }\n\n    function wrapToWETH() external {\n        _wrapToWETH();\n    }\n\n    function withdraw(address token, uint256 amount) external {\n        IERC20(token).transfer(owner, amount);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "NotionalV2FlashLiquidatorBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"NotionalV2BaseLiquidator.sol\";\nimport \"NotionalV2UniV3SwapRouter.sol\";\nimport \"SafeInt256.sol\";\nimport \"NotionalProxy.sol\";\nimport \"CTokenInterface.sol\";\nimport \"CErc20Interface.sol\";\nimport \"CEtherInterface.sol\";\nimport \"IFlashLender.sol\";\nimport \"IFlashLoanReceiver.sol\";\nimport \"IwstETH.sol\";\nimport \"IERC20.sol\";\nimport \"SafeMath.sol\";\n\nabstract contract NotionalV2FlashLiquidatorBase is NotionalV2BaseLiquidator, IFlashLoanReceiver {\n    using SafeInt256 for int256;\n    using SafeMath for uint256;\n\n    address public immutable LENDING_POOL;\n    address public immutable DEX_1;\n    address public immutable DEX_2;\n\n    constructor(\n        NotionalProxy notionalV2_,\n        address lendingPool_,\n        address weth_,\n        address cETH_,\n        IwstETH wstETH_,\n        address owner_,\n        address dex1,\n        address dex2\n    ) NotionalV2BaseLiquidator(notionalV2_, weth_, cETH_, wstETH_, owner_) {\n        LENDING_POOL = lendingPool_;\n        DEX_1 = dex1;\n        DEX_2 = dex2;\n    }\n\n    // Profit estimation\n    function flashLoan(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        bytes calldata params,\n        address collateralAddress\n    ) external onlyOwner returns (uint256 localProfit, uint256 collateralProfit) {\n        IFlashLender(LENDING_POOL).flashLoan(\n            address(this),\n            assets,\n            amounts,\n            modes,\n            address(this),\n            params,\n            0\n        );\n        localProfit = IERC20(assets[0]).balanceOf(address(this));\n        collateralProfit = collateralAddress == address(0) ? 0 : IERC20(collateralAddress).balanceOf(address(this));\n    }\n\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external override returns (bool) {\n        require(msg.sender == LENDING_POOL); // dev: unauthorized caller\n        LiquidationAction memory action = abi.decode(params, ((LiquidationAction)));\n\n        // Mint cTokens for incoming assets, if required. If there are transfer fees\n        // the we deposit underlying instead inside each _liquidate call instead\n        if (!action.hasTransferFee) _mintCTokens(assets, amounts);\n\n        if (LiquidationType(action.liquidationType) == LiquidationType.LocalCurrency) {\n            _liquidateLocal(action, assets);\n        } else if (LiquidationType(action.liquidationType) == LiquidationType.CollateralCurrency) {\n            _liquidateCollateral(action, assets);\n        } else if (LiquidationType(action.liquidationType) == LiquidationType.LocalfCash) {\n            _liquidateLocalfCash(action, assets);\n        } else if (LiquidationType(action.liquidationType) == LiquidationType.CrossCurrencyfCash) {\n            _liquidateCrossCurrencyfCash(action, assets);\n        }\n\n        _redeemCTokens(assets);\n\n        if (\n            LiquidationType(action.liquidationType) == LiquidationType.CollateralCurrency ||\n            LiquidationType(action.liquidationType) == LiquidationType.CrossCurrencyfCash\n        ) {\n            _dexTrade(action);\n        }\n\n        if (action.withdrawProfit) {\n            _withdrawProfit(assets[0], amounts[0].add(premiums[0]));\n        }\n\n        // The lending pool should have enough approval to pull the required amount from the contract\n        return true;\n    }\n\n    function _withdrawProfit(address currency, uint256 threshold) internal {\n        // Transfer profit to OWNER\n        uint256 bal = IERC20(currency).balanceOf(address(this));\n        if (bal > threshold) {\n            IERC20(currency).transfer(owner, bal.sub(threshold));\n        }\n    }\n\n    function _dexTrade(LiquidationAction memory action) internal {\n        address collateralUnderlyingAddress;\n\n        if (LiquidationType(action.liquidationType) == LiquidationType.CollateralCurrency) {\n            CollateralCurrencyLiquidation memory liquidation = abi.decode(\n                action.payload,\n                (CollateralCurrencyLiquidation)\n            );\n\n            collateralUnderlyingAddress = liquidation.collateralUnderlyingAddress;\n            _executeDexTrade(0, liquidation.tradeData);\n        } else {\n            CrossCurrencyfCashLiquidation memory liquidation = abi.decode(\n                action.payload,\n                (CrossCurrencyfCashLiquidation)\n            );\n\n            collateralUnderlyingAddress = liquidation.fCashUnderlyingAddress;\n            _executeDexTrade(0, liquidation.tradeData);\n        }\n\n        if (action.withdrawProfit) {\n            _withdrawProfit(collateralUnderlyingAddress, 0);\n        }\n    }\n\n    function _executeDexTrade(uint256 ethValue, TradeData memory tradeData) internal {\n        require(\n            tradeData.dexAddress == DEX_1 || tradeData.dexAddress == DEX_2,\n            \"bad exchange address\"\n        );\n\n        // prettier-ignore\n        (bool success, /* return value */) = tradeData.dexAddress.call{value: ethValue}(tradeData.params);\n        require(success, \"dex trade failed\");\n    }\n}\n"
    },
    "NotionalV2BaseLiquidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"IERC20.sol\";\nimport \"NotionalProxy.sol\";\nimport \"CErc20Interface.sol\";\nimport \"CEtherInterface.sol\";\nimport \"WETH9.sol\";\nimport \"IwstETH.sol\";\nimport \"NotionalV2LiquidatorStorageLayoutV1.sol\";\nimport \"DateTime.sol\";\nimport \"SafeInt256.sol\";\n\nstruct LiquidationAction {\n    uint8 liquidationType;\n    bool withdrawProfit;\n    bool hasTransferFee;\n    bytes payload;\n}\n\nstruct LocalCurrencyLiquidation {\n    address liquidateAccount;\n    uint16 localCurrency;\n    uint96 maxNTokenLiquidation;\n}\n\nstruct CollateralCurrencyLiquidation {\n    address liquidateAccount;\n    uint16 localCurrency;\n    address localCurrencyAddress;\n    uint16 collateralCurrency;\n    address collateralAddress;\n    address collateralUnderlyingAddress;\n    uint128 maxCollateralLiquidation;\n    uint96 maxNTokenLiquidation;\n    TradeData tradeData;\n}\n\nstruct LocalfCashLiquidation {\n    address liquidateAccount;\n    uint16 localCurrency;\n    uint256[] fCashMaturities;\n    uint256[] maxfCashLiquidateAmounts;\n}\n\nstruct CrossCurrencyfCashLiquidation {\n    address liquidateAccount;\n    uint16 localCurrency;\n    address localCurrencyAddress;\n    uint16 fCashCurrency;\n    address fCashAddress;\n    address fCashUnderlyingAddress;\n    uint256[] fCashMaturities;\n    uint256[] maxfCashLiquidateAmounts;\n    TradeData tradeData;\n}\n\nstruct TradeData {\n    address dexAddress;\n    bytes params;\n}\n\nenum LiquidationType {\n    LocalCurrency,\n    CollateralCurrency,\n    LocalfCash,\n    CrossCurrencyfCash\n}\n\nabstract contract NotionalV2BaseLiquidator is NotionalV2LiquidatorStorageLayoutV1 {\n    using SafeInt256 for int256;\n    using SafeMath for uint256;\n\n    NotionalProxy public immutable NotionalV2;\n    address public immutable WETH;\n    address public immutable cETH;\n    IwstETH public immutable wstETH;\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(\n        NotionalProxy notionalV2_,\n        address weth_,\n        address cETH_,\n        IwstETH wstETH_,\n        address owner_\n    ) {\n        NotionalV2 = notionalV2_;\n        WETH = weth_;\n        cETH = cETH_;\n        wstETH = wstETH_;\n        owner = owner_;\n    }\n\n    function checkAllowanceOrSet(address erc20, address spender) internal {\n        if (IERC20(erc20).allowance(address(this), spender) < 2**128) {\n            IERC20(erc20).approve(spender, type(uint256).max);\n        }\n    }\n\n    function enableCTokens(address[] calldata cTokens) external onlyOwner {\n        for (uint256 i; i < cTokens.length; i++) {\n            _setCTokenAddress(cTokens[i]);\n        }\n    }\n\n    function approveTokens(address[] calldata tokens, address spender) external onlyOwner {\n        for (uint256 i; i < tokens.length; i++) {\n            IERC20(tokens[i]).approve(spender, 0);\n            IERC20(tokens[i]).approve(spender, type(uint256).max);\n        }\n    }\n\n    function _setCTokenAddress(address cToken) internal returns (address) {\n        address underlying = CTokenInterface(cToken).underlying();\n        // Notional V2 needs to be able to pull cTokens\n        checkAllowanceOrSet(cToken, address(NotionalV2));\n        underlyingToCToken[underlying] = cToken;\n        return underlying;\n    }\n\n    function _mintCTokens(address[] memory assets, uint256[] memory amounts) internal {\n        for (uint256 i; i < assets.length; i++) {\n            if (assets[i] == WETH) {\n                // Withdraw WETH to ETH and mint CEth\n                WETH9(WETH).withdraw(amounts[i]);\n                CEtherInterface(cETH).mint{value: amounts[i]}();\n            } else {\n                address cToken = underlyingToCToken[assets[i]];\n                if (cToken != address(0)) {\n                    checkAllowanceOrSet(assets[i], cToken);\n                    CErc20Interface(cToken).mint(amounts[i]);\n                }\n            }\n        }\n    }\n\n    function _redeemCTokens(address[] memory assets) internal {\n        // Redeem cTokens to underlying to repay the flash loan\n        for (uint256 i; i < assets.length; i++) {\n            address cToken = assets[i] == WETH ? cETH : underlyingToCToken[assets[i]];\n            if (cToken == address(0)) continue;\n\n            CErc20Interface(cToken).redeem(IERC20(cToken).balanceOf(address(this)));\n            // Wrap ETH into WETH for repayment\n            if (assets[i] == WETH && address(this).balance > 0) _wrapToWETH();\n        }\n    }\n\n    function _liquidateLocal(LiquidationAction memory action, address[] memory assets) internal {\n        LocalCurrencyLiquidation memory liquidation = abi.decode(\n            action.payload,\n            (LocalCurrencyLiquidation)\n        );\n\n        if (action.hasTransferFee) {\n            // NOTE: This assumes that the first asset flash borrowed is the one with transfer fees\n            uint256 amount = IERC20(assets[0]).balanceOf(address(this));\n            checkAllowanceOrSet(assets[0], address(NotionalV2));\n            NotionalV2.depositUnderlyingToken(address(this), liquidation.localCurrency, amount);\n        }\n\n        // prettier-ignore\n        (\n            /* int256 localAssetCashFromLiquidator */,\n            int256 netNTokens\n        ) = NotionalV2.liquidateLocalCurrency(\n            liquidation.liquidateAccount, \n            liquidation.localCurrency, \n            liquidation.maxNTokenLiquidation\n        );\n\n        // Will withdraw entire cash balance. Don't redeem local currency here because it has been flash\n        // borrowed and we need to redeem the entire balance to underlying for the flash loan repayment.\n        _redeemAndWithdraw(liquidation.localCurrency, uint96(netNTokens), false);\n    }\n\n    function _liquidateCollateral(LiquidationAction memory action, address[] memory assets)\n        internal\n    {\n        CollateralCurrencyLiquidation memory liquidation = abi.decode(\n            action.payload,\n            (CollateralCurrencyLiquidation)\n        );\n\n        if (action.hasTransferFee) {\n            // NOTE: This assumes that the first asset flash borrowed is the one with transfer fees\n            uint256 amount = IERC20(assets[0]).balanceOf(address(this));\n            checkAllowanceOrSet(assets[0], address(NotionalV2));\n            NotionalV2.depositUnderlyingToken(address(this), liquidation.localCurrency, amount);\n        }\n\n        // prettier-ignore\n        (\n            /* int256 localAssetCashFromLiquidator */,\n            /* int256 collateralAssetCash */,\n            int256 collateralNTokens\n        ) = NotionalV2.liquidateCollateralCurrency(\n            liquidation.liquidateAccount,\n            liquidation.localCurrency,\n            liquidation.collateralCurrency,\n            liquidation.maxCollateralLiquidation,\n            liquidation.maxNTokenLiquidation,\n            true, // Withdraw collateral\n            false // Redeem to underlying (will happen later)\n        ); \n\n        // Do not redeem stETH\n        if (liquidation.collateralCurrency != 5) {\n            // Redeem to underlying for collateral because it needs to be traded on the DEX\n            _redeemAndWithdraw(liquidation.collateralCurrency, uint96(collateralNTokens), true);\n\n            CErc20Interface(liquidation.collateralAddress).redeem(\n                IERC20(liquidation.collateralAddress).balanceOf(address(this))\n            );\n        }\n\n        if (liquidation.collateralCurrency == 1) {\n            // Wrap everything to WETH for trading\n            _wrapToWETH();\n        } else if (liquidation.collateralCurrency == 5) {\n            // Unwrap to stETH for tradding\n            _unwrapStakedETH();\n        }\n\n        // Will withdraw all cash balance, no need to redeem local currency, it will be\n        // redeemed later\n        if (action.hasTransferFee) _redeemAndWithdraw(liquidation.localCurrency, 0, false);\n    }\n\n    function _liquidateLocalfCash(LiquidationAction memory action, address[] memory assets)\n        internal\n    {\n        LocalfCashLiquidation memory liquidation = abi.decode(\n            action.payload,\n            (LocalfCashLiquidation)\n        );\n\n        if (action.hasTransferFee) {\n            // NOTE: This assumes that the first asset flash borrowed is the one with transfer fees\n            uint256 amount = IERC20(assets[0]).balanceOf(address(this));\n            checkAllowanceOrSet(assets[0], address(NotionalV2));\n            NotionalV2.depositUnderlyingToken(address(this), liquidation.localCurrency, amount);\n        }\n\n        // prettier-ignore\n        (\n            int256[] memory fCashNotionalTransfers,\n            int256 localAssetCashFromLiquidator\n        ) = NotionalV2.liquidatefCashLocal(\n            liquidation.liquidateAccount,\n            liquidation.localCurrency,\n            liquidation.fCashMaturities,\n            liquidation.maxfCashLiquidateAmounts\n        );\n\n        // If localAssetCashFromLiquidator is negative (meaning the liquidator has received cash)\n        // then when we will need to lend in order to net off the negative fCash. In this case we\n        // will deposit the local asset cash back into notional.\n        _sellfCashAssets(\n            liquidation.localCurrency,\n            liquidation.fCashMaturities,\n            fCashNotionalTransfers,\n            localAssetCashFromLiquidator < 0 ? uint256(localAssetCashFromLiquidator.abs()) : 0,\n            false // No need to redeem to underlying here\n        );\n\n        // NOTE: no withdraw if _hasTransferFees, _sellfCashAssets with withdraw everything\n    }\n\n    function _liquidateCrossCurrencyfCash(LiquidationAction memory action, address[] memory assets)\n        internal\n    {\n        CrossCurrencyfCashLiquidation memory liquidation = abi.decode(\n            action.payload,\n            (CrossCurrencyfCashLiquidation)\n        );\n\n        if (action.hasTransferFee) {\n            // NOTE: This assumes that the first asset flash borrowed is the one with transfer fees\n            uint256 amount = IERC20(assets[0]).balanceOf(address(this));\n            checkAllowanceOrSet(assets[0], address(NotionalV2));\n            NotionalV2.depositUnderlyingToken(address(this), liquidation.localCurrency, amount);\n        }\n\n        // prettier-ignore\n        (\n            int256[] memory fCashNotionalTransfers,\n            /* int256 localAssetCashFromLiquidator */\n        ) = NotionalV2.liquidatefCashCrossCurrency(\n            liquidation.liquidateAccount,\n            liquidation.localCurrency,\n            liquidation.fCashCurrency,\n            liquidation.fCashMaturities,\n            liquidation.maxfCashLiquidateAmounts\n        );\n\n        // Redeem to underlying here, collateral is not specified as an input asset\n        _sellfCashAssets(\n            liquidation.fCashCurrency,\n            liquidation.fCashMaturities,\n            fCashNotionalTransfers,\n            0,\n            true\n        );\n        if (liquidation.fCashCurrency == 1) {\n            // Wrap everything to WETH for trading\n            _wrapToWETH();\n        }\n\n        // NOTE: no withdraw if _hasTransferFees, _sellfCashAssets with withdraw everything\n    }\n\n    function _sellfCashAssets(\n        uint16 fCashCurrency,\n        uint256[] memory fCashMaturities,\n        int256[] memory fCashNotional,\n        uint256 depositActionAmount,\n        bool redeemToUnderlying\n    ) internal virtual;\n\n    function _redeemAndWithdraw(\n        uint16 nTokenCurrencyId,\n        uint96 nTokenBalance,\n        bool redeemToUnderlying\n    ) internal virtual;\n\n    function _wrapToWETH() internal {\n        WETH9(WETH).deposit{value: address(this).balance}();\n    }\n\n    function _unwrapStakedETH() internal {\n        wstETH.unwrap(wstETH.balanceOf(address(this)));\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "NotionalProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Types.sol\";\nimport \"nTokenERC20.sol\";\nimport \"nERC1155Interface.sol\";\nimport \"NotionalGovernance.sol\";\nimport \"NotionalCalculations.sol\";\nimport \"NotionalViews.sol\";\nimport \"NotionalTreasury.sol\";\n\ninterface NotionalProxy is\n    nTokenERC20,\n    nERC1155Interface,\n    NotionalGovernance,\n    NotionalTreasury,\n    NotionalCalculations,\n    NotionalViews\n{\n    /** User trading events */\n    event CashBalanceChange(\n        address indexed account,\n        uint16 indexed currencyId,\n        int256 netCashChange\n    );\n    event nTokenSupplyChange(\n        address indexed account,\n        uint16 indexed currencyId,\n        int256 tokenSupplyChange\n    );\n    event MarketsInitialized(uint16 currencyId);\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\n    event SettledCashDebt(\n        address indexed settledAccount,\n        uint16 indexed currencyId,\n        address indexed settler,\n        int256 amountToSettleAsset,\n        int256 fCashAmount\n    );\n    event nTokenResidualPurchase(\n        uint16 indexed currencyId,\n        uint40 indexed maturity,\n        address indexed purchaser,\n        int256 fCashAmountToPurchase,\n        int256 netAssetCashNToken\n    );\n    event LendBorrowTrade(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash\n    );\n    event AddRemoveLiquidity(\n        address indexed account,\n        uint16 indexed currencyId,\n        uint40 maturity,\n        int256 netAssetCash,\n        int256 netfCash,\n        int256 netLiquidityTokens\n    );\n\n    /// @notice Emitted once when incentives are migrated\n    event IncentivesMigrated(\n        uint16 currencyId,\n        uint256 migrationEmissionRate,\n        uint256 finalIntegralTotalSupply,\n        uint256 migrationTime\n    );\n\n    /// @notice Emitted when reserve fees are accrued\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\n    /// @notice Emitted whenever an account context has updated\n    event AccountContextUpdate(address indexed account);\n    /// @notice Emitted when an account has assets that are settled\n    event AccountSettled(address indexed account);\n    /// @notice Emitted when an asset rate is settled\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\n\n    /* Liquidation Events */\n    event LiquidateLocalCurrency(\n        address indexed liquidated,\n        address indexed liquidator,\n        uint16 localCurrencyId,\n        int256 netLocalFromLiquidator\n    );\n\n    event LiquidateCollateralCurrency(\n        address indexed liquidated,\n        address indexed liquidator,\n        uint16 localCurrencyId,\n        uint16 collateralCurrencyId,\n        int256 netLocalFromLiquidator,\n        int256 netCollateralTransfer,\n        int256 netNTokenTransfer\n    );\n\n    event LiquidatefCashEvent(\n        address indexed liquidated,\n        address indexed liquidator,\n        uint16 localCurrencyId,\n        uint16 fCashCurrency,\n        int256 netLocalFromLiquidator,\n        uint256[] fCashMaturities,\n        int256[] fCashNotionalTransfer\n    );\n\n    /** UUPS Upgradeable contract calls */\n    function upgradeTo(address newImplementation) external;\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\n\n    function getImplementation() external view returns (address);\n\n    function owner() external view returns (address);\n\n    function pauseRouter() external view returns (address);\n\n    function pauseGuardian() external view returns (address);\n\n    /** Initialize Markets Action */\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\n\n    function sweepCashIntoMarkets(uint16 currencyId) external;\n\n    /** Redeem nToken Action */\n    function nTokenRedeem(\n        address redeemer,\n        uint16 currencyId,\n        uint96 tokensToRedeem_,\n        bool sellTokenAssets,\n        bool acceptResidualAssets\n    ) external returns (int256);\n\n    /** Account Action */\n    function enableBitmapCurrency(uint16 currencyId) external;\n\n    function settleAccount(address account) external;\n\n    function depositUnderlyingToken(\n        address account,\n        uint16 currencyId,\n        uint256 amountExternalPrecision\n    ) external payable returns (uint256);\n\n    function depositAssetToken(\n        address account,\n        uint16 currencyId,\n        uint256 amountExternalPrecision\n    ) external returns (uint256);\n\n    function withdraw(\n        uint16 currencyId,\n        uint88 amountInternalPrecision,\n        bool redeemToUnderlying\n    ) external returns (uint256);\n\n    /** Batch Action */\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\n\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\n        external\n        payable;\n\n    function batchBalanceAndTradeActionWithCallback(\n        address account,\n        BalanceActionWithTrades[] calldata actions,\n        bytes calldata callbackData\n    ) external payable;\n\n    /** Liquidation Action */\n    function calculateLocalCurrencyLiquidation(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint96 maxNTokenLiquidation\n    ) external returns (int256, int256);\n\n    function liquidateLocalCurrency(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint96 maxNTokenLiquidation\n    ) external returns (int256, int256);\n\n    function calculateCollateralCurrencyLiquidation(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint16 collateralCurrency,\n        uint128 maxCollateralLiquidation,\n        uint96 maxNTokenLiquidation\n    )\n        external\n        returns (\n            int256,\n            int256,\n            int256\n        );\n\n    function liquidateCollateralCurrency(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint16 collateralCurrency,\n        uint128 maxCollateralLiquidation,\n        uint96 maxNTokenLiquidation,\n        bool withdrawCollateral,\n        bool redeemToUnderlying\n    )\n        external\n        returns (\n            int256,\n            int256,\n            int256\n        );\n\n    function calculatefCashLocalLiquidation(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint256[] calldata fCashMaturities,\n        uint256[] calldata maxfCashLiquidateAmounts\n    ) external returns (int256[] memory, int256);\n\n    function liquidatefCashLocal(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint256[] calldata fCashMaturities,\n        uint256[] calldata maxfCashLiquidateAmounts\n    ) external returns (int256[] memory, int256);\n\n    function calculatefCashCrossCurrencyLiquidation(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint16 fCashCurrency,\n        uint256[] calldata fCashMaturities,\n        uint256[] calldata maxfCashLiquidateAmounts\n    ) external returns (int256[] memory, int256);\n\n    function liquidatefCashCrossCurrency(\n        address liquidateAccount,\n        uint16 localCurrency,\n        uint16 fCashCurrency,\n        uint256[] calldata fCashMaturities,\n        uint256[] calldata maxfCashLiquidateAmounts\n    ) external returns (int256[] memory, int256);\n}\n"
    },
    "Types.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"AggregatorV2V3Interface.sol\";\nimport \"AssetRateAdapter.sol\";\n\n/// @notice Different types of internal tokens\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\n///  - cToken: Compound interest bearing token\n///  - cETH: Special handling for cETH tokens\n///  - Ether: the one and only\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\n///  - aToken: Aave interest bearing tokens\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable, aToken}\n\n/// @notice Specifies the different trade action types in the system. Each trade action type is\n/// encoded in a tightly packed bytes32 object. Trade action type is the first big endian byte of the\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\nenum TradeActionType {\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\n    Lend,\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\n    Borrow,\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\n    AddLiquidity,\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\n    RemoveLiquidity,\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\n    PurchaseNTokenResidual,\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\n    SettleCashDebt\n}\n\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\nenum DepositActionType {\n    // No deposit action\n    None,\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\n    DepositAsset,\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\n    // external precision\n    DepositUnderlying,\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\n    // nTokens into the account\n    DepositAssetAndMintNToken,\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\n    DepositUnderlyingAndMintNToken,\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\n    RedeemNToken,\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\n    // Notional internal 8 decimal precision.\n    ConvertCashToNToken\n}\n\n/// @notice Used internally for PortfolioHandler state\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\n\n/****** Calldata objects ******/\n\n/// @notice Defines a balance action for batchAction\nstruct BalanceAction {\n    // Deposit action to take (if any)\n    DepositActionType actionType;\n    uint16 currencyId;\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\n    uint256 depositActionAmount;\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\n    uint256 withdrawAmountInternalPrecision;\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\n    // residual left from trading.\n    bool withdrawEntireCashBalance;\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\n    bool redeemToUnderlying;\n}\n\n/// @notice Defines a balance action with a set of trades to do as well\nstruct BalanceActionWithTrades {\n    DepositActionType actionType;\n    uint16 currencyId;\n    uint256 depositActionAmount;\n    uint256 withdrawAmountInternalPrecision;\n    bool withdrawEntireCashBalance;\n    bool redeemToUnderlying;\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\n    bytes32[] trades;\n}\n\n/****** In memory objects ******/\n/// @notice Internal object that represents settled cash balances\nstruct SettleAmount {\n    uint256 currencyId;\n    int256 netCashChange;\n}\n\n/// @notice Internal object that represents a token\nstruct Token {\n    address tokenAddress;\n    bool hasTransferFee;\n    int256 decimals;\n    TokenType tokenType;\n    uint256 maxCollateralBalance;\n}\n\n/// @notice Internal object that represents an nToken portfolio\nstruct nTokenPortfolio {\n    CashGroupParameters cashGroup;\n    PortfolioState portfolioState;\n    int256 totalSupply;\n    int256 cashBalance;\n    uint256 lastInitializedTime;\n    bytes6 parameters;\n    address tokenAddress;\n}\n\n/// @notice Internal object used during liquidation\nstruct LiquidationFactors {\n    address account;\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\n    int256 netETHValue;\n    // Amount of net local currency asset cash before haircuts and buffers available\n    int256 localAssetAvailable;\n    // Amount of net collateral currency asset cash before haircuts and buffers available\n    int256 collateralAssetAvailable;\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\n    // on liquidation type\n    int256 nTokenHaircutAssetValue;\n    // nToken parameters for calculating liquidation amount\n    bytes6 nTokenParameters;\n    // ETH exchange rate from local currency to ETH\n    ETHRate localETHRate;\n    // ETH exchange rate from collateral currency to ETH\n    ETHRate collateralETHRate;\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\n    AssetRateParameters localAssetRate;\n    // Used during currency liquidations if the account has liquidity tokens\n    CashGroupParameters collateralCashGroup;\n    // Used during currency liquidations if it is only a calculation, defaults to false\n    bool isCalculation;\n}\n\n/// @notice Internal asset array portfolio state\nstruct PortfolioState {\n    // Array of currently stored assets\n    PortfolioAsset[] storedAssets;\n    // Array of new assets to add\n    PortfolioAsset[] newAssets;\n    uint256 lastNewAssetIndex;\n    // Holds the length of stored assets after accounting for deleted assets\n    uint256 storedAssetLength;\n}\n\n/// @notice In memory ETH exchange rate used during free collateral calculation.\nstruct ETHRate {\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\n    int256 rateDecimals;\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\n    int256 rate;\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\n    int256 buffer;\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\n    int256 haircut;\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\n    // as an incentive given to liquidators.\n    int256 liquidationDiscount;\n}\n\n/// @notice Internal object used to handle balance state during a transaction\nstruct BalanceState {\n    uint16 currencyId;\n    // Cash balance stored in balance state at the beginning of the transaction\n    int256 storedCashBalance;\n    // nToken balance stored at the beginning of the transaction\n    int256 storedNTokenBalance;\n    // The net cash change as a result of asset settlement or trading\n    int256 netCashChange;\n    // Net asset transfers into or out of the account\n    int256 netAssetTransferInternalPrecision;\n    // Net token transfers into or out of the account\n    int256 netNTokenTransfer;\n    // Net token supply change from minting or redeeming\n    int256 netNTokenSupplyChange;\n    // The last time incentives were claimed for this currency\n    uint256 lastClaimTime;\n    // Accumulator for incentives that the account no longer has a claim over\n    uint256 accountIncentiveDebt;\n}\n\n/// @dev Asset rate used to convert between underlying cash and asset cash\nstruct AssetRateParameters {\n    // Address of the asset rate oracle\n    AssetRateAdapter rateOracle;\n    // The exchange rate from base to quote (if invert is required it is already done)\n    int256 rate;\n    // The decimals of the underlying, the rate converts to the underlying decimals\n    int256 underlyingDecimals;\n}\n\n/// @dev Cash group when loaded into memory\nstruct CashGroupParameters {\n    uint16 currencyId;\n    uint256 maxMarketIndex;\n    AssetRateParameters assetRate;\n    bytes32 data;\n}\n\n/// @dev A portfolio asset when loaded in memory\nstruct PortfolioAsset {\n    // Asset currency id\n    uint256 currencyId;\n    uint256 maturity;\n    // Asset type, fCash or liquidity token.\n    uint256 assetType;\n    // fCash amount or liquidity token amount\n    int256 notional;\n    // Used for managing portfolio asset state\n    uint256 storageSlot;\n    // The state of the asset for when it is written to storage\n    AssetStorageState storageState;\n}\n\n/// @dev Market object as represented in memory\nstruct MarketParameters {\n    bytes32 storageSlot;\n    uint256 maturity;\n    // Total amount of fCash available for purchase in the market.\n    int256 totalfCash;\n    // Total amount of cash available for purchase in the market.\n    int256 totalAssetCash;\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\n    int256 totalLiquidity;\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\n    uint256 lastImpliedRate;\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\n    // remaining resistent to flash loan attacks.\n    uint256 oracleRate;\n    // This is the timestamp of the previous trade\n    uint256 previousTradeTime;\n}\n\n/****** Storage objects ******/\n\n/// @dev Token object in storage:\n///  20 bytes for token address\n///  1 byte for hasTransferFee\n///  1 byte for tokenType\n///  1 byte for tokenDecimals\n///  9 bytes for maxCollateralBalance (may not always be set)\nstruct TokenStorage {\n    // Address of the token\n    address tokenAddress;\n    // Transfer fees will change token deposit behavior\n    bool hasTransferFee;\n    TokenType tokenType;\n    uint8 decimalPlaces;\n    // Upper limit on how much of this token the contract can hold at any time\n    uint72 maxCollateralBalance;\n}\n\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\nstruct ETHRateStorage {\n    // Address of the rate oracle\n    AggregatorV2V3Interface rateOracle;\n    // The decimal places of precision that the rate oracle uses\n    uint8 rateDecimalPlaces;\n    // True of the exchange rate must be inverted\n    bool mustInvert;\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\n    // Amount of buffer to apply to the exchange rate for negative balances.\n    uint8 buffer;\n    // Amount of haircut to apply to the exchange rate for positive balances\n    uint8 haircut;\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\n    uint8 liquidationDiscount;\n}\n\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\nstruct AssetRateStorage {\n    // Address of the rate oracle\n    AssetRateAdapter rateOracle;\n    // The decimal places of the underlying asset\n    uint8 underlyingDecimalPlaces;\n}\n\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\n/// length.\nstruct CashGroupSettings {\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\n    // that is dated less than the longest AMM will be tradable.\n    uint8 maxMarketIndex;\n    // Time window in 5 minute increments that the rate oracle will be averaged over\n    uint8 rateOracleTimeWindow5Min;\n    // Total fees per trade, specified in BPS\n    uint8 totalFeeBPS;\n    // Share of the fees given to the protocol, denominated in percentage\n    uint8 reserveFeeShare;\n    // Debt buffer specified in 5 BPS increments\n    uint8 debtBuffer5BPS;\n    // fCash haircut specified in 5 BPS increments\n    uint8 fCashHaircut5BPS;\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\n    uint8 settlementPenaltyRate5BPS;\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\n    uint8 liquidationfCashHaircut5BPS;\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\n    uint8 liquidationDebtBuffer5BPS;\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\n    uint8[] liquidityTokenHaircuts;\n    // Rate scalar used to determine the slippage of the market\n    uint8[] rateScalars;\n}\n\n/// @dev Holds account level context information used to determine settlement and\n/// free collateral actions. Total storage is 28 bytes\nstruct AccountContext {\n    // Used to check when settlement must be triggered on an account\n    uint40 nextSettleTime;\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\n    bytes1 hasDebt;\n    // Length of the account's asset array\n    uint8 assetArrayLength;\n    // If this account has bitmaps set, this is the corresponding currency id\n    uint16 bitmapCurrencyId;\n    // 9 total active currencies possible (2 bytes each)\n    bytes18 activeCurrencies;\n}\n\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\n/// 16 bytes\nstruct nTokenContext {\n    // Currency id that the nToken represents\n    uint16 currencyId;\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\n    uint32 incentiveAnnualEmissionRate;\n    // The last block time at utc0 that the nToken was initialized at, zero if it\n    // has never been initialized\n    uint32 lastInitializedTime;\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\n    // currently holds\n    uint8 assetArrayLength;\n    // Each byte is a specific nToken parameter\n    bytes5 nTokenParameters;\n    // Reserved bytes for future usage\n    bytes15 _unused;\n    // Set to true if a secondary rewarder is set\n    bool hasSecondaryRewarder;\n}\n\n/// @dev Holds account balance information, total storage 32 bytes\nstruct BalanceStorage {\n    // Number of nTokens held by the account\n    uint80 nTokenBalance;\n    // Last time the account claimed their nTokens\n    uint32 lastClaimTime;\n    // Incentives that the account no longer has a claim over\n    uint56 accountIncentiveDebt;\n    // Cash balance of the account\n    int88 cashBalance;\n}\n\n/// @dev Holds information about a settlement rate, total storage 25 bytes\nstruct SettlementRateStorage {\n    uint40 blockTime;\n    uint128 settlementRate;\n    uint8 underlyingDecimalPlaces;\n}\n\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\n/// two storage words\nstruct MarketStorage {\n    // Total fCash in the market\n    uint80 totalfCash;\n    // Total asset cash in the market\n    uint80 totalAssetCash;\n    // Last annualized interest rate the market traded at\n    uint32 lastImpliedRate;\n    // Last recorded oracle rate for the market\n    uint32 oracleRate;\n    // Last time a trade was made\n    uint32 previousTradeTime;\n    // This is stored in slot + 1\n    uint80 totalLiquidity;\n}\n\nstruct ifCashStorage {\n    // Notional amount of fCash at the slot, limited to int128 to allow for\n    // future expansion\n    int128 notional;\n}\n\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\nstruct PortfolioAssetStorage {\n    // Currency Id for the asset\n    uint16 currencyId;\n    // Maturity of the asset\n    uint40 maturity;\n    // Asset type (fCash or Liquidity Token marker)\n    uint8 assetType;\n    // Notional\n    int88 notional;\n}\n\n/// @dev nToken total supply factors for the nToken, includes factors related\n/// to claiming incentives, total storage 32 bytes. This is the deprecated version\nstruct nTokenTotalSupplyStorage_deprecated {\n    // Total supply of the nToken\n    uint96 totalSupply;\n    // Integral of the total supply used for calculating the average total supply\n    uint128 integralTotalSupply;\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\n    uint32 lastSupplyChangeTime;\n}\n\n/// @dev nToken total supply factors for the nToken, includes factors related\n/// to claiming incentives, total storage 32 bytes.\nstruct nTokenTotalSupplyStorage {\n    // Total supply of the nToken\n    uint96 totalSupply;\n    // How many NOTE incentives should be issued per nToken in 1e18 precision\n    uint128 accumulatedNOTEPerNToken;\n    // Last timestamp when the accumulation happened\n    uint32 lastAccumulatedTime;\n}\n\n/// @dev Used in view methods to return account balances in a developer friendly manner\nstruct AccountBalance {\n    uint16 currencyId;\n    int256 cashBalance;\n    int256 nTokenBalance;\n    uint256 lastClaimTime;\n    uint256 accountIncentiveDebt;\n}\n"
    },
    "AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\nimport \"AggregatorInterface.sol\";\nimport \"AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n{\n}"
    },
    "AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}"
    },
    "AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}"
    },
    "AssetRateAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-v3\npragma solidity >=0.7.0;\n\n/// @notice Used as a wrapper for tokens that are interest bearing for an\n/// underlying token. Follows the cToken interface, however, can be adapted\n/// for other interest bearing tokens.\ninterface AssetRateAdapter {\n    function token() external view returns (address);\n\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function getExchangeRateStateful() external returns (int256);\n\n    function getExchangeRateView() external view returns (int256);\n\n    function getAnnualizedSupplyRate() external view returns (uint256);\n}\n"
    },
    "nTokenERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\ninterface nTokenERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\n\n    function nTokenTransferAllowance(\n        uint16 currencyId,\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\n\n    function nTokenTransferApprove(\n        uint16 currencyId,\n        address owner,\n        address spender,\n        uint256 amount\n    ) external returns (bool);\n\n    function nTokenTransfer(\n        uint16 currencyId,\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function nTokenTransferFrom(\n        uint16 currencyId,\n        address spender,\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\n\n    function nTokenClaimIncentives() external returns (uint256);\n\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\n\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\n        external\n        view\n        returns (int256);\n}\n"
    },
    "nERC1155Interface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Types.sol\";\n\ninterface nERC1155Interface {\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n    event URI(string value, uint256 indexed id);\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\n\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (int256[] memory);\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external payable;\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external payable;\n\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\n        external\n        view\n        returns (PortfolioAsset[] memory);\n\n    function encodeToId(\n        uint16 currencyId,\n        uint40 maturity,\n        uint8 assetType\n    ) external pure returns (uint256 id);\n}\n"
    },
    "NotionalGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Types.sol\";\nimport \"AggregatorV2V3Interface.sol\";\nimport \"NotionalGovernance.sol\";\nimport \"IRewarder.sol\";\nimport \"ILendingPool.sol\";\n\ninterface NotionalGovernance {\n    event ListCurrency(uint16 newCurrencyId);\n    event UpdateETHRate(uint16 currencyId);\n    event UpdateAssetRate(uint16 currencyId);\n    event UpdateCashGroup(uint16 currencyId);\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\n    event UpdateDepositParameters(uint16 currencyId);\n    event UpdateInitializationParameters(uint16 currencyId);\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\n    event UpdateTokenCollateralParameters(uint16 currencyId);\n    event UpdateGlobalTransferOperator(address operator, bool approved);\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\n    event UpdateSecondaryIncentiveRewarder(uint16 indexed currencyId, address rewarder);\n    event UpdateLendingPool(address pool);\n\n    function transferOwnership(address newOwner, bool direct) external;\n\n    function claimOwnership() external;\n\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\n\n    function listCurrency(\n        TokenStorage calldata assetToken,\n        TokenStorage calldata underlyingToken,\n        AggregatorV2V3Interface rateOracle,\n        bool mustInvert,\n        uint8 buffer,\n        uint8 haircut,\n        uint8 liquidationDiscount\n    ) external returns (uint16 currencyId);\n\n    function updateMaxCollateralBalance(\n        uint16 currencyId,\n        uint72 maxCollateralBalanceInternalPrecision\n    ) external;\n\n    function enableCashGroup(\n        uint16 currencyId,\n        AssetRateAdapter assetRateOracle,\n        CashGroupSettings calldata cashGroup,\n        string calldata underlyingName,\n        string calldata underlyingSymbol\n    ) external;\n\n    function updateDepositParameters(\n        uint16 currencyId,\n        uint32[] calldata depositShares,\n        uint32[] calldata leverageThresholds\n    ) external;\n\n    function updateInitializationParameters(\n        uint16 currencyId,\n        uint32[] calldata annualizedAnchorRates,\n        uint32[] calldata proportions\n    ) external;\n\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\n\n    function updateTokenCollateralParameters(\n        uint16 currencyId,\n        uint8 residualPurchaseIncentive10BPS,\n        uint8 pvHaircutPercentage,\n        uint8 residualPurchaseTimeBufferHours,\n        uint8 cashWithholdingBuffer10BPS,\n        uint8 liquidationHaircutPercentage\n    ) external;\n\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\n\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\n\n    function updateETHRate(\n        uint16 currencyId,\n        AggregatorV2V3Interface rateOracle,\n        bool mustInvert,\n        uint8 buffer,\n        uint8 haircut,\n        uint8 liquidationDiscount\n    ) external;\n\n    function updateGlobalTransferOperator(address operator, bool approved) external;\n\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\n\n    function setLendingPool(ILendingPool pool) external;\n\n    function setSecondaryIncentiveRewarder(uint16 currencyId, IRewarder rewarder) external;\n}\n"
    },
    "IRewarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\n\ninterface IRewarder {\n    function claimRewards(\n        address account,\n        uint16 currencyId,\n        uint256 nTokenBalanceBefore,\n        uint256 nTokenBalanceAfter,\n        int256  netNTokenSupplyChange,\n        uint256 NOTETokensClaimed\n    ) external;\n}"
    },
    "ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nstruct LendingPoolStorage {\n  ILendingPool lendingPool;\n}\n\ninterface ILendingPool {\n\n  /**\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to Address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   **/\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @dev Returns the normalized income normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n   * @dev Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state of the reserve\n   **/\n  function getReserveData(address asset) external view returns (ReserveData memory);\n\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    //tokens addresses\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint8 id;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: Reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60-63: reserved\n    //bit 64-79: reserve factor\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    uint256 data;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n}\n"
    },
    "NotionalCalculations.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Types.sol\";\n\ninterface NotionalCalculations {\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\n        external\n        view\n        returns (uint256);\n\n    function getfCashAmountGivenCashAmount(\n        uint16 currencyId,\n        int88 netCashToAccount,\n        uint256 marketIndex,\n        uint256 blockTime\n    ) external view returns (int256);\n\n    function getCashAmountGivenfCashAmount(\n        uint16 currencyId,\n        int88 fCashAmount,\n        uint256 marketIndex,\n        uint256 blockTime\n    ) external view returns (int256, int256);\n\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\n        external\n        view\n        returns (uint256);\n\n    function getPresentfCashValue(\n        uint16 currencyId,\n        uint256 maturity,\n        int256 notional,\n        uint256 blockTime,\n        bool riskAdjusted\n    ) external view returns (int256 presentValue);\n}\n"
    },
    "NotionalViews.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Types.sol\";\n\ninterface NotionalViews {\n    function getMaxCurrencyId() external view returns (uint16);\n\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\n\n    function getCurrency(uint16 currencyId)\n        external\n        view\n        returns (Token memory assetToken, Token memory underlyingToken);\n\n    function getRateStorage(uint16 currencyId)\n        external\n        view\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\n\n    function getCurrencyAndRates(uint16 currencyId)\n        external\n        view\n        returns (\n            Token memory assetToken,\n            Token memory underlyingToken,\n            ETHRate memory ethRate,\n            AssetRateParameters memory assetRate\n        );\n\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\n\n    function getCashGroupAndAssetRate(uint16 currencyId)\n        external\n        view\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\n\n    function getInitializationParameters(uint16 currencyId)\n        external\n        view\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\n\n    function getDepositParameters(uint16 currencyId)\n        external\n        view\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\n\n    function nTokenAddress(uint16 currencyId) external view returns (address);\n\n    function getNoteToken() external view returns (address);\n\n    function getOwnershipStatus() external view returns (address owner, address pendingOwner);\n\n    function getGlobalTransferOperatorStatus(address operator)\n        external\n        view\n        returns (bool isAuthorized);\n\n    function getAuthorizedCallbackContractStatus(address callback)\n        external\n        view\n        returns (bool isAuthorized);\n\n    function getSecondaryIncentiveRewarder(uint16 currencyId)\n        external\n        view\n        returns (address incentiveRewarder);\n\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\n        external\n        view\n        returns (AssetRateParameters memory);\n\n    function getMarket(\n        uint16 currencyId,\n        uint256 maturity,\n        uint256 settlementDate\n    ) external view returns (MarketParameters memory);\n\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\n\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\n        external\n        view\n        returns (MarketParameters[] memory);\n\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\n\n    function getNTokenPortfolio(address tokenAddress)\n        external\n        view\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\n\n    function getNTokenAccount(address tokenAddress)\n        external\n        view\n        returns (\n            uint16 currencyId,\n            uint256 totalSupply,\n            uint256 incentiveAnnualEmissionRate,\n            uint256 lastInitializedTime,\n            bytes5 nTokenParameters,\n            int256 cashBalance,\n            uint256 accumulatedNOTEPerNToken,\n            uint256 lastAccumulatedTime\n        );\n\n    function getAccount(address account)\n        external\n        view\n        returns (\n            AccountContext memory accountContext,\n            AccountBalance[] memory accountBalances,\n            PortfolioAsset[] memory portfolio\n        );\n\n    function getAccountContext(address account) external view returns (AccountContext memory);\n\n    function getAccountBalance(uint16 currencyId, address account)\n        external\n        view\n        returns (\n            int256 cashBalance,\n            int256 nTokenBalance,\n            uint256 lastClaimTime\n        );\n\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\n\n    function getfCashNotional(\n        address account,\n        uint16 currencyId,\n        uint256 maturity\n    ) external view returns (int256);\n\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\n\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\n\n    function getTreasuryManager() external view returns (address);\n\n    function getReserveBuffer(uint16 currencyId) external view returns (uint256);\n\n    function getLendingPool() external view returns (address);\n}\n"
    },
    "NotionalTreasury.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\ninterface NotionalTreasury {\n\n    /// @notice Emitted when reserve balance is updated\n    event ReserveBalanceUpdated(uint16 indexed currencyId, int256 newBalance);\n    /// @notice Emitted when reserve balance is harvested\n    event ExcessReserveBalanceHarvested(uint16 indexed currencyId, int256 harvestAmount);\n    /// @dev Emitted when treasury manager is updated\n    event TreasuryManagerChanged(address indexed previousManager, address indexed newManager);\n    /// @dev Emitted when reserve buffer value is updated\n    event ReserveBufferUpdated(uint16 currencyId, uint256 bufferAmount);\n\n    function claimCOMPAndTransfer(address[] calldata ctokens) external returns (uint256);\n\n    function transferReserveToTreasury(uint16[] calldata currencies)\n        external\n        returns (uint256[] memory);\n\n    function setTreasuryManager(address manager) external;\n\n    function setReserveBuffer(uint16 currencyId, uint256 amount) external;\n\n    function setReserveCashBalance(uint16 currencyId, int256 reserveBalance) external;\n}\n"
    },
    "CErc20Interface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.7.0;\n\nimport \"CTokenInterface.sol\";\n\ninterface CErc20Interface {\n\n    /*** User Interface ***/\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\n}\n"
    },
    "CTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.7.0;\n\ninterface CTokenInterface {\n\n    /*** User Interface ***/\n\n    function underlying() external view returns (address);\n    function transfer(address dst, uint amount) external returns (bool);\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n    function approve(address spender, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n    function borrowRatePerBlock() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function borrowBalanceStored(address account) external view returns (uint);\n    function exchangeRateCurrent() external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function getCash() external view returns (uint);\n    function accrueInterest() external returns (uint);\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\n}"
    },
    "CEtherInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.7.0;\n\ninterface CEtherInterface {\n    function mint() external payable;\n}"
    },
    "WETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\n\nimport \"IERC20.sol\";\n\ninterface WETH9 is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "IwstETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\n\nimport \"IERC20.sol\";\n\ninterface IwstETH is IERC20 {\n    function stEthPerToken() external view returns (uint256);\n    function wrap(uint256 _stETHAmount) external returns (uint256);\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\n}\n"
    },
    "NotionalV2LiquidatorStorageLayoutV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >0.7.0;\n\ncontract NotionalV2LiquidatorStorageLayoutV1 {\n    mapping(address => address) internal underlyingToCToken;\n    address public owner;\n    uint16 public ifCashCurrencyId;\n}\n"
    },
    "DateTime.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\npragma abicoder v2;\n\nimport \"Constants.sol\";\nimport \"SafeMath.sol\";\n\nlibrary DateTime {\n    using SafeMath for uint256;\n\n    /// @notice Returns the current reference time which is how all the AMM dates are calculated.\n    function getReferenceTime(uint256 blockTime) internal pure returns (uint256) {\n        require(blockTime >= Constants.QUARTER);\n        return blockTime - (blockTime % Constants.QUARTER);\n    }\n\n    /// @notice Truncates a date to midnight UTC time\n    function getTimeUTC0(uint256 time) internal pure returns (uint256) {\n        require(time >= Constants.DAY);\n        return time - (time % Constants.DAY);\n    }\n\n    /// @notice These are the predetermined market offsets for trading\n    /// @dev Markets are 1-indexed because the 0 index means that no markets are listed for the cash group.\n    function getTradedMarket(uint256 index) internal pure returns (uint256) {\n        if (index == 1) return Constants.QUARTER;\n        if (index == 2) return 2 * Constants.QUARTER;\n        if (index == 3) return Constants.YEAR;\n        if (index == 4) return 2 * Constants.YEAR;\n        if (index == 5) return 5 * Constants.YEAR;\n        if (index == 6) return 10 * Constants.YEAR;\n        if (index == 7) return 20 * Constants.YEAR;\n\n        revert(\"Invalid index\");\n    }\n\n    /// @notice Determines if the maturity falls on one of the valid on chain market dates.\n    function isValidMarketMaturity(\n        uint256 maxMarketIndex,\n        uint256 maturity,\n        uint256 blockTime\n    ) internal pure returns (bool) {\n        require(maxMarketIndex > 0, \"CG: no markets listed\");\n        require(maxMarketIndex <= Constants.MAX_TRADED_MARKET_INDEX, \"CG: market index bound\");\n\n        if (maturity % Constants.QUARTER != 0) return false;\n        uint256 tRef = DateTime.getReferenceTime(blockTime);\n\n        for (uint256 i = 1; i <= maxMarketIndex; i++) {\n            if (maturity == tRef.add(DateTime.getTradedMarket(i))) return true;\n        }\n\n        return false;\n    }\n\n    /// @notice Determines if an idiosyncratic maturity is valid and returns the bit reference that is the case.\n    function isValidMaturity(\n        uint256 maxMarketIndex,\n        uint256 maturity,\n        uint256 blockTime\n    ) internal pure returns (bool) {\n        uint256 tRef = DateTime.getReferenceTime(blockTime);\n        uint256 maxMaturity = tRef.add(DateTime.getTradedMarket(maxMarketIndex));\n        // Cannot trade past max maturity\n        if (maturity > maxMaturity) return false;\n\n        // prettier-ignore\n        (/* */, bool isValid) = DateTime.getBitNumFromMaturity(blockTime, maturity);\n        return isValid;\n    }\n\n    /// @notice Returns the market index for a given maturity, if the maturity is idiosyncratic\n    /// will return the nearest market index that is larger than the maturity.\n    /// @return uint marketIndex, bool isIdiosyncratic\n    function getMarketIndex(\n        uint256 maxMarketIndex,\n        uint256 maturity,\n        uint256 blockTime\n    ) internal pure returns (uint256, bool) {\n        require(maxMarketIndex > 0, \"CG: no markets listed\");\n        require(maxMarketIndex <= Constants.MAX_TRADED_MARKET_INDEX, \"CG: market index bound\");\n        uint256 tRef = DateTime.getReferenceTime(blockTime);\n\n        for (uint256 i = 1; i <= maxMarketIndex; i++) {\n            uint256 marketMaturity = tRef.add(DateTime.getTradedMarket(i));\n            // If market matches then is not idiosyncratic\n            if (marketMaturity == maturity) return (i, false);\n            // Returns the market that is immediately greater than the maturity\n            if (marketMaturity > maturity) return (i, true);\n        }\n\n        revert(\"CG: no market found\");\n    }\n\n    /// @notice Given a bit number and the reference time of the first bit, returns the bit number\n    /// of a given maturity.\n    /// @return bitNum and a true or false if the maturity falls on the exact bit\n    function getBitNumFromMaturity(uint256 blockTime, uint256 maturity)\n        internal\n        pure\n        returns (uint256, bool)\n    {\n        uint256 blockTimeUTC0 = getTimeUTC0(blockTime);\n\n        // Maturities must always divide days evenly\n        if (maturity % Constants.DAY != 0) return (0, false);\n        // Maturity cannot be in the past\n        if (blockTimeUTC0 >= maturity) return (0, false);\n\n        // Overflow check done above\n        // daysOffset has no remainders, checked above\n        uint256 daysOffset = (maturity - blockTimeUTC0) / Constants.DAY;\n\n        // These if statements need to fall through to the next one\n        if (daysOffset <= Constants.MAX_DAY_OFFSET) {\n            return (daysOffset, true);\n        } else if (daysOffset <= Constants.MAX_WEEK_OFFSET) {\n            // (daysOffset - MAX_DAY_OFFSET) is the days overflow into the week portion, must be > 0\n            // (blockTimeUTC0 % WEEK) / DAY is the offset into the week portion\n            // This returns the offset from the previous max offset in days\n            uint256 offsetInDays =\n                daysOffset -\n                    Constants.MAX_DAY_OFFSET +\n                    (blockTimeUTC0 % Constants.WEEK) /\n                    Constants.DAY;\n            \n            return (\n                // This converts the offset in days to its corresponding bit position, truncating down\n                // if it does not divide evenly into DAYS_IN_WEEK\n                Constants.WEEK_BIT_OFFSET + offsetInDays / Constants.DAYS_IN_WEEK,\n                (offsetInDays % Constants.DAYS_IN_WEEK) == 0\n            );\n        } else if (daysOffset <= Constants.MAX_MONTH_OFFSET) {\n            uint256 offsetInDays =\n                daysOffset -\n                    Constants.MAX_WEEK_OFFSET +\n                    (blockTimeUTC0 % Constants.MONTH) /\n                    Constants.DAY;\n\n            return (\n                Constants.MONTH_BIT_OFFSET + offsetInDays / Constants.DAYS_IN_MONTH,\n                (offsetInDays % Constants.DAYS_IN_MONTH) == 0\n            );\n        } else if (daysOffset <= Constants.MAX_QUARTER_OFFSET) {\n            uint256 offsetInDays =\n                daysOffset -\n                    Constants.MAX_MONTH_OFFSET +\n                    (blockTimeUTC0 % Constants.QUARTER) /\n                    Constants.DAY;\n\n            return (\n                Constants.QUARTER_BIT_OFFSET + offsetInDays / Constants.DAYS_IN_QUARTER,\n                (offsetInDays % Constants.DAYS_IN_QUARTER) == 0\n            );\n        }\n\n        // This is the maximum 1-indexed bit num, it is never valid because it is beyond the 20\n        // year max maturity\n        return (256, false);\n    }\n\n    /// @notice Given a bit number and a block time returns the maturity that the bit number\n    /// should reference. Bit numbers are one indexed.\n    function getMaturityFromBitNum(uint256 blockTime, uint256 bitNum)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(bitNum != 0); // dev: cash group get maturity from bit num is zero\n        require(bitNum <= 256); // dev: cash group get maturity from bit num overflow\n        uint256 blockTimeUTC0 = getTimeUTC0(blockTime);\n        uint256 firstBit;\n\n        if (bitNum <= Constants.WEEK_BIT_OFFSET) {\n            return blockTimeUTC0 + bitNum * Constants.DAY;\n        } else if (bitNum <= Constants.MONTH_BIT_OFFSET) {\n            firstBit =\n                blockTimeUTC0 +\n                Constants.MAX_DAY_OFFSET * Constants.DAY -\n                // This backs up to the day that is divisible by a week\n                (blockTimeUTC0 % Constants.WEEK);\n            return firstBit + (bitNum - Constants.WEEK_BIT_OFFSET) * Constants.WEEK;\n        } else if (bitNum <= Constants.QUARTER_BIT_OFFSET) {\n            firstBit =\n                blockTimeUTC0 +\n                Constants.MAX_WEEK_OFFSET * Constants.DAY -\n                (blockTimeUTC0 % Constants.MONTH);\n            return firstBit + (bitNum - Constants.MONTH_BIT_OFFSET) * Constants.MONTH;\n        } else {\n            firstBit =\n                blockTimeUTC0 +\n                Constants.MAX_MONTH_OFFSET * Constants.DAY -\n                (blockTimeUTC0 % Constants.QUARTER);\n            return firstBit + (bitNum - Constants.QUARTER_BIT_OFFSET) * Constants.QUARTER;\n        }\n    }\n}\n"
    },
    "Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\n\n/// @title All shared constants for the Notional system should be declared here.\nlibrary Constants {\n    uint8 internal constant CETH_DECIMAL_PLACES = 8;\n\n    // Token precision used for all internal balances, TokenHandler library ensures that we\n    // limit the dust amount caused by precision mismatches\n    int256 internal constant INTERNAL_TOKEN_PRECISION = 1e8;\n    uint256 internal constant INCENTIVE_ACCUMULATION_PRECISION = 1e18;\n\n    // ETH will be initialized as the first currency\n    uint256 internal constant ETH_CURRENCY_ID = 1;\n    uint8 internal constant ETH_DECIMAL_PLACES = 18;\n    int256 internal constant ETH_DECIMALS = 1e18;\n    // Used to prevent overflow when converting decimal places to decimal precision values via\n    // 10**decimalPlaces. This is a safe value for int256 and uint256 variables. We apply this\n    // constraint when storing decimal places in governance.\n    uint256 internal constant MAX_DECIMAL_PLACES = 36;\n\n    // Address of the reserve account\n    address internal constant RESERVE = address(0);\n\n    // Most significant bit\n    bytes32 internal constant MSB =\n        0x8000000000000000000000000000000000000000000000000000000000000000;\n\n    // Each bit set in this mask marks where an active market should be in the bitmap\n    // if the first bit refers to the reference time. Used to detect idiosyncratic\n    // fcash in the nToken accounts\n    bytes32 internal constant ACTIVE_MARKETS_MASK = (\n        MSB >> ( 90 - 1) | // 3 month\n        MSB >> (105 - 1) | // 6 month\n        MSB >> (135 - 1) | // 1 year\n        MSB >> (147 - 1) | // 2 year\n        MSB >> (183 - 1) | // 5 year\n        MSB >> (211 - 1) | // 10 year\n        MSB >> (251 - 1)   // 20 year\n    );\n\n    // Basis for percentages\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\n    // Max number of traded markets, also used as the maximum number of assets in a portfolio array\n    uint256 internal constant MAX_TRADED_MARKET_INDEX = 7;\n    // Max number of fCash assets in a bitmap, this is based on the gas costs of calculating free collateral\n    // for a bitmap portfolio\n    uint256 internal constant MAX_BITMAP_ASSETS = 20;\n    uint256 internal constant FIVE_MINUTES = 300;\n\n    // Internal date representations, note we use a 6/30/360 week/month/year convention here\n    uint256 internal constant DAY = 86400;\n    // We use six day weeks to ensure that all time references divide evenly\n    uint256 internal constant WEEK = DAY * 6;\n    uint256 internal constant MONTH = WEEK * 5;\n    uint256 internal constant QUARTER = MONTH * 3;\n    uint256 internal constant YEAR = QUARTER * 4;\n    \n    // These constants are used in DateTime.sol\n    uint256 internal constant DAYS_IN_WEEK = 6;\n    uint256 internal constant DAYS_IN_MONTH = 30;\n    uint256 internal constant DAYS_IN_QUARTER = 90;\n\n    // Offsets for each time chunk denominated in days\n    uint256 internal constant MAX_DAY_OFFSET = 90;\n    uint256 internal constant MAX_WEEK_OFFSET = 360;\n    uint256 internal constant MAX_MONTH_OFFSET = 2160;\n    uint256 internal constant MAX_QUARTER_OFFSET = 7650;\n\n    // Offsets for each time chunk denominated in bits\n    uint256 internal constant WEEK_BIT_OFFSET = 90;\n    uint256 internal constant MONTH_BIT_OFFSET = 135;\n    uint256 internal constant QUARTER_BIT_OFFSET = 195;\n\n    // This is a constant that represents the time period that all rates are normalized by, 360 days\n    uint256 internal constant IMPLIED_RATE_TIME = 360 * DAY;\n    // Number of decimal places that rates are stored in, equals 100%\n    int256 internal constant RATE_PRECISION = 1e9;\n    // One basis point in RATE_PRECISION terms\n    uint256 internal constant BASIS_POINT = uint256(RATE_PRECISION / 10000);\n    // Used to when calculating the amount to deleverage of a market when minting nTokens\n    uint256 internal constant DELEVERAGE_BUFFER = 300 * BASIS_POINT;\n    // Used for scaling cash group factors\n    uint256 internal constant FIVE_BASIS_POINTS = 5 * BASIS_POINT;\n    // Used for residual purchase incentive and cash withholding buffer\n    uint256 internal constant TEN_BASIS_POINTS = 10 * BASIS_POINT;\n\n    // This is the ABDK64x64 representation of RATE_PRECISION\n    // RATE_PRECISION_64x64 = ABDKMath64x64.fromUint(RATE_PRECISION)\n    int128 internal constant RATE_PRECISION_64x64 = 0x3b9aca000000000000000000;\n    int128 internal constant LOG_RATE_PRECISION_64x64 = 382276781265598821176;\n    // Limit the market proportion so that borrowing cannot hit extremely high interest rates\n    int256 internal constant MAX_MARKET_PROPORTION = RATE_PRECISION * 99 / 100;\n\n    uint8 internal constant FCASH_ASSET_TYPE = 1;\n    // Liquidity token asset types are 1 + marketIndex (where marketIndex is 1-indexed)\n    uint8 internal constant MIN_LIQUIDITY_TOKEN_INDEX = 2;\n    uint8 internal constant MAX_LIQUIDITY_TOKEN_INDEX = 8;\n\n    // Used for converting bool to bytes1, solidity does not have a native conversion\n    // method for this\n    bytes1 internal constant BOOL_FALSE = 0x00;\n    bytes1 internal constant BOOL_TRUE = 0x01;\n\n    // Account context flags\n    bytes1 internal constant HAS_ASSET_DEBT = 0x01;\n    bytes1 internal constant HAS_CASH_DEBT = 0x02;\n    bytes2 internal constant ACTIVE_IN_PORTFOLIO = 0x8000;\n    bytes2 internal constant ACTIVE_IN_BALANCES = 0x4000;\n    bytes2 internal constant UNMASK_FLAGS = 0x3FFF;\n    uint16 internal constant MAX_CURRENCIES = uint16(UNMASK_FLAGS);\n\n    // Equal to 100% of all deposit amounts for nToken liquidity across fCash markets.\n    int256 internal constant DEPOSIT_PERCENT_BASIS = 1e8;\n\n    // nToken Parameters: there are offsets in the nTokenParameters bytes6 variable returned\n    // in nTokenHandler. Each constant represents a position in the byte array.\n    uint8 internal constant LIQUIDATION_HAIRCUT_PERCENTAGE = 0;\n    uint8 internal constant CASH_WITHHOLDING_BUFFER = 1;\n    uint8 internal constant RESIDUAL_PURCHASE_TIME_BUFFER = 2;\n    uint8 internal constant PV_HAIRCUT_PERCENTAGE = 3;\n    uint8 internal constant RESIDUAL_PURCHASE_INCENTIVE = 4;\n\n    // Liquidation parameters\n    // Default percentage of collateral that a liquidator is allowed to liquidate, will be higher if the account\n    // requires more collateral to be liquidated\n    int256 internal constant DEFAULT_LIQUIDATION_PORTION = 40;\n    // Percentage of local liquidity token cash claim delivered to the liquidator for liquidating liquidity tokens\n    int256 internal constant TOKEN_REPO_INCENTIVE_PERCENT = 30;\n\n    // Pause Router liquidation enabled states\n    bytes1 internal constant LOCAL_CURRENCY_ENABLED = 0x01;\n    bytes1 internal constant COLLATERAL_CURRENCY_ENABLED = 0x02;\n    bytes1 internal constant LOCAL_FCASH_ENABLED = 0x04;\n    bytes1 internal constant CROSS_CURRENCY_FCASH_ENABLED = 0x08;\n}\n"
    },
    "SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "SafeInt256.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.7.0;\n\nimport \"Constants.sol\";\n\nlibrary SafeInt256 {\n    int256 private constant _INT256_MIN = type(int256).min;\n\n    /// @dev Returns the multiplication of two signed integers, reverting on\n    /// overflow.\n\n    /// Counterpart to Solidity's `*` operator.\n\n    /// Requirements:\n\n    /// - Multiplication cannot overflow.\n\n    function mul(int256 a, int256 b) internal pure returns (int256 c) {\n        c = a * b;\n        if (a == -1) require (b == 0 || c / b == a);\n        else require (a == 0 || c / a == b);\n    }\n\n    /// @dev Returns the integer division of two signed integers. Reverts on\n    /// division by zero. The result is rounded towards zero.\n\n    /// Counterpart to Solidity's `/` operator. Note: this function uses a\n    /// `revert` opcode (which leaves remaining gas untouched) while Solidity\n    /// uses an invalid opcode to revert (consuming all remaining gas).\n\n    /// Requirements:\n\n    /// - The divisor cannot be zero.\n\n    function div(int256 a, int256 b) internal pure returns (int256 c) {\n        require(!(b == -1 && a == _INT256_MIN)); // dev: int256 div overflow\n        // NOTE: solidity will automatically revert on divide by zero\n        c = a / b;\n    }\n\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        //  taken from uniswap v3\n        require((z = x - y) <= x == (y >= 0));\n    }\n\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    function neg(int256 x) internal pure returns (int256 y) {\n        return mul(-1, x);\n    }\n\n    function abs(int256 x) internal pure returns (int256) {\n        if (x < 0) return neg(x);\n        else return x;\n    }\n\n    function subNoNeg(int256 x, int256 y) internal pure returns (int256 z) {\n        z = sub(x, y);\n        require(z >= 0); // dev: int256 sub to negative\n\n        return z;\n    }\n\n    /// @dev Calculates x * RATE_PRECISION / y while checking overflows\n    function divInRatePrecision(int256 x, int256 y) internal pure returns (int256) {\n        return div(mul(x, Constants.RATE_PRECISION), y);\n    }\n\n    /// @dev Calculates x * y / RATE_PRECISION while checking overflows\n    function mulInRatePrecision(int256 x, int256 y) internal pure returns (int256) {\n        return div(mul(x, y), Constants.RATE_PRECISION);\n    }\n\n    function toUint(int256 x) internal pure returns (uint256) {\n        require(x >= 0);\n        return uint256(x);\n    }\n\n    function toInt(uint256 x) internal pure returns (int256) {\n        require (x <= uint256(type(int256).max)); // dev: toInt overflow\n        return int256(x);\n    }\n\n    function max(int256 x, int256 y) internal pure returns (int256) {\n        return x > y ? x : y;\n    }\n\n    function min(int256 x, int256 y) internal pure returns (int256) {\n        return x < y ? x : y;\n    }\n}\n"
    },
    "NotionalV2UniV3SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"NotionalV2FlashLiquidator.sol\";\nimport \"ISwapRouter.sol\";\nimport \"IERC20.sol\";\n\nabstract contract NotionalV2UniV3SwapRouter {\n    ISwapRouter public immutable EXCHANGE;\n\n    constructor(ISwapRouter exchange_) {\n        EXCHANGE = exchange_;\n    }\n\n    function _executeDexTrade(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        bytes memory params\n    ) internal returns (uint256) {\n        // prettier-ignore\n        (\n            bytes memory path,\n            uint256 deadline\n        ) = abi.decode(params, (bytes, uint256));\n\n        ISwapRouter.ExactInputParams memory swapParams = ISwapRouter.ExactInputParams(\n            path,\n            address(this),\n            deadline,\n            amountIn,\n            amountOutMin\n        );\n\n       return ISwapRouter(EXCHANGE).exactInput(swapParams);\n    }\n}\n"
    },
    "ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"IUniswapV3SwapCallback.sol\";\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.7.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "IFlashLender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface IFlashLender {\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n}\n"
    },
    "IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface IFlashLoanReceiver {\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n\n    //   function ADDRESSES_PROVIDER() external view returns (address);\n\n    //   function LENDING_POOL() external view returns (address);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "NotionalV2FlashLiquidator.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}