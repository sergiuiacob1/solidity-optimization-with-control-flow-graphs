{{
  "language": "Solidity",
  "sources": {
    "BasketMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.12;\n\nimport {CERC20} from \"CERC20.sol\";\nimport {IRecipe} from \"IRecipe.sol\";\nimport {SushiBar} from \"SushiBar.sol\";\nimport {VaultAPI} from \"VaultAPI.sol\";\nimport {IBasketFacet} from \"IBasketFacet.sol\";\nimport {IBasketLogic} from \"IBasketLogic.sol\";\nimport {ISwapRouter} from \"ISwapRouter.sol\";\nimport {ICurvePool_2Token} from \"ICurvePool_2Token.sol\";\nimport {IERC20} from \"IERC20.sol\";\nimport {SafeERC20} from \"SafeERC20.sol\";\nimport {IUniswapV2Router01} from \"IUniswapV2Router01.sol\";\n\n/// @title BasketMigrator\n/// @author dantop114\n/// @notice BasketDAO indexes migration contract.\ncontract BasketMigrator {\n    using SafeERC20 for IERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                    Constants and immutables\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice BDI contract address.\n    address public constant BDI = 0x0309c98B1bffA350bcb3F9fB9780970CA32a5060;\n\n    /// @notice DEFI++ contract address.\n    address public constant DPP = 0x8D1ce361eb68e9E05573443C407D4A3Bed23B033;\n\n    /// @notice WETH contract address.\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @notice yvCurveLink address.\n    address internal constant yvCurveLink =\n        0xf2db9a7c0ACd427A680D640F02d90f6186E71725;\n\n    /// @notice yvUNI address.\n    address internal constant yvUNI =\n        0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42;\n\n    /// @notice yvYFI address.\n    address internal constant yvYFI =\n        0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1;\n\n    /// @notice yvSNX address.\n    address internal constant yvSNX =\n        0xF29AE508698bDeF169B89834F76704C3B205aedf;\n\n    /// @notice cCOMP address.\n    address internal constant cCOMP =\n        0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4;\n\n    /// @notice xSUSHI address.\n    address internal constant xSUSHI =\n        0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\n\n    /// @notice Curve Liquidity Pool LINK/sLINK\n    address internal constant curvePoolLINK =\n        0xF178C0b5Bb7e7aBF4e12A4838C7b7c5bA2C623c0;\n\n    /// @notice Curve LP Token LINK/sLINK\n    address internal constant crvLINK =\n        0xcee60cFa923170e4f8204AE08B4fA6A3F5656F3a;\n\n    /// @notice Governance address for this contract.\n    address public immutable gov;\n\n    /*///////////////////////////////////////////////////////////////\n                    Structs declarations\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Swap struct.\n    /// @param v3 boolean telling us if the swap is done on UniswapV3\n    /// @param data abi.encode of Router and swap data.\n    struct Swap {\n        bool v3;\n        bytes data;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    Errors definition\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Error emitted when users try to deposit in state != 0.\n    error EntryClosed();\n\n    /// @notice Error emitted when contract is not in state 1.\n    error NotBaking();\n\n    /// @notice Error emitted when a contract is not in state 2.\n    error NotBaked();\n\n    /// @notice Error emitted when the user did not deposit.\n    error NoDeposit();\n\n    /// @notice Error emitted when amount to deposit is zero.\n    error AmountZero();\n\n    /// @notice Error emitted when caller is not the governance address.\n    error NotGovernance();\n\n    /// @notice Error emitted when the burn of shares fails.\n    error BurnFailed();\n\n    /// @notice Error emitted when the deadline to swap is reached.\n    error DeadlineReached();\n\n    /// @notice Error emitted when the baking fails.\n    error BakeFailed();\n\n    /*///////////////////////////////////////////////////////////////\n                    Events definition\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Event emitted when a user deposits.\n    event Entry(address indexed who, uint256 amount);\n\n    /// @notice Event emitted when the deposits are closed.\n    event Closed();\n\n    /*///////////////////////////////////////////////////////////////\n                          Storage\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Exchange rate at settlement.\n    uint256 public rate;\n\n    /// @notice State of the contract.\n    /// @dev The state is an uint8 acting as an enum:\n    ///         - 0: accepting deposits (open)\n    ///         - 1: no more deposits accepted (baking)\n    ///         - 2: users can withdraw (done)\n    uint8 public state;\n\n    /// @notice Total deposited in the contract.\n    uint256 public totalDeposits;\n\n    /// @notice Deposited amount per user.\n    mapping(address => uint256) public deposits;\n\n    /*///////////////////////////////////////////////////////////////\n                          Constructor\n    ///////////////////////////////////////////////////////////////*/\n\n    constructor(address _gov) {\n        gov = _gov;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       State changing logic\n    ///////////////////////////////////////////////////////////////*/\n\n    function closeEntry() external {\n        if (msg.sender != gov) revert NotGovernance();\n        if (state != 0) revert EntryClosed();\n\n        state = 1;\n\n        emit Closed();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    User deposit/redeem logic\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Let users enter the migration process.\n    /// @param amount Amount of BDI to take from the user.\n    function enter(uint256 amount) external {\n        if (state != 0) revert EntryClosed();\n        if (amount == 0) revert AmountZero();\n\n        totalDeposits += amount;\n        deposits[msg.sender] += amount;\n        IERC20(BDI).safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Entry(msg.sender, amount);\n    }\n\n    /// @notice Let users withdraw their share.\n    function exit() external {\n        if (state != 2) revert NotBaked();\n\n        uint256 deposited = deposits[msg.sender];\n\n        if (deposited == 0) revert NoDeposit();\n\n        deposits[msg.sender] = 0;\n        uint256 amount = (rate * deposited) / 1e18;\n        IERC20(DPP).transfer(msg.sender, amount);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        Burn, unwrap and swap\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Burns all BDI present in the contract and unwraps for underlying.\n    function burnAndUnwrap() external {\n        if (state != 1) revert NotBaking();\n        if (msg.sender != gov) revert NotGovernance();\n\n        // Burn BDI.\n        IBasketLogic(BDI).burn(IERC20(BDI).balanceOf(address(this)));\n\n        // Unwrap Yearn vaults' shares.\n        VaultAPI(yvSNX).withdraw();\n        VaultAPI(yvUNI).withdraw();\n        VaultAPI(yvYFI).withdraw();\n        VaultAPI(yvCurveLink).withdraw();\n\n        // Unwrap LINK from Curve Pool\n        uint256 bal = IERC20(crvLINK).balanceOf(address(this));\n        ICurvePool_2Token(curvePoolLINK).remove_liquidity_one_coin(bal, 0, 0);\n\n        // Unwrap Compound cTokens.\n        CERC20(cCOMP).redeem(IERC20(cCOMP).balanceOf(address(this)));\n\n        // Unwrap xSUSHI\n        SushiBar(xSUSHI).leave(IERC20(xSUSHI).balanceOf(address(this)));\n    }\n\n    /// @notice Execute swaps.\n    /// @param swaps A list of swaps (v2 or v3) encoded in structs.\n    /// @param deadline A deadline for the swaps to happen.\n    function execSwaps(Swap[] calldata swaps, uint256 deadline) external {\n        if (state != 1) revert NotBaking();\n        if (msg.sender != gov) revert NotGovernance();\n        if (deadline <= block.timestamp) revert DeadlineReached();\n\n        for (uint256 i; i < swaps.length; ) {\n            if (swaps[i].v3) {\n                _swapV3GivenIn(swaps[i]);\n            } else {\n                _swapV2GivenIn(swaps[i]);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Bake it all.\n    /// @param amountOut Amount to bake.\n    /// @param maxAmountIn Maximum amount of WETH to use.\n    /// @param deadline A deadline for the bake to occour.\n    /// @param approvals Indicates if approvals for underlyings should be done.\n    /// @param swaps Swaps from WETH to underlyings.\n    function bake(\n        uint256 amountOut,\n        uint256 maxAmountIn,\n        uint256 deadline,\n        bool approvals,\n        Swap[] calldata swaps\n    ) external payable {\n        if (state != 1) revert NotBaking();\n        if (msg.sender != gov) revert NotGovernance();\n        if (deadline <= block.timestamp) revert DeadlineReached();\n\n        if (msg.value != 0) {\n            // help the bake by sending some ETH\n            (bool succ, ) = WETH.call{value: msg.value}(\"\");\n            if (!succ) revert();\n        }\n\n        uint256 balanceIn = IERC20(WETH).balanceOf(address(this));\n\n        // Execute swaps\n        _execSwapsGivenOut(swaps);\n\n        // Execute approvals if needed\n        if (approvals) _execApprovalsForBasket();\n\n        // Join DEFI++\n        IBasketFacet(DPP).joinPool(amountOut);\n\n        // Check amount used is less than required\n        uint256 usedIn = balanceIn - IERC20(WETH).balanceOf(address(this));\n\n        if (usedIn >= maxAmountIn) revert BakeFailed();\n\n        if (msg.value != 0) {\n            balanceIn = IERC20(WETH).balanceOf(address(this));\n            uint256 refund = (balanceIn >= msg.value) ? msg.value : balanceIn;\n            if (refund != 0) IERC20(WETH).transfer(msg.sender, refund);\n        }\n    }\n\n    /// @notice Settle the migration and broadcast exchange rate.\n    function settle(bool finalRate) external {\n        if (state != 1) revert NotBaking();\n        if (msg.sender != gov) revert NotGovernance();\n        if (finalRate) state = 2;\n\n        uint256 dppBalance = IERC20(DPP).balanceOf(address(this)); // DEFI++ balance\n        uint256 total = totalDeposits - IERC20(BDI).balanceOf(address(this)); // account for dust\n        rate = (dppBalance * 1e18) / total; // compute rate\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            Internal\n    ///////////////////////////////////////////////////////////////*/\n\n    function _execSwapsGivenOut(Swap[] calldata swaps) internal {\n        for (uint256 i; i < swaps.length; ) {\n            if (swaps[i].v3) {\n                _swapV3GivenOut(swaps[i]);\n            } else {\n                _swapV2GivenOut(swaps[i]);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _execApprovalsForBasket() internal {\n        address[] memory tokens = IBasketFacet(DPP).getTokens();\n\n        for (uint256 i = 0; i < tokens.length; ) {\n            IERC20(tokens[i]).approve(DPP, type(uint256).max);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _swapV2GivenIn(Swap memory swap) internal {\n        // decode data\n        (\n            address router,\n            address[] memory path,\n            uint256 amountOut,\n            uint256 amountInMin\n        ) = abi.decode(swap.data, (address, address[], uint256, uint256));\n\n        IERC20 tokenIn = IERC20(path[0]);\n        if (tokenIn.allowance(address(this), router) <= amountOut) {\n            tokenIn.approve(router, type(uint256).max);\n        }\n\n        IUniswapV2Router01(router).swapExactTokensForTokens(\n            amountOut,\n            amountInMin,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _swapV2GivenOut(Swap memory swap) internal {\n        // decode data\n        (\n            address router,\n            address[] memory path,\n            uint256 amountOut,\n            uint256 amountInMax\n        ) = abi.decode(swap.data, (address, address[], uint256, uint256));\n\n        IERC20 tokenIn = IERC20(path[0]);\n        if (tokenIn.allowance(address(this), router) <= amountInMax) {\n            tokenIn.approve(router, type(uint256).max);\n        }\n\n        IUniswapV2Router01(router).swapTokensForExactTokens(\n            amountOut,\n            amountInMax,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _swapV3GivenIn(Swap memory swap) internal {\n        // decode data\n        (\n            address router,\n            address tokenIn,\n            address tokenOut,\n            uint24 fee,\n            uint256 amountIn,\n            uint256 amountOutMin\n        ) = abi.decode(\n                swap.data,\n                (address, address, address, uint24, uint256, uint256)\n            );\n\n        if (IERC20(tokenIn).allowance(address(this), router) <= amountIn) {\n            IERC20(tokenIn).approve(router, type(uint256).max);\n        }\n\n        ISwapRouter.ExactInputSingleParams memory params;\n        params.tokenIn = tokenIn;\n        params.tokenOut = tokenOut;\n        params.fee = fee;\n        params.recipient = address(this);\n        params.deadline = block.timestamp;\n        params.amountIn = amountIn;\n        params.amountOutMinimum = amountOutMin;\n\n        ISwapRouter(router).exactInputSingle(params);\n    }\n\n    function _swapV3GivenOut(Swap memory swap) internal {\n        // decode data\n        (\n            address router,\n            address tokenIn,\n            address tokenOut,\n            uint24 fee,\n            uint256 amountOut,\n            uint256 amountInMax\n        ) = abi.decode(\n                swap.data,\n                (address, address, address, uint24, uint256, uint256)\n            );\n\n        if (IERC20(tokenIn).allowance(address(this), router) <= amountInMax) {\n            IERC20(tokenIn).approve(router, type(uint256).max);\n        }\n\n        ISwapRouter.ExactOutputSingleParams memory params;\n        params.tokenIn = tokenIn;\n        params.tokenOut = tokenOut;\n        params.fee = fee;\n        params.recipient = address(this);\n        params.deadline = block.timestamp;\n        params.amountOut = amountOut;\n        params.amountInMaximum = amountInMax;\n\n        ISwapRouter(router).exactOutputSingle(params);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            Receive\n    ///////////////////////////////////////////////////////////////*/\n\n    receive() external payable {}\n}\n"
    },
    "CERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nabstract contract CERC20 {\n    function mint(uint256) external virtual returns (uint256);\n\n    function borrow(uint256) external virtual returns (uint256);\n\n    function redeem(uint256) external virtual returns (uint256);\n\n    function underlying() external view virtual returns (address);\n\n    function totalBorrows() external view virtual returns (uint256);\n\n    function totalFuseFees() external view virtual returns (uint256);\n\n    function repayBorrow(uint256) external virtual returns (uint256);\n\n    function totalReserves() external view virtual returns (uint256);\n\n    function exchangeRateCurrent() external virtual returns (uint256);\n\n    function totalAdminFees() external view virtual returns (uint256);\n\n    function fuseFeeMantissa() external view virtual returns (uint256);\n\n    function adminFeeMantissa() external view virtual returns (uint256);\n\n    function exchangeRateStored() external view virtual returns (uint256);\n\n    function accrualBlockNumber() external view virtual returns (uint256);\n\n    function redeemUnderlying(uint256) external virtual returns (uint256);\n\n    function balanceOfUnderlying(address) external virtual returns (uint256);\n\n    function reserveFactorMantissa() external view virtual returns (uint256);\n\n    function borrowBalanceCurrent(address) external virtual returns (uint256);\n\n    function interestRateModel() external view virtual returns (address);\n\n    function initialExchangeRateMantissa()\n        external\n        view\n        virtual\n        returns (uint256);\n\n    function repayBorrowBehalf(address, uint256)\n        external\n        virtual\n        returns (uint256);\n}\n"
    },
    "IRecipe.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ninterface IRecipe {\n    function bake(\n        address _inputToken,\n        address _outputToken,\n        uint256 _maxInput,\n        bytes memory _data\n    ) external returns (uint256 inputAmountUsed, uint256 outputAmount);\n}\n"
    },
    "SushiBar.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.0;\n\ninterface SushiBar {\n    // Enter the bar. Pay some SUSHIs. Earn some shares.\n    function enter(uint256 _amount) external;\n\n    // Leave the bar. Claim back your SUSHIs.\n    function leave(uint256 _share) external;\n}\n"
    },
    "VaultAPI.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.0;\n\ninterface VaultAPI {\n    function name() external view returns (string calldata);\n\n    function symbol() external view returns (string calldata);\n\n    function decimals() external view returns (uint256);\n\n    function apiVersion() external pure returns (string memory);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 expiry,\n        bytes calldata signature\n    ) external returns (bool);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function deposit() external returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit(uint256 amount, address recipient)\n        external\n        returns (uint256);\n\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\n    function withdraw() external returns (uint256);\n\n    function withdraw(uint256 maxShares) external returns (uint256);\n\n    function withdraw(uint256 maxShares, address recipient)\n        external\n        returns (uint256);\n\n    function token() external view returns (address);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalAssets() external view returns (uint256);\n\n    function depositLimit() external view returns (uint256);\n\n    function maxAvailableShares() external view returns (uint256);\n\n    /**\n     * View how much the Vault would increase this Strategy's borrow limit,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function creditAvailable() external view returns (uint256);\n\n    /**\n     * View how much the Vault would like to pull back from the Strategy,\n     * based on its present performance (since its last report). Can be used to\n     * determine expectedReturn in your Strategy.\n     */\n    function debtOutstanding() external view returns (uint256);\n\n    /**\n     * View how much the Vault expect this Strategy to return at the current\n     * block, based on its present performance (since its last report). Can be\n     * used to determine expectedReturn in your Strategy.\n     */\n    function expectedReturn() external view returns (uint256);\n\n    /**\n     * This is the main contact point where the Strategy interacts with the\n     * Vault. It is critical that this call is handled as intended by the\n     * Strategy. Therefore, this function will be called by BaseStrategy to\n     * make sure the integration is correct.\n     */\n    function report(\n        uint256 _gain,\n        uint256 _loss,\n        uint256 _debtPayment\n    ) external returns (uint256);\n\n    /**\n     * This function should only be used in the scenario where the Strategy is\n     * being retired but no migration of the positions are possible, or in the\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\n     * mode in order for it to exit as quickly as possible. The latter scenario\n     * could be for any reason that is considered \"critical\" that the Strategy\n     * exits its position as fast as possible, such as a sudden change in\n     * market conditions leading to losses, or an imminent failure in an\n     * external dependency.\n     */\n    function revokeStrategy() external;\n\n    /**\n     * View the governance address of the Vault to assert privileged functions\n     * can only be called by governance. The Strategy serves the Vault, so it\n     * is subject to governance defined by the Vault.\n     */\n    function governance() external view returns (address);\n\n    /**\n     * View the management address of the Vault to assert privileged functions\n     * can only be called by management. The Strategy serves the Vault, so it\n     * is subject to management defined by the Vault.\n     */\n    function management() external view returns (address);\n\n    /**\n     * View the guardian address of the Vault to assert privileged functions\n     * can only be called by guardian. The Strategy serves the Vault, so it\n     * is subject to guardian defined by the Vault.\n     */\n    function guardian() external view returns (address);\n}\n"
    },
    "IBasketFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\nimport {IERC20} from \"IERC20.sol\";\n\ninterface IBasketFacet is IERC20 {\n    event TokenAdded(address indexed _token);\n    event TokenRemoved(address indexed _token);\n    event EntryFeeSet(uint256 fee);\n    event ExitFeeSet(uint256 fee);\n    event AnnualizedFeeSet(uint256 fee);\n    event FeeBeneficiarySet(address indexed beneficiary);\n    event EntryFeeBeneficiaryShareSet(uint256 share);\n    event ExitFeeBeneficiaryShareSet(uint256 share);\n\n    event PoolJoined(address indexed who, uint256 amount);\n    event PoolExited(address indexed who, uint256 amount);\n    event FeeCharged(uint256 amount);\n    event LockSet(uint256 lockBlock);\n    event CapSet(uint256 cap);\n\n    /** \n        @notice Sets entry fee paid when minting\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setEntryFee(uint256 _fee) external;\n\n    /**\n        @notice Get the entry fee\n        @return Current entry fee\n    */\n    function getEntryFee() external view returns (uint256);\n\n    /**\n        @notice Set the exit fee paid when exiting\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setExitFee(uint256 _fee) external;\n\n    /**\n        @notice Get the exit fee\n        @return Current exit fee\n    */\n    function getExitFee() external view returns (uint256);\n\n    /**\n        @notice Set the annualized fee. Often referred to as streaming fee\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setAnnualizedFee(uint256 _fee) external;\n\n    /**\n        @notice Get the annualized fee.\n        @return Current annualized fee.\n    */\n    function getAnnualizedFee() external view returns (uint256);\n\n    /**\n        @notice Set the address receiving the fees.\n    */\n    function setFeeBeneficiary(address _beneficiary) external;\n\n    /**\n        @notice Get the fee benificiary\n        @return The current fee beneficiary\n    */\n    function getFeeBeneficiary() external view returns (address);\n\n    /**\n        @notice Set the fee beneficiaries share of the entry fee\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \n    */\n    function setEntryFeeBeneficiaryShare(uint256 _share) external;\n\n    /**\n        @notice Get the entry fee beneficiary share\n        @return Feeshare amount\n    */\n    function getEntryFeeBeneficiaryShare() external view returns (uint256);\n\n    /**\n        @notice Set the fee beneficiaries share of the exit fee\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \n    */\n    function setExitFeeBeneficiaryShare(uint256 _share) external;\n\n    /**\n        @notice Get the exit fee beneficiary share\n        @return Feeshare amount\n    */\n    function getExitFeeBeneficiaryShare() external view returns (uint256);\n\n    /**\n        @notice Calculate the oustanding annualized fee\n        @return Amount of pool tokens to be minted to charge the annualized fee\n    */\n    function calcOutStandingAnnualizedFee() external view returns (uint256);\n\n    /**\n        @notice Charges the annualized fee\n    */\n    function chargeOutstandingAnnualizedFee() external;\n\n    /**\n        @notice Pulls underlying from caller and mints the pool token\n        @param _amount Amount of pool tokens to mint\n    */\n    function joinPool(uint256 _amount) external;\n\n    /**\n        @notice Burns pool tokens from the caller and returns underlying assets\n    */\n    function exitPool(uint256 _amount) external;\n\n    /**\n        @notice Get if the pool is locked or not. (not accepting exit and entry)\n        @return Boolean indicating if the pool is locked\n    */\n    function getLock() external view returns (bool);\n\n    /**\n        @notice Get the block until which the pool is locked\n        @return The lock block\n    */\n    function getLockBlock() external view returns (uint256);\n\n    /**\n        @notice Set the lock block\n        @param _lock Block height of the lock\n    */\n    function setLock(uint256 _lock) external;\n\n    /**\n        @notice Get the maximum of pool tokens that can be minted\n        @return Cap\n    */\n    function getCap() external view returns (uint256);\n\n    /**\n        @notice Set the maximum of pool tokens that can be minted\n        @param _maxCap Max cap \n    */\n    function setCap(uint256 _maxCap) external;\n\n    /**\n        @notice Get the amount of tokens owned by the pool\n        @param _token Addres of the token\n        @return Amount owned by the contract\n    */\n    function balance(address _token) external view returns (uint256);\n\n    /**\n        @notice Get the tokens in the pool\n        @return Array of tokens in the pool\n    */\n    function getTokens() external view returns (address[] memory);\n\n    /**\n        @notice Add a token to the pool. Should have at least a balance of 10**6\n        @param _token Address of the token to add\n    */\n    function addToken(address _token) external;\n\n    /**\n        @notice Removes a token from the pool\n        @param _token Address of the token to remove\n    */\n    function removeToken(address _token) external;\n\n    /**\n        @notice Checks if a token was added to the pool\n        @param _token address of the token\n        @return If token is in the pool or not\n    */\n    function getTokenInPool(address _token) external view returns (bool);\n\n    /**\n        @notice Calculate the amounts of underlying needed to mint that pool amount.\n        @param _amount Amount of pool tokens to mint\n        @return tokens Tokens needed\n        @return amounts Amounts of underlying needed\n    */\n    function calcTokensForAmount(uint256 _amount)\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts);\n\n    /**\n        @notice Calculate the amounts of underlying to receive when burning that pool amount\n        @param _amount Amount of pool tokens to burn\n        @return tokens Tokens returned\n        @return amounts Amounts of underlying returned\n    */\n    function calcTokensForAmountExit(uint256 _amount)\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts);\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "IBasketLogic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.0;\n\ninterface IBasketLogic {\n    function getAssetsAndBalances()\n        external\n        view\n        returns (address[] memory, uint256[] memory);\n\n    /// @notice Gets the amount of assets backing each Basket token\n    /// @return (the addresses of the assets,\n    ///          the amount of backing 1 Basket token)\n    function getOne()\n        external\n        view\n        returns (address[] memory, uint256[] memory);\n\n    /// @notice Gets the fees and the fee recipient\n    /// @return (mint fee, burn fee, recipient)\n    function getFees()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            address\n        );\n\n    // **** Mint/Burn functionality **** //\n\n    /// @notice Mints a new Basket token\n    /// @param  _amountOut  Amount of Basket tokens to mint\n    function mint(uint256 _amountOut) external;\n\n    /// @notice Previews the corresponding assets and amount required to mint `_amountOut` Basket tokens\n    /// @param  _amountOut  Amount of Basket tokens to mint\n    function viewMint(uint256 _amountOut)\n        external\n        view\n        returns (uint256[] memory _amountsIn);\n\n    /// @notice Burns the basket token and retrieves\n    /// @param  _amount  Amount of Basket tokens to burn\n    function burn(uint256 _amount) external;\n}\n"
    },
    "ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n}\n"
    },
    "ICurvePool_2Token.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ninterface ICurvePool_2Token {\n    function get_virtual_price() external view returns (uint256);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external\n        payable;\n\n    function remove_liquidity_imbalance(\n        uint256[2] calldata amounts,\n        uint256 max_burn_amount\n    ) external;\n\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n        external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external returns (uint256);\n\n    function exchange(\n        int128 from,\n        int128 to,\n        uint256 _from_amount,\n        uint256 _min_to_amount\n    ) external payable;\n\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}