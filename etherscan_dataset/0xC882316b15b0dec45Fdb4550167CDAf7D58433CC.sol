{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title Errors library\nlibrary Errors {\n    string public constant INVALID_COLLATERAL_AMOUNT = \"1\"; // Collateral must be greater than 0 or > defined limit\n    string public constant INVALID_SHARE_AMOUNT = \"2\"; // Share must be greater than 0\n    string public constant INVALID_INPUT_LENGTH = \"3\"; // Input array length must be greater than 0\n    string public constant INPUT_LENGTH_MISMATCH = \"4\"; // Input array length mismatch with another array length\n    string public constant NOT_WHITELISTED_ADDRESS = \"5\"; // Caller is not whitelisted to withdraw without fee\n    string public constant MULTI_TRANSFER_FAILED = \"6\"; // Multi transfer of tokens has failed\n    string public constant FEE_COLLECTOR_NOT_SET = \"7\"; // Fee Collector is not set\n    string public constant NOT_ALLOWED_TO_SWEEP = \"8\"; // Token is not allowed to sweep\n    string public constant INSUFFICIENT_BALANCE = \"9\"; // Insufficient balance to performs operations to follow\n    string public constant INPUT_ADDRESS_IS_ZERO = \"10\"; // Input address is zero\n    string public constant FEE_LIMIT_REACHED = \"11\"; // Fee must be less than MAX_BPS\n    string public constant ALREADY_INITIALIZED = \"12\"; // Data structure, contract, or logic already initialized and can not be called again\n    string public constant ADD_IN_LIST_FAILED = \"13\"; // Cannot add address in address list\n    string public constant REMOVE_FROM_LIST_FAILED = \"14\"; // Cannot remove address from address list\n    string public constant STRATEGY_IS_ACTIVE = \"15\"; // Strategy is already active, an inactive strategy is required\n    string public constant STRATEGY_IS_NOT_ACTIVE = \"16\"; // Strategy is not active, an active strategy is required\n    string public constant INVALID_STRATEGY = \"17\"; // Given strategy is not a strategy of this pool\n    string public constant DEBT_RATIO_LIMIT_REACHED = \"18\"; // Debt ratio limit reached. It must be less than MAX_BPS\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \"19\"; // Strategy total debt must be 0\n    string public constant LOSS_TOO_HIGH = \"20\"; // Strategy reported loss must be less than current debt\n    string public constant INVALID_MAX_BORROW_LIMIT = \"21\"; // Max borrow limit is beyond range.\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \"22\"; // Max limit should be greater than min limit.\n    string public constant INVALID_SLIPPAGE = \"23\"; // Slippage should be less than MAX_BPS\n    string public constant WRONG_RECEIPT_TOKEN = \"24\"; // Wrong receipt token address\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \"25\"; // aave flash loan is not active\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \"26\"; // DYDX flash loan is not active\n    string public constant INVALID_FLASH_LOAN = \"27\"; // invalid-flash-loan\n    string public constant INVALID_INITIATOR = \"28\"; // \"invalid-initiator\"\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \"29\"; // withdrawn amount is not correct\n    string public constant NO_MARKET_ID_FOUND = \"30\"; // dydx flash loan no marketId found for token\n    string public constant SAME_AS_PREVIOUS = \"31\"; // Input should not be same as previous value.\n    string public constant INVALID_INPUT = \"32\"; // Generic invalid input error code\n}\n"
    },
    "contracts/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IGovernable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, Context, Initializable {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Governable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal initializer {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        require(governor == _msgSender(), \"not-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IPausable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n */\nabstract contract Pausable is IPausable, Context {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public paused;\n    bool public stopEverything;\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"not-paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!stopEverything, \"shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(stopEverything, \"not-shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function _pause() internal virtual whenNotPaused {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function _unpause() internal virtual whenPaused whenNotShutdown {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function _shutdown() internal virtual whenNotShutdown {\n        stopEverything = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function _open() internal virtual whenShutdown {\n        stopEverything = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/vesper/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "contracts/interfaces/vesper/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Pausable interface\n */\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function stopEverything() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n\n    function shutdown() external;\n\n    function open() external;\n}\n"
    },
    "contracts/interfaces/vesper/IPoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolAccountant {\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external;\n\n    function migrateStrategy(address _old, address _new) external;\n\n    function reportEarning(\n        address _strategy,\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external returns (uint256 _actualPayback, uint256 _creditLine);\n\n    function reportLoss(address _strategy, uint256 _loss) external;\n\n    function availableCreditLimit(address _strategy) external view returns (uint256);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function getStrategies() external view returns (address[] memory);\n\n    function getWithdrawQueue() external view returns (address[] memory);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function externalDepositFee() external view returns (uint256);\n\n    function totalDebt() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalDebtRatio() external view returns (uint256);\n\n    // V5 upgrade function\n    function setup() external;\n}\n"
    },
    "contracts/interfaces/vesper/IPoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolRewards {\n    /// Emitted after reward added\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\n    /// Emitted whenever any user claim rewards\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    /// Emitted after adding new rewards token into rewardTokens array\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\n\n    function claimReward(address) external;\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external;\n\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external;\n\n    function updateReward(address) external;\n\n    function claimable(address _account)\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\n\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\n\n    function rewardForDuration()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\n\n    function rewardPerToken()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\n}\n"
    },
    "contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IStrategy {\n    function rebalance() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function keepers() external view returns (address[] memory);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function totalValue() external view returns (uint256);\n\n    function totalValueCurrent() external returns (uint256);\n\n    function pool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IGovernable.sol\";\nimport \"./IPausable.sol\";\n\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\n\n    function deposit(uint256 _share) external;\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function poolRewards() external view returns (address);\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function reportLoss(uint256 _loss) external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function keepers() external view returns (address[] memory);\n\n    function isKeeper(address _address) external view returns (bool);\n\n    function maintainers() external view returns (address[] memory);\n\n    function isMaintainer(address _address) external view returns (bool);\n\n    function pricePerShare() external view returns (uint256);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function token() external view returns (IERC20);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n}\n"
    },
    "contracts/pool/PoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\n\n// solhint-disable reason-string, no-empty-blocks\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol} for proxy\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20_init(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the decimals of the token. default to 18\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev Returns total supply of the token.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev  Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/pool/PoolERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./PoolERC20.sol\";\n\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\n// solhint-disable var-name-mixedcase\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\"1\"));\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\n    bytes32 private _HASHED_NAME;\n    uint256 private _CACHED_CHAIN_ID;\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    mapping(address => uint256) public override nonces;\n\n    /**\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20Permit_init(string memory name_) internal {\n        _HASHED_NAME = keccak256(bytes(name_));\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n        uint256 _currentNonce = nonces[owner];\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n        nonces[owner] = _currentNonce + 1;\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() private view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 name,\n        bytes32 version\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\n    }\n}\n"
    },
    "contracts/pool/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract PoolStorageV1 is IVesperPool {\n    ///@notice Collateral token address\n    IERC20 public token;\n    /// @notice PoolAccountant address\n    address public poolAccountant;\n    /// @notice PoolRewards contract address\n    address public poolRewards;\n    address private feeWhitelistObsolete; // Obsolete in favor of AddressSet of feeWhitelist\n    address private keepersObsolete; // Obsolete in favor of AddressSet of keepers\n    address private maintainersObsolete; // Obsolete in favor of AddressSet of maintainers\n    address private feeCollectorObsolete; // Fee collector address. Obsolete as there is no fee to collect\n    uint256 private withdrawFeeObsolete; // Withdraw fee for this pool. Obsolete in favor of universal fee\n    uint256 private decimalConversionFactorObsolete; // It can be used in converting value to/from 18 decimals\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\n}\n\nabstract contract PoolStorageV2 is PoolStorageV1 {\n    EnumerableSet.AddressSet private _feeWhitelistObsolete; // Obsolete in favor of universal fee\n    EnumerableSet.AddressSet internal _keepers; // List of keeper addresses\n    EnumerableSet.AddressSet internal _maintainers; // List of maintainer addresses\n}\n\nabstract contract PoolStorageV3 is PoolStorageV2 {\n    /// @notice Universal fee of this pool. Default to 2%\n    uint256 public universalFee = 200;\n    /// @notice Maximum percentage of profit that can be counted as universal fee. Default to 50%\n    uint256 public maxProfitAsFee = 5_000;\n    /// @notice Minimum deposit limit.\n    /// @dev Do not set it to 0 as deposit() is checking if amount >= limit\n    uint256 public minDepositLimit = 1;\n}\n"
    },
    "contracts/pool/VPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./PoolERC20Permit.sol\";\nimport \"./PoolStorage.sol\";\nimport \"../Errors.sol\";\nimport \"../Governable.sol\";\nimport \"../Pausable.sol\";\nimport \"../interfaces/vesper/IPoolAccountant.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\n\n/// @title Holding pool share token\n// solhint-disable no-empty-blocks\ncontract VPool is Initializable, PoolERC20Permit, Governable, Pausable, ReentrancyGuard, PoolStorageV3 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string public constant VERSION = \"5.0.1\";\n\n    uint256 public constant MAX_BPS = 10_000;\n    // For simplicity we are assuming 365 days as 1 year\n    uint256 public constant ONE_YEAR = 365 days;\n\n    event UpdatedMaximumProfitAsFee(uint256 oldMaxProfitAsFee, uint256 newMaxProfitAsFee);\n    event UpdatedMinimumDepositLimit(uint256 oldDepositLimit, uint256 newDepositLimit);\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n    event UpdatedUniversalFee(uint256 oldUniversalFee, uint256 newUniversalFee);\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\n    event UniversalFeePaid(uint256 strategyDebt, uint256 profit, uint256 fee);\n\n    // We are using constructor to initialize implementation with basic details\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) PoolERC20(_name, _symbol) {\n        // 0x0 is acceptable as has no effect on functionality\n        token = IERC20(_token);\n    }\n\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _token,\n        address _poolAccountant\n    ) public initializer {\n        require(_token != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(_poolAccountant != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        __ERC20_init(_name, _symbol);\n        __ERC20Permit_init(_name);\n        __Governable_init();\n        token = IERC20(_token);\n\n        require(_keepers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        require(_maintainers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        poolAccountant = _poolAccountant;\n        universalFee = 200; // 2%\n        maxProfitAsFee = 5_000; // 50%\n        minDepositLimit = 1;\n    }\n\n    modifier onlyKeeper() {\n        require(governor == _msgSender() || _keepers.contains(_msgSender()), \"not-a-keeper\");\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(governor == _msgSender() || _maintainers.contains(_msgSender()), \"not-a-maintainer\");\n        _;\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\n     * @param _amount ERC20 token amount.\n     */\n    function deposit(uint256 _amount) external nonReentrant whenNotPaused {\n        _updateRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and claim rewards if any\n     * @param _amount ERC20 token amount.\n     */\n    function depositAndClaim(uint256 _amount) external nonReentrant whenNotPaused {\n        _depositAndClaim(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\n     * @param _amount ERC20 token amount.\n     * @param _deadline The time at which signature will expire\n     * @param _v The recovery byte of the signature\n     * @param _r Half of the ECDSA signature pair\n     * @param _s Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external nonReentrant whenNotPaused {\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\n        _updateRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Burn remaining shares and return collateral. Claim rewards if there is any\n     * @dev Deprecated method. Keeping this method here for backward compatibility.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function whitelistedWithdraw(uint256 _shares) external nonReentrant whenNotShutdown {\n        _claimRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Burn remaining shares and return collateral.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdraw(uint256 _shares) external nonReentrant whenNotShutdown {\n        _updateRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral and claim rewards if any\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdrawAndClaim(uint256 _shares) external nonReentrant whenNotShutdown {\n        _withdrawAndClaim(_shares);\n    }\n\n    /**\n     * @notice Transfer tokens to multiple recipient\n     * @dev Address array and amount array are 1:1 and are in order.\n     * @param _recipients array of recipient addresses\n     * @param _amounts array of token amounts\n     * @return true/false\n     */\n    function multiTransfer(address[] calldata _recipients, uint256[] calldata _amounts) external returns (bool) {\n        require(_recipients.length == _amounts.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]), Errors.MULTI_TRANSFER_FAILED);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Strategy call this in regular interval. Only strategy function.\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external {\n        address _strategy = _msgSender();\n        // Calculate universal fee\n        if (_profit > 0) {\n            (, , , uint256 _lastRebalanceAt, uint256 _totalDebt, , , , ) =\n                IPoolAccountant(poolAccountant).strategy(_strategy);\n            uint256 _fee = _calculateUniversalFee(_lastRebalanceAt, _totalDebt, _profit);\n            // Mint shares equal to universal fee\n            if (_fee > 0) {\n                _mint(IStrategy(_strategy).feeCollector(), _calculateShares(_fee));\n                emit UniversalFeePaid(_totalDebt, _profit, _fee);\n            }\n        }\n\n        // Report earning in pool accountant\n        (uint256 _actualPayback, uint256 _creditLine) =\n            IPoolAccountant(poolAccountant).reportEarning(_strategy, _profit, _loss, _payback);\n        uint256 _totalPayback = _profit + _actualPayback;\n        // After payback, if strategy has credit line available then send more fund to strategy\n        // If payback is more than available credit line then get fund from strategy\n        if (_totalPayback < _creditLine) {\n            token.safeTransfer(_strategy, _creditLine - _totalPayback);\n        } else if (_totalPayback > _creditLine) {\n            token.safeTransferFrom(_strategy, address(this), _totalPayback - _creditLine);\n        }\n    }\n\n    /**\n     * @notice Report loss outside of rebalance activity.\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\n     * Strategy may want report this loss instead of waiting for next rebalance.\n     * @param _loss Loss that strategy want to report\n     */\n    function reportLoss(uint256 _loss) external {\n        if (_loss > 0) {\n            IPoolAccountant(poolAccountant).reportLoss(_msgSender(), _loss);\n        }\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to governor\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external onlyKeeper {\n        require(_fromToken != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\n        IERC20(_fromToken).safeTransfer(governor, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param _strategy Strategy address\n     */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Calculate universal fee for calling strategy. This is only strategy function.\n     * @dev Earn strategies will call this during rebalance.\n     */\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee) {\n        return _calculateUniversalFee(_msgSender(), _profit);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param _strategy Address of strategy\n     */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).excessDebt(_strategy);\n    }\n\n    function getStrategies() external view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getStrategies();\n    }\n\n    /// @notice Get total debt of pool\n    function totalDebt() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt();\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param _strategy Strategy address\n     */\n    function totalDebtOf(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n    }\n\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\n    function totalDebtRatio() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\n    }\n\n    /**\n     * @notice Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\n     * @param _amount Collateral amount\n     * @return _shares Amount of share that user will get\n     * @dev Amount should be >= minimum deposit limit which default to 1\n     */\n    function calculateMintage(uint256 _amount) public view returns (uint256 _shares) {\n        require(_amount >= minDepositLimit, Errors.INVALID_COLLATERAL_AMOUNT);\n        uint256 _externalDepositFee = (_amount * IPoolAccountant(poolAccountant).externalDepositFee()) / MAX_BPS;\n        _shares = _calculateShares(_amount - _externalDepositFee);\n    }\n\n    function getWithdrawQueue() public view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\n    }\n\n    /**\n     * @notice Get price per share\n     * @dev Return value will be in token defined decimals.\n     */\n    function pricePerShare() public view returns (uint256) {\n        if (totalSupply() == 0 || totalValue() == 0) {\n            return 10**IERC20Metadata(address(token)).decimals();\n        }\n        return (totalValue() * 1e18) / totalSupply();\n    }\n\n    function strategy(address _strategy)\n        public\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        )\n    {\n        return IPoolAccountant(poolAccountant).strategy(_strategy);\n    }\n\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\n    function tokensHere() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Returns sum of token locked in other contracts and token stored in the pool.\n     * It will be in token defined decimals.\n     */\n    function totalValue() public view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\n    }\n\n    /**\n     * @dev Hook that is called just after burning tokens.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\n        token.safeTransfer(_msgSender(), _amount);\n        return _amount;\n    }\n\n    /// @notice claim rewards of account\n    function _claimRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).claimReward(_account);\n        }\n    }\n\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\n    function _deposit(uint256 _amount) internal {\n        uint256 _shares = calculateMintage(_amount);\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, _amount);\n    }\n\n    /// @dev Deposit token and claim rewards if any\n    function _depositAndClaim(uint256 _amount) internal {\n        _claimRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /// @dev Update pool rewards of sender and receiver during transfer.\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(sender);\n            IPoolRewards(poolRewards).updateReward(recipient);\n        }\n        super._transfer(sender, recipient, amount);\n    }\n\n    function _updateRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(_account);\n        }\n    }\n\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\n    function _withdraw(uint256 _shares) internal {\n        require(_shares > 0, Errors.INVALID_SHARE_AMOUNT);\n\n        (uint256 _amountWithdrawn, bool _isPartial) = _beforeBurning(_shares);\n        // There may be scenarios when pool is not able to withdraw all of requested amount\n        if (_isPartial) {\n            // Recalculate proportional share on actual amount withdrawn\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n            if (_proportionalShares < _shares) {\n                _shares = _proportionalShares;\n            }\n        }\n        _burn(_msgSender(), _shares);\n        _afterBurning(_amountWithdrawn);\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n    }\n\n    /// @dev Withdraw collateral and claim rewards if any\n    function _withdrawAndClaim(uint256 _shares) internal {\n        _claimRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    function _withdrawCollateral(uint256 _amount) internal {\n        // Withdraw amount from queue\n        uint256 _debt;\n        uint256 _balanceAfter;\n        uint256 _balanceBefore;\n        uint256 _amountWithdrawn;\n        uint256 _totalAmountWithdrawn;\n        address[] memory _withdrawQueue = getWithdrawQueue();\n        uint256 _len = _withdrawQueue.length;\n        for (uint256 i; i < _len; i++) {\n            uint256 _amountNeeded = _amount - _totalAmountWithdrawn;\n            address _strategy = _withdrawQueue[i];\n            _debt = IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n            if (_debt == 0) {\n                continue;\n            }\n            if (_amountNeeded > _debt) {\n                // Should not withdraw more than current debt of strategy.\n                _amountNeeded = _debt;\n            }\n            _balanceBefore = tokensHere();\n            //solhint-disable no-empty-blocks\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\n                continue;\n            }\n            _balanceAfter = tokensHere();\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\n            _totalAmountWithdrawn += _amountWithdrawn;\n            if (_totalAmountWithdrawn >= _amount) {\n                // withdraw done\n                break;\n            }\n        }\n    }\n\n    /**\n     * @dev Before burning hook.\n     * withdraw amount from strategies\n     */\n    function _beforeBurning(uint256 _share) private returns (uint256 _actualWithdrawn, bool _isPartial) {\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\n        uint256 _tokensHere = tokensHere();\n        _actualWithdrawn = _amount;\n        // Check for partial withdraw scenario\n        // If we do not have enough tokens then withdraw whats needed from strategy\n        if (_amount > _tokensHere) {\n            // Strategy may withdraw partial\n            _withdrawCollateral(_amount - _tokensHere);\n            _tokensHere = tokensHere();\n            if (_amount > _tokensHere) {\n                _actualWithdrawn = _tokensHere;\n                _isPartial = true;\n            }\n        }\n        require(_actualWithdrawn > 0, Errors.INVALID_COLLATERAL_AMOUNT);\n    }\n\n    /**\n     * @dev Calculate shares to mint/burn based on the current share price and given amount.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     * @return share amount in 18 decimal\n     */\n    function _calculateShares(uint256 _amount) private view returns (uint256) {\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\n    }\n\n    /**\n     * @dev Calculate universal fee based on strategy's TVL, profit earned and duration between rebalance and now.\n     */\n    function _calculateUniversalFee(address _strategy, uint256 _profit) private view returns (uint256 _fee) {\n        // Calculate universal fee\n        (, , , uint256 _lastRebalance, uint256 _totalDebt, , , , ) =\n            IPoolAccountant(poolAccountant).strategy(_strategy);\n        return _calculateUniversalFee(_lastRebalance, _totalDebt, _profit);\n    }\n\n    function _calculateUniversalFee(\n        uint256 _lastRebalance,\n        uint256 _totalDebt,\n        uint256 _profit\n    ) private view returns (uint256 _fee) {\n        _fee = (universalFee * (block.timestamp - _lastRebalance) * _totalDebt) / (MAX_BPS * ONE_YEAR);\n        uint256 _maxFee = (_profit * maxProfitAsFee) / MAX_BPS;\n        if (_fee > _maxFee) {\n            _fee = _maxFee;\n        }\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @param _old Address of strategy being migrated\n     * @param _new Address of new strategy\n     */\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\n        require(\n            IStrategy(_new).pool() == address(this) && IStrategy(_old).pool() == address(this),\n            Errors.INVALID_STRATEGY\n        );\n        IPoolAccountant(poolAccountant).migrateStrategy(_old, _new);\n        IStrategy(_old).migrate(_new);\n    }\n\n    /**\n     * @notice OnlyGovernor:: Helper function for V5 upgrade\n     */\n    function setup() external onlyGovernor {\n        universalFee = 200; // 2%\n        maxProfitAsFee = 5_000; // 50%\n        minDepositLimit = 1;\n        IPoolAccountant(poolAccountant).setup();\n    }\n\n    /**\n     * Only Governor:: Update maximum profit that can be used as universal fee\n     * @param _newMaxProfitAsFee New max profit as fee\n     */\n    function updateMaximumProfitAsFee(uint256 _newMaxProfitAsFee) external onlyGovernor {\n        require(_newMaxProfitAsFee != maxProfitAsFee, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMaximumProfitAsFee(maxProfitAsFee, _newMaxProfitAsFee);\n        maxProfitAsFee = _newMaxProfitAsFee;\n    }\n\n    /**\n     * Only Governor:: Update minimum deposit limit\n     * @param _newLimit New minimum deposit limit\n     */\n    function updateMinimumDepositLimit(uint256 _newLimit) external onlyGovernor {\n        require(_newLimit > 0, Errors.INVALID_INPUT);\n        require(_newLimit != minDepositLimit, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMinimumDepositLimit(minDepositLimit, _newLimit);\n        minDepositLimit = _newLimit;\n    }\n\n    /**\n     * @notice Update universal fee for this pool\n     * @dev Format: 1500 = 15% fee, 100 = 1%\n     * @param _newUniversalFee new universal fee\n     */\n    function updateUniversalFee(uint256 _newUniversalFee) external onlyGovernor {\n        require(_newUniversalFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        emit UpdatedUniversalFee(universalFee, _newUniversalFee);\n        universalFee = _newUniversalFee;\n    }\n\n    /**\n     * @notice Update pool rewards address for this pool\n     * @param _newPoolRewards new pool rewards address\n     */\n    function updatePoolRewards(address _newPoolRewards) external onlyGovernor {\n        require(_newPoolRewards != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        emit UpdatedPoolRewards(poolRewards, _newPoolRewards);\n        poolRewards = _newPoolRewards;\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n    function pause() external onlyKeeper {\n        _pause();\n    }\n\n    function unpause() external onlyKeeper {\n        _unpause();\n    }\n\n    function shutdown() external onlyKeeper {\n        _shutdown();\n    }\n\n    function open() external onlyKeeper {\n        _open();\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    function isKeeper(address _address) external view returns (bool) {\n        return _keepers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.add(_keeperAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.remove(_keeperAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    /// @notice Return list of maintainers\n    function maintainers() external view returns (address[] memory) {\n        return _maintainers.values();\n    }\n\n    function isMaintainer(address _address) external view returns (bool) {\n        return _maintainers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in maintainers list.\n     * @param _maintainerAddress maintainer address to add.\n     */\n    function addMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.add(_maintainerAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from maintainers list.\n     * @param _maintainerAddress maintainer address to remove.\n     */\n    function removeMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.remove(_maintainerAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n}\n"
    }
  }
}}