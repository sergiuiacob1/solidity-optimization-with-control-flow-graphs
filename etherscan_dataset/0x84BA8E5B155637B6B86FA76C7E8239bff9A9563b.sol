{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/accumulator/AngleAccumulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"./BaseAccumulator.sol\";\n\n/// @title A contract that accumulates sanUSDC_EUR rewards and notifies them to the LGV4\n/// @author StakeDAO\ncontract AngleAccumulator is BaseAccumulator {\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(address _tokenReward) BaseAccumulator(_tokenReward) {}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\t/// @notice Claims rewards from the locker and notify an amount to the LGV4\n\t/// @param _amount amount to notify after the claim\n\tfunction claimAndNotify(uint256 _amount) external {\n\t\trequire(locker != address(0), \"locker not set\");\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\n\t\t_notifyReward(tokenReward, _amount);\n\t}\n\n\t/// @notice Claims rewards from the locker and notify all to the LGV4\n\tfunction claimAndNotifyAll() external {\n\t\trequire(locker != address(0), \"locker not set\");\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\n\t\tuint256 amount = IERC20(tokenReward).balanceOf(address(this));\n\t\t_notifyReward(tokenReward, amount);\n\t}\n}\n"
    },
    "contracts/accumulator/BaseAccumulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ILiquidityGauge.sol\";\nimport \"../interfaces/ILocker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title A contract that defines the functions shared by all accumulators\n/// @author StakeDAO\ncontract BaseAccumulator {\n\tusing SafeERC20 for IERC20;\n\t/* ========== STATE VARIABLES ========== */\n\taddress public governance;\n\taddress public locker;\n\taddress public tokenReward;\n\taddress public gauge;\n\n\t/* ========== EVENTS ========== */\n\tevent GaugeSet(address oldGauge, address newGauge);\n\tevent RewardNotified(address gauge, address tokenReward, uint256 amount);\n\tevent LockerSet(address oldLocker, address newLocker);\n\tevent GovernanceSet(address oldGov, address newGov);\n\tevent TokenRewardSet(address oldTr, address newTr);\n\tevent TokenDeposited(address token, uint256 amount);\n\tevent ERC20Rescued(address token, uint256 amount);\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(address _tokenReward) {\n\t\ttokenReward = _tokenReward;\n\t\tgovernance = msg.sender;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\n\t/// @notice Notify the reward using an extra token\n\t/// @param _tokenReward token address to notify\n\t/// @param _amount amount to notify\n\tfunction notifyExtraReward(address _tokenReward, uint256 _amount) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\t_notifyReward(_tokenReward, _amount);\n\t}\n\n\t/// @notice Notify the reward using all balance of extra token\n\t/// @param _tokenReward token address to notify\n\tfunction notifyAllExtraReward(address _tokenReward) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\tuint256 amount = IERC20(_tokenReward).balanceOf(address(this));\n\t\t_notifyReward(_tokenReward, amount);\n\t}\n\n\t/// @notice Notify the new reward to the LGV4\n\t/// @param _tokenReward token to notify\n\t/// @param _amount amount to notify\n\tfunction _notifyReward(address _tokenReward, uint256 _amount) internal {\n\t\trequire(gauge != address(0), \"gauge not set\");\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\tuint256 balanceBefore = IERC20(_tokenReward).balanceOf(address(this));\n\t\trequire(balanceBefore >= _amount, \"amount not enough\");\n\t\tif (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor != address(0)) {\n\t\t\tIERC20(_tokenReward).approve(gauge, _amount);\n\t\t\tILiquidityGauge(gauge).deposit_reward_token(_tokenReward, _amount);\n\t\t\tuint256 balanceAfter = IERC20(_tokenReward).balanceOf(address(this));\n\t\t\trequire(balanceBefore - balanceAfter == _amount, \"wrong amount notified\");\n\t\t\temit RewardNotified(gauge, _tokenReward, _amount);\n\t\t}\n\t}\n\n\t/// @notice Deposit token into the accumulator\n\t/// @param _token token to deposit\n\t/// @param _amount amount to deposit\n\tfunction depositToken(address _token, uint256 _amount) external {\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\tIERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\t\temit TokenDeposited(_token, _amount);\n\t}\n\n\t/// @notice Sets gauge for the accumulator which will receive and distribute the rewards\n\t/// @dev Can be called only by the governance\n\t/// @param _gauge gauge address\n\tfunction setGauge(address _gauge) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_gauge != address(0), \"can't be zero address\");\n\t\temit GaugeSet(gauge, _gauge);\n\t\tgauge = _gauge;\n\t}\n\n\t/// @notice Allows the governance to set the new governance\n\t/// @dev Can be called only by the governance\n\t/// @param _governance governance address\n\tfunction setGovernance(address _governance) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_governance != address(0), \"can't be zero address\");\n\t\temit GovernanceSet(governance, _governance);\n\t\tgovernance = _governance;\n\t}\n\n\t/// @notice Allows the governance to set the locker\n\t/// @dev Can be called only by the governance\n\t/// @param _locker locker address\n\tfunction setLocker(address _locker) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_locker != address(0), \"can't be zero address\");\n\t\temit LockerSet(locker, _locker);\n\t\tlocker = _locker;\n\t}\n\n\t/// @notice Allows the governance to set the token reward\n\t/// @dev Can be called only by the governance\n\t/// @param _tokenReward token reward address\n\tfunction setTokenReward(address _tokenReward) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_tokenReward != address(0), \"can't be zero address\");\n\t\temit TokenRewardSet(tokenReward, _tokenReward);\n\t\ttokenReward = _tokenReward;\n\t}\n\n\t/// @notice A function that rescue any ERC20 token\n\t/// @param _token token address\n\t/// @param _amount amount to rescue\n\t/// @param _recipient address to send token rescued\n\tfunction rescueERC20(\n\t\taddress _token,\n\t\tuint256 _amount,\n\t\taddress _recipient\n\t) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\trequire(_recipient != address(0), \"can't be zero address\");\n\t\tIERC20(_token).safeTransfer(_recipient, _amount);\n\t\temit ERC20Rescued(_token, _amount);\n\t}\n}\n"
    },
    "contracts/interfaces/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.7;\n\ninterface ILiquidityGauge {\n\tstruct Reward {\n\t\taddress token;\n\t\taddress distributor;\n\t\tuint256 period_finish;\n\t\tuint256 rate;\n\t\tuint256 last_update;\n\t\tuint256 integral;\n\t}\n\n\t// solhint-disable-next-line\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\n\n\t// solhint-disable-next-line\n\tfunction claim_rewards_for(address _user, address _recipient) external;\n\n\t// // solhint-disable-next-line\n\t// function claim_rewards_for(address _user) external;\n\n\t// solhint-disable-next-line\n\tfunction deposit(uint256 _value, address _addr) external;\n\n\t// solhint-disable-next-line\n\tfunction reward_tokens(uint256 _i) external view returns (address);\n\n\t// solhint-disable-next-line\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\n\n\tfunction balanceOf(address) external returns (uint256);\n\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\n\n\tfunction user_checkpoint(address _user) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface ILocker {\n\tfunction createLock(uint256, uint256) external;\n\n\tfunction increaseAmount(uint256) external;\n\n\tfunction increaseUnlockTime(uint256) external;\n\n\tfunction release() external;\n\n\tfunction claimRewards(address,address) external;\n\n\tfunction claimFXSRewards(address) external;\n\n\tfunction execute(\n\t\taddress,\n\t\tuint256,\n\t\tbytes calldata\n\t) external returns (bool, bytes memory);\n\n\tfunction setGovernance(address) external;\n\n\tfunction voteGaugeWeight(address, uint256) external;\n\n\tfunction setAngleDepositor(address) external;\n\n\tfunction setFxsDepositor(address) external;\n}\n"
    },
    "contracts/interfaces/IMultiRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IMultiRewards {\n\tfunction balanceOf(address) external returns (uint256);\n\n\tfunction stakeFor(address, uint256) external;\n\n\tfunction withdrawFor(address, uint256) external;\n\n\tfunction notifyRewardAmount(address, uint256) external;\n\n\tfunction mintFor(address recipient, uint256 amount) external;\n\n\tfunction burnFrom(address _from, uint256 _amount) external;\n\n\tfunction stakeOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/strategy/AngleStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"../accumulator/AngleAccumulator.sol\";\nimport \"../interfaces/ILiquidityGauge.sol\";\nimport \"../interfaces/IMultiRewards.sol\";\n\ncontract AngleStrategy is BaseStrategy {\n\tusing SafeERC20 for IERC20;\n\tAngleAccumulator public accumulator;\n\tstruct ClaimerReward {\n\t\taddress rewardToken;\n\t\tuint256 amount;\n\t}\n\tenum MANAGEFEE {\n\t\tPERFFEE,\n\t\tVESDTFEE,\n\t\tACCUMULATORFEE,\n\t\tCLAIMERREWARD\n\t}\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(\n\t\tILocker _locker,\n\t\taddress _governance,\n\t\taddress _receiver,\n\t\tAngleAccumulator _accumulator,\n\t\taddress _veSDTFeeProxy\n\t) BaseStrategy(_locker, _governance, _receiver) {\n\t\tveSDTFee = 500; // %5\n\t\taccumulatorFee = 800; // %8\n\t\tclaimerReward = 50; //%0.5\n\t\taccumulator = _accumulator;\n\t\tveSDTFeeProxy = _veSDTFeeProxy;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\tfunction deposit(address _token, uint256 _amount) public override onlyApprovedVault {\n\t\tIERC20(_token).transferFrom(msg.sender, address(locker), _amount);\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, 0));\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, _amount));\n\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"deposit(uint256)\", _amount));\n\t\trequire(success, \"Deposit failed!\");\n\t\temit Deposited(gauge, _token, _amount);\n\t}\n\n\tfunction withdraw(address _token, uint256 _amount) public override onlyApprovedVault {\n\t\tuint256 _before = IERC20(_token).balanceOf(address(locker));\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", _amount));\n\t\trequire(success, \"Transfer failed!\");\n\t\tuint256 _after = IERC20(_token).balanceOf(address(locker));\n\n\t\tuint256 _net = _after - _before;\n\t\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, _net));\n\t\trequire(success, \"Transfer failed!\");\n\t\temit Withdrawn(gauge, _token, _amount);\n\t}\n\n\tfunction claim(address _token) external override {\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"user_checkpoint(address)\", address(locker)));\n\t\trequire(success, \"Checkpoint failed!\");\n\t\t(success, ) = locker.execute(\n\t\t\tgauge,\n\t\t\t0,\n\t\t\tabi.encodeWithSignature(\"claim_rewards(address,address)\", address(locker), address(this))\n\t\t);\n\t\trequire(success, \"Claim failed!\");\n\t\tfor (uint8 i = 0; i < 8; i++) {\n\t\t\taddress rewardToken = ILiquidityGauge(gauge).reward_tokens(i);\n\t\t\tif (rewardToken == address(0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tuint256 rewardsBalance = IERC20(rewardToken).balanceOf(address(this));\n\t\t\tuint256 multisigFee = (rewardsBalance * perfFee[gauge]) / BASE_FEE;\n\t\t\tuint256 accumulatorPart = (rewardsBalance * accumulatorFee) / BASE_FEE;\n\t\t\tuint256 veSDTPart = (rewardsBalance * veSDTFee) / BASE_FEE;\n\t\t\tuint256 claimerPart = (rewardsBalance * claimerReward) / BASE_FEE;\n\t\t\tIERC20(rewardToken).approve(address(accumulator), accumulatorPart);\n\t\t\taccumulator.depositToken(rewardToken, accumulatorPart);\n\t\t\tIERC20(rewardToken).transfer(rewardsReceiver, multisigFee);\n\t\t\tIERC20(rewardToken).transfer(veSDTFeeProxy, veSDTPart);\n\t\t\tIERC20(rewardToken).transfer(msg.sender, claimerPart);\n\t\t\tuint256 netRewards = rewardsBalance - multisigFee - accumulatorPart - veSDTPart - claimerPart;\n\t\t\tIERC20(rewardToken).approve(multiGauges[gauge], netRewards);\n\t\t\tIMultiRewards(multiGauges[gauge]).notifyRewardAmount(rewardToken, netRewards);\n\t\t\temit Claimed(gauge, rewardToken, rewardsBalance);\n\t\t}\n\t}\n\n\tfunction claimerPendingRewards(address _token) external view returns (ClaimerReward[] memory) {\n\t\tClaimerReward[] memory pendings = new ClaimerReward[](8);\n\t\taddress gauge = gauges[_token];\n\t\tfor (uint8 i = 0; i < 8; i++) {\n\t\t\taddress rewardToken = ILiquidityGauge(gauge).reward_tokens(i);\n\t\t\tif (rewardToken == address(0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tuint256 rewardsBalance = ILiquidityGauge(gauge).claimable_reward(address(locker), rewardToken);\n\t\t\tuint256 pendingAmount = (rewardsBalance * claimerReward) / BASE_FEE;\n\t\t\tClaimerReward memory pendingReward = ClaimerReward(rewardToken, pendingAmount);\n\t\t\tpendings[i] = pendingReward;\n\t\t}\n\t\treturn pendings;\n\t}\n\n\tfunction toggleVault(address _vault) external override onlyGovernance {\n\t\tvaults[_vault] = !vaults[_vault];\n\t\temit VaultToggled(_vault, vaults[_vault]);\n\t}\n\n\tfunction setGauge(address _token, address _gauge) external override onlyGovernance {\n\t\tgauges[_token] = _gauge;\n\t\temit GaugeSet(_gauge, _token);\n\t}\n\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external override onlyGovernance {\n\t\tmultiGauges[_gauge] = _multiGauge;\n\t}\n\n\tfunction setVeSDTProxy(address _newVeSDTProxy) external onlyGovernance {\n\t\tveSDTFeeProxy = _newVeSDTProxy;\n\t}\n\n\tfunction setAccumulator(address _newAccumulator) external onlyGovernance {\n\t\taccumulator = AngleAccumulator(_newAccumulator);\n\t}\n\n\tfunction setRewardsReceiver(address _newRewardsReceiver) external onlyGovernance {\n\t\trewardsReceiver = _newRewardsReceiver;\n\t}\n\n\tfunction setGovernance(address _newGovernance) external onlyGovernance {\n\t\tgovernance = _newGovernance;\n\t}\n\n\tfunction manageFee(\n\t\tMANAGEFEE _manageFee,\n\t\taddress _gauge,\n\t\tuint256 _newFee\n\t) external onlyGovernance {\n\t\tif (_manageFee == MANAGEFEE.PERFFEE) {\n\t\t\t// 0\n\t\t\trequire(_gauge != address(0), \"zero address\");\n\t\t\tperfFee[_gauge] = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.VESDTFEE) {\n\t\t\t// 1\n\t\t\tveSDTFee = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.ACCUMULATORFEE) {\n\t\t\t//2\n\t\t\taccumulatorFee = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.CLAIMERREWARD) {\n\t\t\t// 3\n\t\t\tclaimerReward = _newFee;\n\t\t}\n\t}\n\n\t/// @notice execute a function\n\t/// @param to Address to sent the value to\n\t/// @param value Value to be sent\n\t/// @param data Call function data\n\tfunction execute(\n\t\taddress to,\n\t\tuint256 value,\n\t\tbytes calldata data\n\t) external onlyGovernance returns (bool, bytes memory) {\n\t\t(bool success, bytes memory result) = to.call{ value: value }(data);\n\t\treturn (success, result);\n\t}\n}\n"
    },
    "contracts/strategy/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"../interfaces/ILocker.sol\";\n\ncontract BaseStrategy {\n\t/* ========== STATE VARIABLES ========== */\n\tILocker locker;\n\taddress public governance;\n\taddress public rewardsReceiver;\n\tuint256 public veSDTFee;\n\taddress public veSDTFeeProxy;\n\tuint256 public accumulatorFee;\n\tuint256 public claimerReward;\n\tuint256 public constant BASE_FEE = 10000;\n\tmapping(address => address) public gauges;\n\tmapping(address => bool) public vaults;\n\tmapping(address => uint256) public perfFee;\n\tmapping(address => address) public multiGauges;\n\n\t/* ========== EVENTS ========== */\n\tevent Deposited(address _gauge, address _token, uint256 _amount);\n\tevent Withdrawn(address _gauge, address _token, uint256 _amount);\n\tevent Claimed(address _gauge, address _token, uint256 _amount);\n\tevent VaultToggled(address _vault, bool _newState);\n\tevent GaugeSet(address _gauge, address _token);\n\n\t/* ========== MODIFIERS ========== */\n\tmodifier onlyGovernance() {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\t_;\n\t}\n\tmodifier onlyApprovedVault() {\n\t\trequire(vaults[msg.sender], \"!approved vault\");\n\t\t_;\n\t}\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(\n\t\tILocker _locker,\n\t\taddress _governance,\n\t\taddress _receiver\n\t) public {\n\t\tlocker = _locker;\n\t\tgovernance = _governance;\n\t\trewardsReceiver = _receiver;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\tfunction deposit(address _token, uint256 _amount) external virtual onlyApprovedVault {}\n\n\tfunction withdraw(address _token, uint256 _amount) external virtual onlyApprovedVault {}\n\n\tfunction claim(address _gauge) external virtual {}\n\n\tfunction toggleVault(address _vault) external virtual onlyGovernance {}\n\n\tfunction setGauge(address _token, address _gauge) external virtual onlyGovernance {}\n\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external virtual onlyGovernance {}\n}\n"
    }
  }
}}