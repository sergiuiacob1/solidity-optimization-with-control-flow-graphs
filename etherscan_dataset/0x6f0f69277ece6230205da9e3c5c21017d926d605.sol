{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"},"Koku.sol":{"content":"// SPDX-License-Identifier: unlicensed\r\n// Solidity files have to start with this pragma.\r\n// It will be used by the Solidity compiler to validate its version.\r\npragma solidity ^0.8.13;\r\n\r\n//import \"hardhat/console.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nabstract contract ERC721 {\r\n    // This doesn\u0027t have to match the real contract name. Call it what you like.\r\n    function tokensOfOwner(address _owner) public view virtual returns (uint256[] memory);\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\r\n}\r\n\r\ncontract Koku is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Throws if called with any other non-contract added.\r\n    */\r\n    modifier onlyOwnedContracts(address _contract) {\r\n        require(contracts[_contract], \"The rewarded contract must be added\");\r\n        _;\r\n    }\r\n\r\n    bool private pause = false;\r\n\r\n    mapping (address =\u003e bool) public contracts;\r\n    mapping (address =\u003e uint256) public contractsRewardStart;\r\n    mapping (address =\u003e uint256) public contractsRewardRate;\r\n    mapping (address =\u003e uint256) public contractsRewardInterval;\r\n    mapping (address =\u003e mapping (uint256 =\u003e uint256)) public contractsLastUpdated;\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor()\r\n    {\r\n    }\r\n\r\n    function claimContractsReward(address[] calldata _contracts) public  {\r\n        require(!pause, \"Rewards are paused\");\r\n\r\n        uint256 reward;\r\n        uint256 timeStamp = block.timestamp;\r\n\r\n        for(uint i; i \u003c _contracts.length; i++)\r\n        {\r\n            (uint256[] memory tokens,uint256[] memory rewards) = getTokensAndClaimable(_contracts[i], msg.sender);\r\n            for (uint256 j; j \u003c tokens.length; j++)\r\n            {\r\n                reward += rewards[j];\r\n                contractsLastUpdated[_contracts[i]][tokens[j]] = timeStamp;\r\n            }\r\n        }\r\n        \r\n        require(reward \u003e 0, \"None to claim\");\r\n        emit RewardPaid(msg.sender, reward);\r\n    }\r\n\r\n    function claimContractReward(address _contract) public onlyOwnedContracts(_contract) {\r\n        require(!pause, \"Rewards are paused\");\r\n\r\n        uint256 reward;\r\n        uint256 timeStamp = block.timestamp;\r\n        (uint256[] memory tokens,uint256[] memory rewards) = getTokensAndClaimable(_contract, msg.sender);\r\n\r\n        for (uint256 i; i \u003c tokens.length; i++) \r\n        {\r\n            reward += rewards[i];\r\n            contractsLastUpdated[_contract][tokens[i]] = timeStamp;\r\n        }\r\n\r\n        require(reward \u003e 0, \"None to claim\");\r\n        emit RewardPaid(msg.sender, reward);\r\n    }\r\n\r\n    function claimTokenReward(address _contract, uint256 _token) onlyOwnedContracts(_contract) public {\r\n        require(!pause, \"Rewards are paused\");\r\n\r\n        require(ERC721(_contract).ownerOf(_token) == msg.sender, \"Wrong token owner\");\r\n\r\n        uint256 reward = getTokenClaimable(_contract, _token);\r\n        contractsLastUpdated[_contract][_token] = block.timestamp;\r\n\r\n        require(reward \u003e 0, \"None to claim\");\r\n        emit RewardPaid(msg.sender, reward);\r\n    }\r\n    \r\n    function claimTokensReward(address _contract, uint256[] calldata _tokens) public onlyOwnedContracts(_contract){\r\n        require(!pause, \"Rewards are paused\");\r\n        \r\n        uint256 total;\r\n        uint256 reward;\r\n        uint256 time = block.timestamp;\r\n        \r\n        for (uint256 i; i \u003c _tokens.length; i++) \r\n        {\r\n            require(ERC721(_contract).ownerOf(_tokens[i]) == msg.sender, \"Not Owner\");\r\n            reward = getTokenClaimable(_contract, _tokens[i]);\r\n            if (reward \u003e 0)\r\n            {\r\n                total += reward;\r\n                contractsLastUpdated[_contract][_tokens[i]] = time;\r\n            }\r\n        }\r\n        require(total \u003e 0, \"None to claim\");\r\n        emit RewardPaid(msg.sender, total);\r\n    }\r\n\r\n    function getTokenClaimable( address _contract, uint256 _token) public view returns (uint256) \r\n    {       \r\n        uint256 lastDate = (contractsLastUpdated[_contract][_token] \u003e contractsRewardStart[_contract]) ? contractsLastUpdated[_contract][_token] : contractsRewardStart[_contract];\r\n        uint256 rewardPeriods = (block.timestamp - lastDate) / contractsRewardInterval[_contract] * contractsRewardRate[_contract];\r\n        return (rewardPeriods * contractsRewardRate[_contract]);\r\n    }\r\n\r\n    function getContractClaimable(address _contract, address _user) public view onlyOwnedContracts(_contract) returns (uint256) {\r\n\r\n        uint256 time = block.timestamp;\r\n        //Get Wallet of owner\r\n\r\n        uint256[] memory wallet = ERC721(_contract).tokensOfOwner(_user);\r\n        uint256 claimableRewards;\r\n\r\n        for (uint256 i; i \u003c wallet.length; i++) {\r\n            if (contractsLastUpdated[_contract][wallet[i]] == 0) {\r\n                claimableRewards += contractsRewardRate[_contract].mul(time.sub(contractsRewardStart[_contract])).div(contractsRewardInterval[_contract]);\r\n            } else {\r\n                claimableRewards += contractsRewardRate[_contract].mul(time.sub(contractsLastUpdated[_contract][wallet[i]])).div(contractsRewardInterval[_contract]);\r\n            }\r\n        }\r\n        return claimableRewards;\r\n    }\r\n\r\n    function getContractsClaimable(address[] calldata _contracts, address _user) public view returns (uint256) {\r\n\r\n        uint256 claimableRewards;\r\n        for(uint i; i \u003c _contracts.length; i++) {\r\n            claimableRewards += getContractClaimable(_contracts[i], _user);\r\n        }\r\n\r\n        return claimableRewards;\r\n    }\r\n    \r\n    function getTokensAndClaimable( address _contract, address _user ) public onlyOwnedContracts(_contract) view returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256 time = block.timestamp;\r\n        uint256[] memory wallet = ERC721(_contract).tokensOfOwner(_user);\r\n        uint256[] memory claimableRewards = new uint256[](wallet.length);\r\n\r\n        for (uint256 i; i \u003c wallet.length; i++) \r\n        {\r\n            if (contractsLastUpdated[_contract][wallet[i]] == 0) {\r\n                claimableRewards[i] = contractsRewardRate[_contract].mul(time.sub(contractsRewardStart[_contract])).div(contractsRewardInterval[_contract]);\r\n            } else {\r\n                claimableRewards[i] = contractsRewardRate[_contract].mul(time.sub(contractsLastUpdated[_contract][wallet[i]])).div(contractsRewardInterval[_contract]);\r\n            }\r\n        }\r\n\r\n        return (wallet, claimableRewards);\r\n    }\r\n\r\n    function getContractStart( address _contract) public onlyOwnedContracts(_contract) view returns (uint256) \r\n    {\r\n        return contractsRewardStart[_contract];\r\n    }\r\n\r\n    function getContractRate( address _contract) public onlyOwnedContracts(_contract) view returns (uint256) \r\n    {\r\n        return contractsRewardRate[_contract];\r\n    }\r\n   \r\n    function getContractInterval( address _contract) public onlyOwnedContracts(_contract) view returns (uint256) \r\n    {\r\n        return contractsRewardInterval[_contract];\r\n    }\r\n \r\n    function setContract( address _contract, uint256 _start, uint256 _rate, uint256 _interval) public onlyOwner\r\n    {\r\n        contracts[_contract] = true;\r\n        contractsRewardStart[_contract] = _start; //ex. 1651795200 May 6, 2022 12:00:00\r\n        contractsRewardRate[_contract] = _rate; //ex. 1 = 1 koku\r\n        contractsRewardInterval[_contract] = _interval; //86400 = 1 day\r\n    }\r\n     \r\n    function clearContract( address _contract) public onlyOwner\r\n    {\r\n        contracts[_contract] = false;\r\n    }\r\n\r\n    function setContractRewardStart(address _contract, uint256 _start) public onlyOwner onlyOwnedContracts(_contract) {\r\n        //ex. 1651795200 May 6, 2022 12:00:00\r\n        contractsRewardStart[_contract] = _start;\r\n    }\r\n    \r\n    function setContractRewardRate(address _contract, uint256 _rate) public onlyOwner onlyOwnedContracts(_contract) {\r\n        //ex. 1 = 1 koku\r\n        contractsRewardRate[_contract] = _rate;\r\n    }\r\n        \r\n    function setContractRewardInterval(address _contract, uint256 _interval) public onlyOwner onlyOwnedContracts(_contract) {\r\n        //86400 = 1 day\r\n        contractsRewardInterval[_contract] = _interval;\r\n    }\r\n\r\n    function setRewardsPause(bool _pause) public onlyOwner {\r\n        pause = _pause;\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler\u0027s built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n            // benefit is lost if \u0027b\u0027 is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}