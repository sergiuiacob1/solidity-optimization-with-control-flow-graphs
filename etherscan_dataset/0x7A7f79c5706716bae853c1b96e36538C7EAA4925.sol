{{
  "language": "Solidity",
  "sources": {
    "UnionZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"Ownable.sol\";\nimport \"SafeERC20.sol\";\nimport \"IMultiMerkleStash.sol\";\nimport \"IMerkleDistributorV2.sol\";\nimport \"IUniV2Router.sol\";\nimport \"IWETH.sol\";\nimport \"ICvxCrvDeposit.sol\";\nimport \"IVotiumRegistry.sol\";\nimport \"IUniV3Router.sol\";\nimport \"ICurveV2Pool.sol\";\nimport \"ISwapper.sol\";\nimport \"UnionBase.sol\";\n\ncontract UnionZap is Ownable, UnionBase {\n    using SafeERC20 for IERC20;\n\n    address public votiumDistributor =\n        0x378Ba9B73309bE80BF4C2c027aAD799766a7ED5A;\n\n    address private constant SUSHI_ROUTER =\n        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n    address private constant CVXCRV_DEPOSIT =\n        0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae;\n    address public constant VOTIUM_REGISTRY =\n        0x92e6E43f99809dF84ed2D533e1FD8017eb966ee2;\n    address private constant T_TOKEN =\n        0xCdF7028ceAB81fA0C6971208e83fa7872994beE5;\n    address private constant T_ETH_POOL =\n        0x752eBeb79963cf0732E9c0fec72a49FD1DEfAEAC;\n    address private constant UNISWAP_ROUTER =\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address private constant UNIV3_ROUTER =\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address private constant WETH_TOKEN =\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    address[] public outputTokens;\n    address public platform = 0x9Bc7c6ad7E7Cf3A6fCB58fb21e27752AC1e53f99;\n\n    uint256 private constant DECIMALS = 1e9;\n    uint256 public platformFee = 2e7;\n\n    mapping(uint256 => address) private routers;\n    mapping(uint256 => uint24) private fees;\n\n    struct tokenContracts {\n        address pool;\n        address swapper;\n        address distributor;\n    }\n\n    struct curveSwapParams {\n        address pool;\n        uint16 ethIndex;\n    }\n\n    mapping(address => tokenContracts) public tokenInfo;\n    mapping(address => curveSwapParams) public curveRegistry;\n\n    event Received(address sender, uint256 amount);\n    event Distributed(uint256 amount, address token, address distributor);\n    event VotiumDistributorUpdated(address distributor);\n    event FundsRetrieved(address token, address to, uint256 amount);\n    event CurvePoolUpdated(address token, address pool);\n    event OutputTokenUpdated(\n        address token,\n        address pool,\n        address swapper,\n        address distributor\n    );\n    event PlatformFeeUpdated(uint256 _fee);\n    event PlatformUpdated(address indexed _platform);\n\n    constructor() {\n        routers[0] = SUSHI_ROUTER;\n        routers[1] = UNISWAP_ROUTER;\n        fees[0] = 3000;\n        fees[1] = 10000;\n        curveRegistry[CVX_TOKEN] = curveSwapParams(CURVE_CVX_ETH_POOL, 0);\n        curveRegistry[T_TOKEN] = curveSwapParams(T_ETH_POOL, 0);\n    }\n\n    /// @notice Add a pool and its swap params to the registry\n    /// @param token - Address of the token to swap on Curve\n    /// @param params - Address of the pool and WETH index there\n    function addCurvePool(address token, curveSwapParams calldata params)\n        external\n        onlyOwner\n    {\n        curveRegistry[token] = params;\n        IERC20(token).safeApprove(params.pool, 0);\n        IERC20(token).safeApprove(params.pool, type(uint256).max);\n        emit CurvePoolUpdated(token, params.pool);\n    }\n\n    /// @notice Add or update contracts used for distribution of output tokens\n    /// @param token - Address of the output token\n    /// @param params - The Curve pool and distributor associated w/ the token\n    /// @dev No removal options to avoid indexing errors with swaps, pass 0 weight for unused assets\n    /// @dev Pool needs to be Curve v2 pool with price oracle\n    function updateOutputToken(address token, tokenContracts calldata params)\n        external\n        onlyOwner\n    {\n        assert(params.pool != address(0));\n        // if we don't have any pool info, it's an addition\n        if (tokenInfo[token].pool == address(0)) {\n            outputTokens.push(token);\n        }\n        tokenInfo[token] = params;\n        emit OutputTokenUpdated(\n            token,\n            params.pool,\n            params.swapper,\n            params.distributor\n        );\n    }\n\n    /// @notice Remove a pool from the registry\n    /// @param token - Address of token associated with the pool\n    function removeCurvePool(address token) external onlyOwner {\n        IERC20(token).safeApprove(curveRegistry[token].pool, 0);\n        delete curveRegistry[token];\n        emit CurvePoolUpdated(token, address(0));\n    }\n\n    /// @notice Change forwarding address in Votium registry\n    /// @param _to - address that will be forwarded to\n    /// @dev To be used in case of migration, rewards can be forwarded to\n    /// new contracts\n    function setForwarding(address _to) external onlyOwner {\n        IVotiumRegistry(VOTIUM_REGISTRY).setRegistry(_to);\n    }\n\n    /// @notice Updates the part of incentives redirected to the platform\n    /// @param _fee - the amount of the new platform fee (in BIPS)\n    function setPlatformFee(uint256 _fee) external onlyOwner {\n        platformFee = _fee;\n        emit PlatformFeeUpdated(_fee);\n    }\n\n    /// @notice Updates the address to which platform fees are paid out\n    /// @param _platform - the new platform wallet address\n    function setPlatform(address _platform)\n        external\n        onlyOwner\n        notToZeroAddress(_platform)\n    {\n        platform = _platform;\n        emit PlatformUpdated(_platform);\n    }\n\n    /// @notice Update the votium contract address to claim for\n    /// @param _distributor - Address of the new contract\n    function updateVotiumDistributor(address _distributor)\n        external\n        onlyOwner\n        notToZeroAddress(_distributor)\n    {\n        votiumDistributor = _distributor;\n        emit VotiumDistributorUpdated(_distributor);\n    }\n\n    /// @notice Withdraws specified ERC20 tokens to the multisig\n    /// @param tokens - the tokens to retrieve\n    /// @param to - address to send the tokens to\n    /// @dev This is needed to handle tokens that don't have ETH pairs on sushi\n    /// or need to be swapped on other chains (NBST, WormholeLUNA...)\n    function retrieveTokens(address[] calldata tokens, address to)\n        external\n        onlyOwner\n        notToZeroAddress(to)\n    {\n        for (uint256 i; i < tokens.length; ++i) {\n            address token = tokens[i];\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\n            IERC20(token).safeTransfer(to, tokenBalance);\n            emit FundsRetrieved(token, to, tokenBalance);\n        }\n    }\n\n    /// @notice Execute calls on behalf of contract in case of emergency\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns (bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n        return (success, result);\n    }\n\n    /// @notice Set approvals for the tokens used when swapping\n    function setApprovals() external onlyOwner {\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CVXCRV_CRV_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CVXCRV_CRV_POOL, type(uint256).max);\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CRV_ETH_POOL, type(uint256).max);\n\n        IERC20(CRV_TOKEN).safeApprove(CVXCRV_DEPOSIT, 0);\n        IERC20(CRV_TOKEN).safeApprove(CVXCRV_DEPOSIT, type(uint256).max);\n\n        IERC20(CVXCRV_TOKEN).safeApprove(CURVE_CVXCRV_CRV_POOL, 0);\n        IERC20(CVXCRV_TOKEN).safeApprove(\n            CURVE_CVXCRV_CRV_POOL,\n            type(uint256).max\n        );\n\n        IERC20(CVXCRV_TOKEN).safeApprove(CVXCRV_STAKING_CONTRACT, 0);\n        IERC20(CVXCRV_TOKEN).safeApprove(\n            CVXCRV_STAKING_CONTRACT,\n            type(uint256).max\n        );\n    }\n\n    /// @notice Swap a token for ETH on Curve\n    /// @dev Needs the token to have been added to the registry with params\n    /// @param token - address of the token to swap\n    /// @param amount - amount of the token to swap\n    function _swapToETHCurve(address token, uint256 amount) internal {\n        curveSwapParams memory params = curveRegistry[token];\n        require(params.pool != address(0));\n        IERC20(token).safeApprove(params.pool, 0);\n        IERC20(token).safeApprove(params.pool, amount);\n        ICurveV2Pool(params.pool).exchange_underlying(\n            params.ethIndex ^ 1,\n            params.ethIndex,\n            amount,\n            0\n        );\n    }\n\n    /// @notice Swap a token for ETH\n    /// @param token - address of the token to swap\n    /// @param amount - amount of the token to swap\n    /// @dev Swaps are executed via Sushi or UniV2 router, will revert if pair\n    /// does not exist. Tokens must have a WETH pair.\n    function _swapToETH(\n        address token,\n        uint256 amount,\n        address router\n    ) internal notToZeroAddress(router) {\n        address[] memory _path = new address[](2);\n        _path[0] = token;\n        _path[1] = WETH_TOKEN;\n\n        IERC20(token).safeApprove(router, 0);\n        IERC20(token).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n    }\n\n    /// @notice Swap a token for ETH on UniSwap V3\n    /// @param token - address of the token to swap\n    /// @param amount - amount of the token to swap\n    /// @param fee - the pool's fee\n    function _swapToETHUniV3(\n        address token,\n        uint256 amount,\n        uint24 fee\n    ) internal {\n        IERC20(token).safeApprove(UNIV3_ROUTER, 0);\n        IERC20(token).safeApprove(UNIV3_ROUTER, amount);\n        IUniV3Router.ExactInputSingleParams memory _params = IUniV3Router\n            .ExactInputSingleParams(\n                token,\n                WETH_TOKEN,\n                fee,\n                address(this),\n                block.timestamp + 1,\n                amount,\n                1,\n                0\n            );\n        uint256 _wethReceived = IUniV3Router(UNIV3_ROUTER).exactInputSingle(\n            _params\n        );\n        IWETH(WETH_TOKEN).withdraw(_wethReceived);\n    }\n\n    function _isEffectiveOutputToken(address _token, uint32[] calldata _weights)\n        internal\n        returns (bool)\n    {\n        for (uint256 j; j < _weights.length; ++j) {\n            if (_token == outputTokens[j] && _weights[j] > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Claims all specified rewards from Votium\n    /// @param claimParams - an array containing the info necessary to claim for\n    /// each available token\n    /// @dev Used to retrieve tokens that need to be transferred\n    function claim(IMultiMerkleStash.claimParam[] calldata claimParams)\n        public\n        onlyOwner\n    {\n        require(claimParams.length > 0, \"No claims\");\n        // claim all from votium\n        IMultiMerkleStash(votiumDistributor).claimMulti(\n            address(this),\n            claimParams\n        );\n    }\n\n    /// @notice Claims all specified rewards and swaps them to ETH\n    /// @param claimParams - an array containing the info necessary to claim\n    /// @param routerChoices - the router to use for the swap\n    /// @param claimBeforeSwap - whether to claim on Votium or not\n    /// @param minAmountOut - min output amount in ETH value\n    /// @param gasRefund - tx gas cost to refund to caller (ETH amount)\n    /// @param weights - weight of output assets (cvxCRV, FXS, CVX...) in bips\n    /// @dev routerChoices is a 3-bit bitmap such that\n    /// 0b000 (0) - Sushi\n    /// 0b001 (1) - UniV2\n    /// 0b010 (2) - UniV3 0.3%\n    /// 0b011 (3) - UniV3 1%\n    /// 0b100 (4) - Curve\n    /// Ex: 136 = 010 001 000 will swap token 1 on UniV3, 2 on UniV3, last on Sushi\n    /// Passing 0 will execute all swaps on sushi\n    /// @dev claimBeforeSwap is used in case 3rd party already claimed on Votium\n    /// @dev weights must sum to 10000\n    /// @dev gasRefund is computed off-chain w/ tenderly\n    function swap(\n        IMultiMerkleStash.claimParam[] calldata claimParams,\n        uint256 routerChoices,\n        bool claimBeforeSwap,\n        uint256 minAmountOut,\n        uint256 gasRefund,\n        uint32[] calldata weights\n    ) public onlyOwner {\n        require(weights.length == outputTokens.length, \"Invalid weight length\");\n        // claim if applicable\n        if (claimBeforeSwap) {\n            claim(claimParams);\n        }\n\n        // swap all claims to ETH\n        for (uint256 i; i < claimParams.length; ++i) {\n            address _token = claimParams[i].token;\n            uint256 _balance = IERC20(_token).balanceOf(address(this));\n            // avoid wasting gas / reverting if no balance\n            if (_balance <= 1) {\n                continue;\n            } else {\n                // leave one gwei to lower future claim gas costs\n                // https://twitter.com/libevm/status/1474870670429360129?s=21\n                _balance -= 1;\n            }\n            // unwrap WETH\n            if (_token == WETH_TOKEN) {\n                IWETH(WETH_TOKEN).withdraw(_balance);\n            }\n            // we handle swaps for output tokens later when distributing\n            // so any non-zero output token will be skipped here\n            else {\n                // skip if output token\n                if (_isEffectiveOutputToken(_token, weights)) {\n                    continue;\n                }\n                // otherwise execute the swaps\n                uint256 _choice = routerChoices & 7;\n                if (_choice >= 4) {\n                    _swapToETHCurve(_token, _balance);\n                } else if (_choice >= 2) {\n                    _swapToETHUniV3(_token, _balance, fees[_choice - 2]);\n                } else {\n                    _swapToETH(_token, _balance, routers[_choice]);\n                }\n                routerChoices = routerChoices >> 3;\n            }\n        }\n\n        // slippage check\n        assert(address(this).balance > minAmountOut);\n\n        (bool success, ) = (tx.origin).call{value: gasRefund}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n\n    /// @notice Internal function used to sell output tokens for ETH\n    /// @param _token - the token to sell\n    /// @param _amount - how much of that token to sell\n    function _sell(address _token, uint256 _amount) internal {\n        if (_token == CRV_TOKEN) {\n            _crvToEth(_amount, 0);\n        } else if (_token == CVX_TOKEN) {\n            _swapToETHCurve(_token, _amount);\n        } else {\n            IERC20(_token).safeTransfer(tokenInfo[_token].swapper, _amount);\n            ISwapper(tokenInfo[_token].swapper).sell(_amount);\n        }\n    }\n\n    /// @notice Internal function used to buy output tokens from ETH\n    /// @param _token - the token to sell\n    /// @param _amount - how much of that token to sell\n    function _buy(address _token, uint256 _amount) internal {\n        if (_token == CRV_TOKEN) {\n            _ethToCrv(_amount, 0);\n        } else if (_token == CVX_TOKEN) {\n            _ethToCvx(_amount, 0);\n        } else {\n            (bool success, ) = tokenInfo[_token].swapper.call{value: _amount}(\n                \"\"\n            );\n            require(success, \"ETH transfer failed\");\n            ISwapper(tokenInfo[_token].swapper).buy(_amount);\n        }\n    }\n\n    /// @notice Swap or lock all CRV for cvxCRV\n    /// @param _minAmountOut - the min amount of cvxCRV expected\n    /// @param _lock - whether to lock or swap\n    /// @return the amount of cvxCrv obtained\n    function _toCvxCrv(uint256 _minAmountOut, bool _lock)\n        internal\n        returns (uint256)\n    {\n        uint256 _crvBalance = IERC20(CRV_TOKEN).balanceOf(address(this));\n        // swap on Curve if there is a premium for doing so\n        if (!_lock) {\n            return _swapCrvToCvxCrv(_crvBalance, address(this), _minAmountOut);\n        }\n        // otherwise deposit & lock\n        // slippage check\n        assert(_crvBalance > _minAmountOut);\n        ICvxCrvDeposit(CVXCRV_DEPOSIT).deposit(_crvBalance, true);\n        return _crvBalance;\n    }\n\n    /// @notice Compute and takes fees if possible\n    /// @dev If not enough ETH to take fees, can be applied on merkle distribution\n    /// @param _totalEthBalance - the total ETH value of assets in the contract\n    /// @return the ETH value of fees\n    function _levyFees(uint256 _totalEthBalance) internal returns (uint256) {\n        uint256 _feeAmount = (_totalEthBalance * platformFee) / DECIMALS;\n        if (address(this).balance >= _feeAmount) {\n            (bool success, ) = (platform).call{value: _feeAmount}(\"\");\n            require(success, \"ETH transfer failed\");\n            return _feeAmount;\n        }\n        return 0;\n    }\n\n    /// @notice Splits contract balance into output tokens as per weights\n    /// @param lock - whether to lock or swap crv to cvxcrv\n    /// @param weights - weight of output assets (cvxCRV, FXS, CVX) in bips\n    /// @param minAmounts - min amount out of each output token (cvxCRV for CRV)\n    /// @dev weights must sum to 10000\n    function adjust(\n        bool lock,\n        uint32[] calldata weights,\n        uint256[] calldata minAmounts\n    ) public onlyOwner validWeights(weights) {\n        require(\n            minAmounts.length == outputTokens.length,\n            \"Invalid min amounts\"\n        );\n        // start calculating the allocations of output tokens\n        uint256 _totalEthBalance = address(this).balance;\n\n        uint256[] memory prices = new uint256[](outputTokens.length);\n        uint256[] memory amounts = new uint256[](outputTokens.length);\n        address _outputToken;\n\n        // first loop to calculate total ETH amounts and store oracle prices\n        for (uint256 i; i < weights.length; ++i) {\n            if (weights[i] > 0) {\n                _outputToken = outputTokens[i];\n                prices[i] = ICurveV2Pool(tokenInfo[_outputToken].pool)\n                    .price_oracle();\n                // compute ETH value of current token balance\n                amounts[i] =\n                    (IERC20(_outputToken).balanceOf(address(this)) *\n                        prices[i]) /\n                    1e18;\n                // add the ETH value of token to current ETH value in contract\n                _totalEthBalance += amounts[i];\n            }\n        }\n\n        // deduce fees if applicable\n        _totalEthBalance -= _levyFees(_totalEthBalance);\n\n        // second loop to balance the amounts with buys and sells before distribution\n        for (uint256 i; i < weights.length; ++i) {\n            // if weight == 0, the token would have been swapped already so no balance\n            if (weights[i] > 0) {\n                _outputToken = outputTokens[i];\n                // amount adjustments\n                uint256 _desired = (_totalEthBalance * weights[i]) / DECIMALS;\n                if (amounts[i] > _desired) {\n                    _sell(\n                        _outputToken,\n                        (((amounts[i] - _desired) * 1e18) / prices[i])\n                    );\n                } else {\n                    _buy(_outputToken, _desired - amounts[i]);\n                }\n                // we need an edge case here since it's too late\n                // to update the cvxCRV distributor's stake function\n                if (_outputToken == CRV_TOKEN) {\n                    // convert all CRV to cvxCRV\n                    _toCvxCrv(minAmounts[i], lock);\n                } else {\n                    // slippage check\n                    assert(\n                        IERC20(_outputToken).balanceOf(address(this)) >\n                            minAmounts[i]\n                    );\n                }\n            }\n        }\n    }\n\n    /// @notice Deposits rewards to their respective merkle distributors\n    /// @param weights - weights of output assets (cvxCRV, FXS, CVX...)\n    function distribute(uint32[] calldata weights)\n        public\n        onlyOwner\n        validWeights(weights)\n    {\n        for (uint256 i; i < weights.length; ++i) {\n            if (weights[i] > 0) {\n                address _outputToken = outputTokens[i];\n                address _distributor = tokenInfo[_outputToken].distributor;\n                IMerkleDistributorV2(_distributor).freeze();\n                // edge case for CRV as we gotta keep using existing distributor\n                if (_outputToken == CRV_TOKEN) {\n                    _outputToken = CVXCRV_TOKEN;\n                }\n                uint256 _balance = IERC20(_outputToken).balanceOf(\n                    address(this)\n                );\n                // transfer to distributor\n                IERC20(_outputToken).safeTransfer(_distributor, _balance);\n                // stake\n                IMerkleDistributorV2(_distributor).stake();\n                emit Distributed(_balance, _outputToken, _distributor);\n            }\n        }\n    }\n\n    /// @notice Swaps all bribes, adjust according to output token weights and distribute\n    /// @dev Wrapper over the swap, adjust & distribute function\n    /// @param claimParams - an array containing the info necessary to claim\n    /// @param routerChoices - the router to use for the swap\n    /// @param claimBeforeSwap - whether to claim on Votium or not\n    /// @param gasRefund - tx gas cost to refund to caller (ETH amount)\n    /// @param weights - weight of output assets (cvxCRV, FXS, CVX...) in bips\n    /// @param minAmounts - min amount out of each output token (cvxCRV for CRV)\n    function processIncentives(\n        IMultiMerkleStash.claimParam[] calldata claimParams,\n        uint256 routerChoices,\n        bool claimBeforeSwap,\n        bool lock,\n        uint256 gasRefund,\n        uint32[] calldata weights,\n        uint256[] calldata minAmounts\n    ) external onlyOwner {\n        require(\n            minAmounts.length == outputTokens.length,\n            \"Invalid min amounts\"\n        );\n        swap(\n            claimParams,\n            routerChoices,\n            claimBeforeSwap,\n            0,\n            gasRefund,\n            weights\n        );\n        adjust(lock, weights, minAmounts);\n        distribute(weights);\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    modifier validWeights(uint32[] calldata _weights) {\n        require(\n            _weights.length == outputTokens.length,\n            \"Invalid weight length\"\n        );\n        uint256 _totalWeights;\n        for (uint256 i; i < _weights.length; ++i) {\n            _totalWeights += _weights[i];\n        }\n        require(_totalWeights == DECIMALS, \"Invalid weights\");\n        _;\n    }\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "IMultiMerkleStash.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IMultiMerkleStash {\n    struct claimParam {\n        address token;\n        uint256 index;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n\n    function isClaimed(address token, uint256 index)\n        external\n        view\n        returns (bool);\n\n    function claim(\n        address token,\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n\n    function claimMulti(address account, claimParam[] calldata claims) external;\n\n    function updateMerkleRoot(address token, bytes32 _merkleRoot) external;\n\n    event Claimed(\n        address indexed token,\n        uint256 index,\n        uint256 amount,\n        address indexed account,\n        uint256 indexed update\n    );\n    event MerkleRootUpdated(\n        address indexed token,\n        bytes32 indexed merkleRoot,\n        uint256 indexed update\n    );\n}\n"
    },
    "IMerkleDistributorV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IMerkleDistributorV2 {\n    enum Option {\n        Claim,\n        ClaimAsETH,\n        ClaimAsCRV,\n        ClaimAsCVX,\n        ClaimAndStake\n    }\n\n    function vault() external view returns (address);\n\n    function merkleRoot() external view returns (bytes32);\n\n    function week() external view returns (uint32);\n\n    function frozen() external view returns (bool);\n\n    function isClaimed(uint256 index) external view returns (bool);\n\n    function setApprovals() external;\n\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n\n    function claimAs(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        Option option\n    ) external;\n\n    function claimAs(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        Option option,\n        uint256 minAmountOut\n    ) external;\n\n    function freeze() external;\n\n    function unfreeze() external;\n\n    function stake() external;\n\n    function updateMerkleRoot(bytes32 newMerkleRoot, bool unfreeze) external;\n\n    function updateDepositor(address newDepositor) external;\n\n    function updateAdmin(address newAdmin) external;\n\n    function updateVault(address newVault) external;\n\n    event Claimed(\n        uint256 index,\n        uint256 amount,\n        address indexed account,\n        uint256 indexed week,\n        Option option\n    );\n\n    event DepositorUpdated(\n        address indexed oldDepositor,\n        address indexed newDepositor\n    );\n\n    event AdminUpdated(address indexed oldAdmin, address indexed newAdmin);\n\n    event VaultUpdated(address indexed oldVault, address indexed newVault);\n\n    event MerkleRootUpdated(bytes32 indexed merkleRoot, uint32 indexed week);\n}\n"
    },
    "IUniV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV2Router {\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "ICvxCrvDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICvxCrvDeposit {\n    function deposit(uint256, bool) external;\n}\n"
    },
    "IVotiumRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IVotiumRegistry {\n    struct Registry {\n        uint256 start;\n        address to;\n        uint256 expiration;\n    }\n\n    function registry(address _from)\n        external\n        view\n        returns (Registry memory registry);\n\n    function setRegistry(address _to) external;\n}\n"
    },
    "IUniV3Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniV3Router {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n"
    },
    "ICurveV2Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveV2Pool {\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function calc_token_amount(uint256[2] calldata amounts)\n        external\n        view\n        returns (uint256);\n\n    function exchange_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable returns (uint256);\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external\n        returns (uint256);\n\n    function lp_price() external view returns (uint256);\n\n    function price_oracle() external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 token_amount,\n        uint256 i,\n        uint256 min_amount,\n        bool use_eth,\n        address receiver\n    ) external returns (uint256);\n}\n"
    },
    "ISwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ISwapper {\n    function buy(uint256 amount) external returns (uint256);\n\n    function sell(uint256 amount) external returns (uint256);\n}\n"
    },
    "UnionBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"ICurveV2Pool.sol\";\nimport \"ICurveFactoryPool.sol\";\nimport \"IBasicRewards.sol\";\n\n// Common variables and functions\ncontract UnionBase {\n    address public constant CVXCRV_STAKING_CONTRACT =\n        0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e;\n    address public constant CURVE_CRV_ETH_POOL =\n        0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511;\n    address public constant CURVE_CVX_ETH_POOL =\n        0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4;\n    address public constant CURVE_CVXCRV_CRV_POOL =\n        0x9D0464996170c6B9e75eED71c68B99dDEDf279e8;\n\n    address public constant CRV_TOKEN =\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address public constant CVXCRV_TOKEN =\n        0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\n    address public constant CVX_TOKEN =\n        0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n\n    uint256 public constant CRVETH_ETH_INDEX = 0;\n    uint256 public constant CRVETH_CRV_INDEX = 1;\n    int128 public constant CVXCRV_CRV_INDEX = 0;\n    int128 public constant CVXCRV_CVXCRV_INDEX = 1;\n    uint256 public constant CVXETH_ETH_INDEX = 0;\n    uint256 public constant CVXETH_CVX_INDEX = 1;\n\n    IBasicRewards cvxCrvStaking = IBasicRewards(CVXCRV_STAKING_CONTRACT);\n    ICurveV2Pool cvxEthSwap = ICurveV2Pool(CURVE_CVX_ETH_POOL);\n    ICurveV2Pool crvEthSwap = ICurveV2Pool(CURVE_CRV_ETH_POOL);\n    ICurveFactoryPool crvCvxCrvSwap = ICurveFactoryPool(CURVE_CVXCRV_CRV_POOL);\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @return amount of CRV obtained after the swap\n    function _swapCrvToCvxCrv(uint256 amount, address recipient)\n        internal\n        returns (uint256)\n    {\n        return _crvToCvxCrv(amount, recipient, 0);\n    }\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapCrvToCvxCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return _crvToCvxCrv(amount, recipient, minAmountOut);\n    }\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _crvToCvxCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return\n            crvCvxCrvSwap.exchange(\n                CVXCRV_CRV_INDEX,\n                CVXCRV_CVXCRV_INDEX,\n                amount,\n                minAmountOut,\n                recipient\n            );\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @return amount of CRV obtained after the swap\n    function _swapCvxCrvToCrv(uint256 amount, address recipient)\n        internal\n        returns (uint256)\n    {\n        return _cvxCrvToCrv(amount, recipient, 0);\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapCvxCrvToCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return _cvxCrvToCrv(amount, recipient, minAmountOut);\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _cvxCrvToCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return\n            crvCvxCrvSwap.exchange(\n                CVXCRV_CVXCRV_INDEX,\n                CVXCRV_CRV_INDEX,\n                amount,\n                minAmountOut,\n                recipient\n            );\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount) internal returns (uint256) {\n        return _crvToEth(amount, 0);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _crvToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _crvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: 0}(\n                CRVETH_CRV_INDEX,\n                CRVETH_ETH_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount) internal returns (uint256) {\n        return _ethToCrv(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCrv(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: amount}(\n                CRVETH_ETH_INDEX,\n                CRVETH_CRV_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCvx(uint256 amount) internal returns (uint256) {\n        return _ethToCvx(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCvx(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: amount}(\n                CVXETH_ETH_INDEX,\n                CVXETH_CVX_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n"
    },
    "ICurveFactoryPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurveFactoryPool {\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_balances() external view returns (uint256[2] memory);\n\n    function add_liquidity(\n        uint256[2] memory _amounts,\n        uint256 _min_mint_amount,\n        address _receiver\n    ) external returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 _dx,\n        uint256 _min_dy,\n        address _receiver\n    ) external returns (uint256);\n}\n"
    },
    "IBasicRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ninterface IBasicRewards {\n    function stakeFor(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function earned(address) external view returns (uint256);\n\n    function withdrawAll(bool) external returns (bool);\n\n    function withdraw(uint256, bool) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim)\n        external\n        returns (bool);\n\n    function getReward() external returns (bool);\n\n    function stake(uint256) external returns (bool);\n\n    function extraRewards(uint256) external view returns (address);\n\n    function exit() external returns (bool);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "UnionZap.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}