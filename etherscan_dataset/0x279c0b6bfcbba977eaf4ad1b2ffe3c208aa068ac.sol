{{
  "language": "Solidity",
  "sources": {
    "src/passport/PassportIssuer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.10;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport {IVotingEscrow} from \"../governance/IVotingEscrow.sol\";\nimport {Passport} from \"./Passport.sol\";\n\n/// @notice Manage the issuance of Passport tokens.\n/// @author Nation3 (https://github.com/nation3/app/blob/main/contracts/contracts/passport/PassportIssuer.sol).\ncontract PassportIssuer is Initializable, Ownable {\n    /*///////////////////////////////////////////////////////////////\n                               LIBRARIES\n    //////////////////////////////////////////////////////////////*/\n\n    using SafeTransferLib for ERC20;\n    using SafeTransferLib for IVotingEscrow;\n\n    /*///////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error NotEligible();\n    error NonRevocable();\n    error InvalidSignature();\n    error PassportAlreadyIssued();\n    error PassportNotIssued();\n    error IssuanceIsDisabled();\n    error IssuancesLimitReached();\n\n    /*///////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Events inspired by EIP-4973\n    event Attest(address indexed _to, uint256 indexed _tokenId);\n    event Revoke(address indexed _to, uint256 indexed _tokenId);\n\n    event UpdateRequirements(uint256 claimRequiredBalance, uint256 revokeUnderBalance);\n\n    /*///////////////////////////////////////////////////////////////\n                                 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The token used to lock.\n    IVotingEscrow public veToken;\n    /// @notice The token that issues.\n    Passport public passToken;\n\n    /// @notice Status of the passport issance.\n    bool public enabled;\n\n    /// @notice Limit of passports to issue, cannot be change after initialization.\n    uint256 public maxIssuances;\n    /// @notice Number of passports issued.\n    uint256 public totalIssued;\n    /// @notice Balance of veToken required to claim.\n    uint256 public claimRequiredBalance;\n    /// @notice Balance of veToken under which a passport is revocable.\n    uint256 public revokeUnderBalance;\n\n    /// @notice Agreement statement to sign before claim.\n    string public statement;\n    /// @notice Agreement terms URL to sign before claim.\n    string public termsURI;\n\n    /// @dev Domain separator hash on initialization.\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    /// @dev Map the passport status of an account: (0) Not issued, (1) Issued, (2) Revoked.\n    mapping(address => uint8) internal _status;\n    /// @dev Passport id issued by account.\n    mapping(address => uint256) internal _passportId;\n\n    /*///////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Requires to be enabled before performing function.\n    modifier isEnabled() {\n        if (!enabled) revert IssuanceIsDisabled();\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               INITIALITION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Sets tokens and supply.\n    /// @param _veToken Lock token which balance is required to claim.\n    /// @param _passToken Passport token to mint.\n    /// @param _maxIssuances Maximum number of tokens that can be issued with this contract.\n    function initialize(\n        IVotingEscrow _veToken,\n        Passport _passToken,\n        uint256 _maxIssuances\n    ) external initializer {\n        veToken = _veToken;\n        passToken = _passToken;\n        maxIssuances = _maxIssuances;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                  VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the status of an account: (0) Not issued, (1) Issued, (2) Revoked.\n    function passportStatus(address account) external view virtual returns (uint8) {\n        return _status[account];\n    }\n\n    /// @notice Returns passport id of a given account.\n    /// @param account Holder account of a passport.\n    /// @dev Revert if the account has no passport.\n    function passportId(address account) public view virtual returns (uint256) {\n        if (_status[account] == 0) revert PassportNotIssued();\n        return _passportId[account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                USER ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Claims a new passport token with signature validation.\n    /// @param v Signature version.\n    /// @param r Signature fragment.\n    /// @param s Signature fragment.\n    function claim(\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual isEnabled {\n        if (totalIssued >= maxIssuances) revert IssuancesLimitReached();\n        if (_status[msg.sender] > 0) revert PassportAlreadyIssued();\n        if (veToken.balanceOf(msg.sender) < claimRequiredBalance) revert NotEligible();\n        verifySignature(v, r, s);\n\n        _issue(msg.sender);\n    }\n\n    /// @notice Allows caller to renounce to the passport.\n    function renounce() external virtual {\n        _revoke(msg.sender);\n    }\n\n    /// @notice Revokes the passport of a given account if it's not eligible anymore.\n    function revoke(address account) external virtual {\n        if (veToken.balanceOf(account) >= revokeUnderBalance) revert NonRevocable();\n        _revoke(account);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ADMIN ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Set requirements to claim & revoke.\n    /// @param _claimRequiredBalance Minimum amount of voting escrow tokens required for a new issuance.\n    /// @param _revokeUnderBalance Amount of voting escrow tokens under which a passport is revocable.\n    function setParams(uint256 _claimRequiredBalance, uint256 _revokeUnderBalance) external virtual onlyOwner {\n        claimRequiredBalance = _claimRequiredBalance;\n        revokeUnderBalance = _revokeUnderBalance;\n\n        emit UpdateRequirements(_claimRequiredBalance, _revokeUnderBalance);\n    }\n\n    /// @notice Updates issuance status.\n    /// @dev Can be used by the owner to halt the issuance of new passports.\n    function setEnabled(bool status) external virtual onlyOwner {\n        enabled = status;\n    }\n\n    /// @notice Sets the statement of the issuance agreement.\n    function setStatement(string memory _statement) external virtual onlyOwner {\n        statement = _statement;\n    }\n\n    /// @notice Sets the terms URI of the issuance agreement.\n    function setTermsURI(string memory _termsURI) external virtual onlyOwner {\n        termsURI = _termsURI;\n    }\n\n    /// @notice Allows the owner to revoke the passport of any account.\n    function adminRevoke(address account) external virtual onlyOwner {\n        _revoke(account);\n    }\n\n    /// @notice Allows the owner to withdraw any ERC20 sent to the contract.\n    /// @param token Token to withdraw.\n    /// @param to Recipient address of the tokens.\n    function recoverTokens(ERC20 token, address to) external virtual onlyOwner returns (uint256 amount) {\n        amount = token.balanceOf(address(this));\n        token.safeTransfer(to, amount);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-712 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the domain separator hash for EIP-712 signature.\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return INITIAL_DOMAIN_SEPARATOR != \"\" ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    /// @notice Verify if sender has signed the contract agreement following EIP-712.\n    /// @dev Reverts on signature missmatch.\n    function verifySignature(\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        // Unchecked because no math here\n        unchecked {\n            address signer = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\"Agreement(string statement,string termsURI)\"),\n                                keccak256(abi.encodePacked(statement)),\n                                keccak256(abi.encodePacked(termsURI))\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            if (signer != msg.sender) revert InvalidSignature();\n        }\n    }\n\n    // @dev Compute the EIP-712 domain's separator of the contract.\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(\"PassportIssuer\")),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                             INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Mints a new passport token for the recipient.\n    /// @param recipient Address to issue the passport to.\n    function _issue(address recipient) internal virtual {\n        // Mint a new passport to the recipient account\n        uint256 tokenId = passToken.safeMint(recipient);\n\n        // Realistically won't overflow;\n        unchecked {\n            totalIssued++;\n        }\n\n        _status[recipient] = 1;\n        _passportId[recipient] = tokenId;\n\n        emit Attest(recipient, tokenId);\n    }\n\n    /// @dev Burns the passport token of the account.\n    /// @param account Address of the account to revoke the passport to.\n    function _revoke(address account) internal virtual {\n        uint256 tokenId = passportId(account);\n\n        // Burn passport\n        passToken.burn(tokenId);\n\n        _status[account] = 2;\n        delete _passportId[account];\n\n        emit Revoke(account, tokenId);\n    }\n}\n"
    },
    "src/passport/Passport.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\nimport {ERC721, ERC721TokenReceiver} from \"@rari-capital/solmate/src/tokens/ERC721.sol\";\nimport {SafeTransferLib} from \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport {Controlled} from \"../utils/Controlled.sol\";\nimport {Renderer} from \"./render/Renderer.sol\";\n\n/// @notice Non-fungible, limited-transferable token that grants citizen status in Nation3.\n/// @author Nation3 (https://github.com/nation3/app/blob/main/contracts/contracts/passport/Passport.sol).\n/// @dev Most ERC721 operations are restricted to controller contract.\n/// @dev Is modified from the EIP-721 because of the lack of enough integration of the EIP-4973 at the moment of development.\n/// @dev Token metadata is renderer on-chain through an external contract.\ncontract Passport is ERC721, Controlled {\n    /*///////////////////////////////////////////////////////////////\n                               LIBRARIES\n    //////////////////////////////////////////////////////////////*/\n\n    using SafeTransferLib for ERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                               ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error NotMinted();\n    error NotAuthorized();\n    error InvalidFrom();\n    error NotSafeRecipient();\n\n    /*///////////////////////////////////////////////////////////////\n                            STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    // @notice On-chain metadata renderer.\n    Renderer public renderer;\n\n    /// @dev Tracks the number of tokens minted & not burned.\n    uint256 internal _supply;\n    /// @dev Tracks the next id to mint.\n    uint256 internal _idTracker;\n\n    // @dev Timestamp of each token mint.\n    mapping(uint256 => uint256) internal _timestampOf;\n    // @dev Authorized address to sign messages in behalf of the passport holder, it can be different from the owner.\n    // @dev Could be used for IRL events authentication.\n    mapping(uint256 => address) internal _signerOf;\n\n    /*///////////////////////////////////////////////////////////////\n                            VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns total number of tokens in supply.\n    function totalSupply() external view virtual returns (uint256) {\n        return _supply;\n    }\n\n    /// @notice Gets next id to mint.\n    function getNextId() external view virtual returns (uint256) {\n        return _idTracker;\n    }\n\n    /// @notice Returns the timestamp of the mint of a token.\n    /// @param id Token to retrieve timestamp from.\n    function timestampOf(uint256 id) public view virtual returns (uint256) {\n        if (_ownerOf[id] == address(0)) revert NotMinted();\n        return _timestampOf[id];\n    }\n\n    /// @notice Returns the authorized signer of a token.\n    /// @param id Token to retrieve signer from.\n    function signerOf(uint256 id) external view virtual returns (address) {\n        if (_ownerOf[id] == address(0)) revert NotMinted();\n        return _signerOf[id];\n    }\n\n    /// @notice Get encoded metadata from renderer.\n    /// @param id Token to retrieve metadata from.\n    function tokenURI(uint256 id) public view override returns (string memory) {\n        return renderer.render(id, ownerOf(id), timestampOf(id));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev Sets name & symbol.\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    /*///////////////////////////////////////////////////////////////\n                       USER ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the owner of a passport to update the signer.\n    /// @param id Token to update the signer.\n    /// @param signer Address of the new signer account.\n    function setSigner(uint256 id, address signer) external virtual {\n        if (_ownerOf[id] != msg.sender) revert NotAuthorized();\n        _signerOf[id] = signer;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       CONTROLLED ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice ERC721 method to set allowance. Only allowed to controller.\n    /// @dev Prevent approvals on marketplaces & other contracts.\n    function approve(address spender, uint256 id) public override onlyController {\n        getApproved[id] = spender;\n\n        emit Approval(_ownerOf[id], spender, id);\n    }\n\n    /// @notice ERC721 method to set allowance. Only allowed to controller.\n    /// @dev Prevent approvals on marketplaces & other contracts.\n    function setApprovalForAll(address operator, bool approved) public override onlyController {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Allows controller to transfer a passport (id) between two addresses.\n    /// @param from Current owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public override onlyController {\n        if (from != _ownerOf[id]) revert InvalidFrom();\n        if (to == address(0)) revert TargetIsZeroAddress();\n\n        unchecked {\n            _balanceOf[from]--;\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n        _timestampOf[id] = block.timestamp;\n        _signerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    /// @notice Allows controller to safe transfer a passport (id) between two address.\n    /// @param from Curent owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public override onlyController {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") !=\n            ERC721TokenReceiver.onERC721Received.selector\n        ) revert NotSafeRecipient();\n    }\n\n    /// @notice Allows controller to safe transfer a passport (id) between two address.\n    /// @param from Curent owner of the token.\n    /// @param to Recipient of the token.\n    /// @param id Token to transfer.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public override onlyController {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\n            ERC721TokenReceiver.onERC721Received.selector\n        ) revert NotSafeRecipient();\n    }\n\n    /// @notice Mints a new passport to the recipient.\n    /// @param to Token recipient.\n    /// @dev Id is auto assigned.\n    function mint(address to) external virtual onlyController returns (uint256 tokenId) {\n        tokenId = _idTracker;\n        _mint(to, tokenId);\n\n        // Realistically won't overflow;\n        unchecked {\n            _timestampOf[tokenId] = block.timestamp;\n            _signerOf[tokenId] = to;\n            _idTracker++;\n            _supply++;\n        }\n    }\n\n    /// @notice Mints a new passport to the recipient.\n    /// @param to Token recipient.\n    /// @dev Id is auto assigned.\n    function safeMint(address to) external virtual onlyController returns (uint256 tokenId) {\n        tokenId = _idTracker;\n        _safeMint(to, tokenId);\n\n        // Realistically won't overflow;\n        unchecked {\n            _timestampOf[tokenId] = block.timestamp;\n            _signerOf[tokenId] = to;\n            _idTracker++;\n            _supply++;\n        }\n    }\n\n    /// @notice Burns the specified token.\n    /// @param id Token to burn.\n    function burn(uint256 id) external virtual onlyController {\n        _burn(id);\n\n        // Would have reverted before if the token wasnt minted\n        unchecked {\n            delete _timestampOf[id];\n            delete _signerOf[id];\n            _supply--;\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       ADMIN ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the owner to update the renderer contract.\n    /// @param _renderer New renderer address.\n    function setRenderer(Renderer _renderer) external virtual onlyOwner {\n        renderer = _renderer;\n    }\n\n    /// @notice Allows the owner to withdraw any ERC20 sent to the contract.\n    /// @param token Token to withdraw.\n    /// @param to Recipient address of the tokens.\n    function recoverTokens(ERC20 token, address to) external virtual onlyOwner returns (uint256 amount) {\n        amount = token.balanceOf(address(this));\n        token.safeTransfer(to, amount);\n    }\n}\n"
    },
    "src/governance/IVotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IVotingEscrow {\n    struct LockedBalance {\n        int128 amount;\n        uint256 end;\n    }\n\n    function locked(address) external view returns (LockedBalance memory);\n\n    function balanceOf(address) external view returns (uint256);\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !Address.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/passport/render/Renderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract Renderer {\n    function render(\n        uint256 tokenId,\n        address owner,\n        uint256 timestamp\n    ) public view virtual returns (string memory tokenURI) {\n        string memory name = Strings.toString(uint256(uint160(owner)));\n        tokenURI = string(abi.encodePacked(Strings.toString(tokenId),'-',name,'-',Strings.toString(timestamp)));\n    }\n}\n"
    },
    "src/utils/Controlled.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.10;\n\n/// @notice Minimal implementation of access control mechanism with two roles (owner & controller)\n/// @dev Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol)\ncontract Controlled {\n    /*///////////////////////////////////////////////////////////////\n                                 ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    error CallerIsNotAuthorized();\n    error TargetIsZeroAddress();\n\n    /*///////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event ControlTransferred(address indexed previousController, address indexed newController);\n\n    /*///////////////////////////////////////////////////////////////\n                             ROLES STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address private _owner;\n    address private _controller;\n\n    /*///////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor() {\n        _transferOwnership(msg.sender);\n        _transferControl(msg.sender);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    modifier onlyOwner() {\n        if (_owner != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    modifier onlyController() {\n        if (_controller != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    modifier onlyOwnerOrController() {\n        if (_owner != msg.sender && _controller != msg.sender) revert CallerIsNotAuthorized();\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function controller() public view virtual returns (address) {\n        return _controller;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                               ACTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function renounceOwnership() external virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function removeControl() external virtual onlyOwnerOrController {\n        _transferControl(address(0));\n    }\n\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        if (newOwner == address(0)) revert TargetIsZeroAddress();\n        _transferOwnership(newOwner);\n    }\n\n    function transferControl(address newController) external virtual onlyOwnerOrController {\n        if (newController == address(0)) revert TargetIsZeroAddress();\n        _transferControl(newController);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function _transferControl(address newController) internal virtual {\n        address oldController = _controller;\n        _controller = newController;\n        emit ControlTransferred(oldController, newController);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}