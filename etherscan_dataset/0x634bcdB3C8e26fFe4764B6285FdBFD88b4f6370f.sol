{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/BaseMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ncontract BaseMath {\n\n    /// @notice Constant for the fractional arithmetics. Similar to 1 ETH = 1e18 wei.\n    uint256 constant internal DECIMAL_PRECISION = 1e18;\n\n    /// @notice Constant for the fractional arithmetics with ACR.\n    uint256 constant internal ACR_DECIMAL_PRECISION = 1e4;\n\n}\n"
    },
    "contracts/CentralLogger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n/// @title Central logger contract\n/// @notice Log collector with only 1 purpose - to emit the event. Can be called from any contract\n/** @dev Use like this:\n*\n* bytes32 internal constant CENTRAL_LOGGER_ID = keccak256(\"CentralLogger\");\n* CentralLogger logger = CentralLogger(Registry(registry).getAddress(CENTRAL_LOGGER_ID));\n*\n* Or directly:\n*   CentralLogger logger = CentralLogger(0xDEPLOYEDADDRESS);\n*\n* logger.log(\n*            address(this),\n*            msg.sender,\n*            \"myGreatFunction\",\n*            abi.encode(msg.value, param1, param2)\n*        );\n*\n* DO NOT USE delegateCall as it defies the centralisation purpose of this logger.\n*/\ncontract CentralLogger {\n\n    event LogEvent(\n        address indexed contractAddress,\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n\t/* solhint-disable no-empty-blocks */\n\tconstructor() {\n\t}\n\n    /// @notice Log the event centrally\n    /// @dev For gas impact see https://www.evm.codes/#a3\n    /// @param _logName length must be less than 32 bytes\n    function log(\n        address _contract,\n        address _caller,\n        string memory _logName,\n        bytes memory _data\n    ) public {\n        emit LogEvent(_contract, _caller, _logName, _data);\n    }\n}\n"
    },
    "contracts/CommunityAcknowledgement.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity =0.8.10;\n\nimport \"./Ownable.sol\";\n\ncontract CommunityAcknowledgement is Ownable {\n\n\t/// @notice Recognised Community Contributor Acknowledgement Rate\n\t/// @dev Id is keccak256 hash of contributor address\n\tmapping (bytes32 => uint16) public rccar;\n\n\t/// @notice Emit when owner recognises contributor\n\t/// @param contributor Keccak256 hash of recognised contributor address\n\t/// @param previousAcknowledgementRate Previous contributor acknowledgement rate\n\t/// @param newAcknowledgementRate New contributor acknowledgement rate\n\tevent ContributorRecognised(bytes32 indexed contributor, uint16 indexed previousAcknowledgementRate, uint16 indexed newAcknowledgementRate);\n\n\t/* solhint-disable-next-line no-empty-blocks */\n\tconstructor(address _adoptionDAOAddress) Ownable(_adoptionDAOAddress) {\n\n\t}\n\n\t/// @notice Getter for Recognised Community Contributor Acknowledgement Rate\n\t/// @param _contributor Keccak256 hash of contributor address\n\t/// @return Acknowledgement Rate\n\tfunction getAcknowledgementRate(bytes32 _contributor) external view returns (uint16) {\n\t\treturn rccar[_contributor];\n\t}\n\n\t/// @notice Getter for Recognised Community Contributor Acknowledgement Rate for msg.sender\n\t/// @return Acknowledgement Rate\n\tfunction senderAcknowledgementRate() external view returns (uint16) {\n\t\treturn rccar[keccak256(abi.encodePacked(msg.sender))];\n\t}\n\n\t/// @notice Recognise community contributor and set its acknowledgement rate\n\t/// @dev Only owner can recognise contributor\n\t/// @dev Emits `ContributorRecognised` event\n\t/// @param _contributor Keccak256 hash of recognised contributor address\n\t/// @param _acknowledgementRate Contributor new acknowledgement rate\n\tfunction recogniseContributor(bytes32 _contributor, uint16 _acknowledgementRate) public onlyOwner {\n\t\tuint16 _previousAcknowledgementRate = rccar[_contributor];\n\t\trccar[_contributor] = _acknowledgementRate;\n\t\temit ContributorRecognised(_contributor, _previousAcknowledgementRate, _acknowledgementRate);\n\t}\n\n\t/// @notice Recognise list of contributors\n\t/// @dev Only owner can recognise contributors\n\t/// @dev Emits `ContributorRecognised` event for every contributor\n\t/// @param _contributors List of keccak256 hash of recognised contributor addresses\n\t/// @param _acknowledgementRates List of contributors new acknowledgement rates\n\tfunction batchRecogniseContributor(bytes32[] calldata _contributors, uint16[] calldata _acknowledgementRates) external onlyOwner {\n\t\trequire(_contributors.length == _acknowledgementRates.length, \"Lists do not match in length\");\n\n\t\tfor (uint256 i = 0; i < _contributors.length; i++) {\n\t\t\trecogniseContributor(_contributors[i], _acknowledgementRates[i]);\n\t\t}\n\t}\n\n}\n"
    },
    "contracts/Config.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"./Ownable.sol\";\n\n/// @title APUS config contract\n/// @notice Holds global variables for the rest of APUS ecosystem\ncontract Config is Ownable {\n\n\t/// @notice Adoption Contribution Rate, where 100% = 10000 = ACR_DECIMAL_PRECISION. \n\t/// @dev Percent value where 0 -> 0%, 10 -> 0.1%, 100 -> 1%, 250 -> 2.5%, 550 -> 5.5%, 1000 -> 10%, 0xffff -> 655.35%\n\t/// @dev Example: x * adoptionContributionRate / ACR_DECIMAL_PRECISION\n\tuint16 public adoptionContributionRate;\n\n\t/// @notice Adoption DAO multisig address\n\taddress payable public adoptionDAOAddress;\n\n\t/// @notice Emit when owner changes Adoption Contribution Rate\n\t/// @param caller Who changed the Adoption Contribution Rate (i.e. who was owner at that moment)\n\t/// @param previousACR Previous Adoption Contribution Rate\n\t/// @param newACR New Adoption Contribution Rate\n\tevent ACRChanged(address indexed caller, uint16 previousACR, uint16 newACR);\n\n\t/// @notice Emit when owner changes Adoption DAO address\n\t/// @param caller Who changed the Adoption DAO address (i.e. who was owner at that moment)\n\t/// @param previousAdoptionDAOAddress Previous Adoption DAO address\n\t/// @param newAdoptionDAOAddress New Adoption DAO address\n\tevent AdoptionDAOAddressChanged(address indexed caller, address previousAdoptionDAOAddress, address newAdoptionDAOAddress);\n\n\t/* solhint-disable-next-line func-visibility */\n\tconstructor(address payable _adoptionDAOAddress, uint16 _initialACR) Ownable(_adoptionDAOAddress) {\n\t\tadoptionContributionRate = _initialACR;\n\t\tadoptionDAOAddress = _adoptionDAOAddress;\n\t}\n\n\n\t/// @notice Change Adoption Contribution Rate\n\t/// @dev Only owner can change Adoption Contribution Rate\n\t/// @dev Emits `ACRChanged` event\n\t/// @param _newACR Adoption Contribution Rate\n\tfunction setAdoptionContributionRate(uint16 _newACR) external onlyOwner {\n\t\tuint16 _previousACR = adoptionContributionRate;\n\t\tadoptionContributionRate = _newACR;\n\t\temit ACRChanged(msg.sender, _previousACR, _newACR);\n\t}\n\n\t/// @notice Change Adoption DAO address\n\t/// @dev Only owner can change Adoption DAO address\n\t/// @dev Emits `AdoptionDAOAddressChanged` event\n\tfunction setAdoptionDAOAddress(address payable _newAdoptionDAOAddress) external onlyOwner {\n\t\taddress payable _previousAdoptionDAOAddress = adoptionDAOAddress;\n\t\tadoptionDAOAddress = _newAdoptionDAOAddress;\n\t\temit AdoptionDAOAddressChanged(msg.sender, _previousAdoptionDAOAddress, _newAdoptionDAOAddress);\n\t}\n\n}\n"
    },
    "contracts/LiquityMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./BaseMath.sol\";\n\n/// @title Business calculation logic related to the Liquity protocol\n/// @dev To be inherited only\ncontract LiquityMath is BaseMath {\n\n    // Maximum protocol fee as defined in the Liquity contracts\n    // https://github.com/liquity/dev/blob/cb583ddf5e7de6010e196cfe706bd0ca816ea40e/packages/contracts/contracts/TroveManager.sol#L48\n    uint256 internal constant LIQUITY_PROTOCOL_MAX_BORROWING_FEE = DECIMAL_PRECISION / 100 * 5; // 5%\n\n    // Amount of LUSD to be locked in Liquity's gas pool on opening troves\n    // https://github.com/liquity/dev/blob/cb583ddf5e7de6010e196cfe706bd0ca816ea40e/packages/contracts/contracts/TroveManager.sol#L334\n    uint256 internal constant LIQUITY_LUSD_GAS_COMPENSATION = 200e18;\n\n\t/// @notice Calculates the needed amount of LUSD parameter for Liquity protocol when borrowing LUSD\n    /// @param _LUSDRequestedAmount Amount the user wants to withdraw\n    /// @param _expectedLiquityProtocolRate Current / expected borrowing rate of the Liquity protocol\n    /// @param _adoptionContributionRate Adoption Contribution Rate in uint16 form (xxyy defines xx.yy %). LPR is applied when ACR < LPR. Thus LPR is always used When AR is set to 0.\n    /* solhint-disable-next-line var-name-mixedcase */\n    function calcNeededLiquityLUSDAmount(uint256 _LUSDRequestedAmount, uint256 _expectedLiquityProtocolRate, uint16 _adoptionContributionRate) internal pure returns (\n        uint256 neededLiquityLUSDAmount\n    ) {\n\n        // Normalise ACR 1e4 -> 1e18\n        uint256 acr = DECIMAL_PRECISION / ACR_DECIMAL_PRECISION * _adoptionContributionRate;\n\n        // Apply Liquity protocol rate when ACR is lower\n        acr = acr < _expectedLiquityProtocolRate ? _expectedLiquityProtocolRate : acr;\n\n        // Includes requested debt and adoption contribution which covers also liquity protocol fee\n        uint256 expectedDebtToRepay = _LUSDRequestedAmount * acr / DECIMAL_PRECISION + _LUSDRequestedAmount;\n\n        // = x / ( 1 + fee rate<0.005 - 0.05> )\n        neededLiquityLUSDAmount = DECIMAL_PRECISION * expectedDebtToRepay / ( DECIMAL_PRECISION + _expectedLiquityProtocolRate ); \n\n        require(neededLiquityLUSDAmount >= _LUSDRequestedAmount, \"Cannot mint less than requested.\");\n    }\n\n    /// @notice Calculates adjusted Adoption Contribution Rate decreased by RCCAR down to min 0.\n    /// @param _rccar Recognised Community Contributor Acknowledgement Rate in uint16 form (xxyy defines xx.yy % points).\n    /// @param _adoptionContributionRate Adoption Contribution Rate in uint16 form (xxyy defines xx.yy %).\n    function applyRccarOnAcr(uint16 _rccar, uint16 _adoptionContributionRate) internal pure returns (\n        uint16 adjustedAcr\n    ) {\n        return (_adoptionContributionRate > _rccar ? _adoptionContributionRate - _rccar : 0);\n    }\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Adapted from OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n// Using less gas and initiating the first owner to the provided multisig address\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one provided during the deployment of the contract. \r\n * This can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n\r\n    /**\r\n     * @dev Address of the current owner. \r\n     */\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @param _firstOwner Initial owner\r\n     * @dev Initializes the contract setting the initial owner.\r\n     */\r\n    constructor(address _firstOwner) {\r\n        _transferOwnership(_firstOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n        require(_newOwner != address(0), \"Ownable: cannot be zero address\");\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(oldOwner, _newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"./Ownable.sol\";\n\n/// @title Registry contract for whole Apus ecosystem\n/// @notice Holds addresses of all essential Apus contracts\ncontract Registry is Ownable {\n\n\t/// @notice Stores address under its id\n\t/// @dev Id is keccak256 hash of its string representation\n\tmapping (bytes32 => address) public addresses;\n\n\t/// @notice Emit when owner registers address\n\t/// @param id Keccak256 hash of its string id representation\n\t/// @param previousAddress Previous address value under given id\n\t/// @param newAddress New address under given id\n\tevent AddressRegistered(bytes32 indexed id, address indexed previousAddress, address indexed newAddress);\n\n\t/* solhint-disable-next-line no-empty-blocks */\n\tconstructor(address _initialOwner) Ownable(_initialOwner) {\n\n\t}\n\n\n\t/// @notice Getter for registered addresses\n\t/// @dev Returns zero address if address have not been registered before\n\t/// @param _id Registered address identifier\n\tfunction getAddress(bytes32 _id) external view returns(address) {\n\t\treturn addresses[_id];\n\t}\n\n\n\t/// @notice Register address under given id\n\t/// @dev Only owner can register addresses\n\t/// @dev Emits `AddressRegistered` event\n\t/// @param _id Keccak256 hash of its string id representation\n\t/// @param _address Registering address\n\tfunction registerAddress(bytes32 _id, address _address) public onlyOwner {\n\t\trequire(_address != address(0), \"Can't register 0x0 address\");\n\t\taddress _previousAddress = addresses[_id];\n\t\taddresses[_id] = _address;\n\t\temit AddressRegistered(_id, _previousAddress, _address);\n\t}\n\n\t/// @notice Register list of addresses under given list of ids\n\t/// @dev Only owner can register addresses\n\t/// @dev Emits `AddressRegistered` event for every address\n\t/// @param _ids List of keccak256 hashes of its string id representation\n\t/// @param _addresses List of registering addresses\n\tfunction batchRegisterAddresses(bytes32[] calldata _ids, address[] calldata _addresses) external onlyOwner {\n\t\trequire(_ids.length == _addresses.length, \"Lists do not match in length\");\n\n\t\tfor (uint256 i = 0; i < _ids.length; i++) {\n\t\t\tregisterAddress(_ids[i], _addresses[i]);\n\t\t}\n\t}\n}\n"
    },
    "contracts/SqrtMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ncontract SqrtMath {\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    // source: https://github.com/paulrberg/prb-math/blob/86c068e21f9ba229025a77b951bd3c4c4cf103da/contracts/PRBMath.sol#L591\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n\n}\n"
    },
    "contracts/Stargate.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity =0.8.10;\n\nimport \"./Registry.sol\";\nimport \"./dapphub/DSProxyFactory.sol\";\nimport \"./dapphub/DSProxy.sol\";\nimport \"./Config.sol\";\nimport \"./CentralLogger.sol\";\nimport \"./CommunityAcknowledgement.sol\";\nimport \"./LiquityMath.sol\";\nimport \"./SqrtMath.sol\";\nimport \"./interfaces/ITroveManager.sol\";\nimport \"./interfaces/IHintHelpers.sol\";\nimport \"./interfaces/ISortedTroves.sol\";\nimport \"./interfaces/ICollSurplusPool.sol\";\n\n\n/// @title Stargate contract serves as a gateway and a gatekeeper into the APUS protocol ecosystem\n/// @notice The main motivation of Stargate is to give user understandable transaction to sign (i.e. no bytecode giberish) \n/// and to chain common sequence of transactions thus saving gas.\n/// @dev It encodes all arguments and calls given user's Smart Account proxy with any additional arguments\ncontract Stargate is LiquityMath, SqrtMath {\n\n\t/* solhint-disable var-name-mixedcase */\n\n\t/// @notice Registry's contracts IDs\n\tbytes32 private constant EXECUTOR_ID = keccak256(\"Executor\");\n\tbytes32 private constant CONFIG_ID = keccak256(\"Config\");\n\tbytes32 private constant AUTHORITY_ID = keccak256(\"Authority\");\n\tbytes32 private constant COMMUNITY_ACKNOWLEDGEMENT_ID = keccak256(\"CommunityAcknowledgement\");\n\tbytes32 private constant CENTRAL_LOGGER_ID = keccak256(\"CentralLogger\");\n\n\t/// @notice APUS registry address\n\taddress public immutable registry;\n\n\t// MakerDAO's deployed contracts - Proxy Factory\n\t// see https://changelog.makerdao.com/\n\tDSProxyFactory public immutable ProxyFactory;\n\n\t// L1 Liquity deployed contracts addresses\n\t// see https://docs.liquity.org/documentation/resources#contract-addresses\n\tITroveManager public immutable TroveManager;\n\tIHintHelpers public immutable HintHelpers;\n\tISortedTroves public immutable SortedTroves;\n\tICollSurplusPool public immutable CollSurplusPool;\n\n\n\t/// @notice Event raised on Stargate when a new Smart Account is created. \n\t/// Corresponding event is also raised on the Central Logger\n\tevent SmartAccountCreated(\n\t\taddress indexed owner,\n\t\taddress indexed smartAccountAddress\n\t);\n\n\n\t/// @notice Modifier will fail if message sender is not the proxy owner\n\t/// @param _proxy Proxy address that must be owned\n\tmodifier onlyProxyOwner(address payable _proxy) {\n\t\trequire(DSProxy(_proxy).owner() == msg.sender, \"Sender has to be proxy owner\");\n\t\t_;\n\t}\n\n\t/* solhint-disable-next-line func-visibility */\n\tconstructor(\n\t\taddress _registry,\n\t\taddress _troveManager,\n\t\taddress _hintHelpers,\n\t\taddress _sortedTroves,\n\t\taddress _collSurplusPool,\n\t\taddress _proxyFactory\n\t) {\n\t\tregistry = _registry;\n\t\tTroveManager = ITroveManager(_troveManager);\n\t\tHintHelpers = IHintHelpers(_hintHelpers);\n\t\tSortedTroves = ISortedTroves(_sortedTroves);\n\t\tCollSurplusPool = ICollSurplusPool(_collSurplusPool);\n\t\tProxyFactory = DSProxyFactory(_proxyFactory);\n\t}\n\n\t/// @notice Execute proxy call with encoded transaction data and eth value\n\t/// @dev Proxy delegates call to executor address which is obtained from registry contract\n\t/// @param _proxy Proxy address to execute encoded transaction\n\t/// @param _value Value of eth to transfer with function call\n\t/// @param _data Transaction data to execute\n\tfunction _execute(address payable _proxy, uint256 _value, bytes memory _data) internal onlyProxyOwner(_proxy) {\n\t\tDSProxy(_proxy).execute{ value: _value }(Registry(registry).getAddress(EXECUTOR_ID), _data);\n\t}\n\n\t/// @notice Execute proxy call with encoded transaction data and eth value by anyone\n\t/** \n\t * @dev Proxy delegates call to executor address which is obtained from registry contract\n\t *\n\t * This is the DANGEROUS version as it enables the proxy call to be performed by anyone!\n\t *\n\t * However suitable for cases when user wants to provide ETH from other (proxy non-owning) accounts.\n\t */\n\t/// @param _proxy Proxy address to execute encoded transaction\n\t/// @param _value Value of eth to transfer with function call\n\t/// @param _data Transaction data to execute\n\tfunction _executeByAnyone(address payable _proxy, uint256 _value, bytes memory _data) internal {\n\t\tDSProxy(_proxy).execute{ value: _value }(Registry(registry).getAddress(EXECUTOR_ID), _data);\n\t}\n\n\t// Stargate MUST NOT be able to receive ETH from sender to itself\n\t// in 0.8.x function() is split to receive() and fallback(); if both are undefined -> tx reverts\n\n\t// ------------------------------------------ User functions ------------------------------------------\n\n\n\t/// @notice Creates the Smart Account directly. Its new address is emitted to the event.\n\t/// It is cheaper to open Smart Account while opening Credit Line wihin 1 transaction.\n\tfunction openSmartAccount() external {\n\t\t_openSmartAccount();\n\t}\n\n\t/// @notice Builds the new MakerDAO's proxy aka Smart Account with enabled calls from this Stargate\n\tfunction _openSmartAccount() internal returns (address payable) {\n\t\n\t\t// Deploy a new MakerDAO's proxy onto blockchain\n\t\tDSProxy smartAccount = ProxyFactory.build();\n\n\t\t// Enable Stargate's user functions to call the Smart Account\t\n\t\tDSAuthority stargateAuthority = DSAuthority(Registry(registry).getAddress(AUTHORITY_ID));\n\t\tsmartAccount.setAuthority(stargateAuthority); \n\n\t\t// Set owner of MakerDAO's proxy aka Smart Account to be the user\n\t\tsmartAccount.setOwner(msg.sender);\n\n\t\t// Emit centraly at this contract and the Central Logger\n\t\temit SmartAccountCreated(msg.sender, address(smartAccount));\n\t\tCentralLogger logger = CentralLogger(Registry(registry).getAddress(CENTRAL_LOGGER_ID));\n\t\tlogger.log(\n\t\t\taddress(this), msg.sender, \"openSmartAccount\", abi.encode(smartAccount)\n\t\t);\n\t\t\t\t\n\t\treturn payable(smartAccount);\n\t}\n\n\t/// @notice Get the gasless information on Credit Line (Liquity) status of the given Smart Account\n\t/// @param _smartAccount Smart Account address.\n\t/// @return status Status of the Credit Line within Liquity protocol, where:\n\t/// 0..nonExistent,\n\t/// 1..active,\n\t/// 2..closedByOwner,\n\t/// 3..closedByLiquidation,\n\t/// 4..closedByRedemption\n\t/// @return collateral ETH collateral.\n\t/// @return debtToRepay Total amount of LUSD needed to close the Credit Line (exluding the 200 LUSD liquidation reserve).\n\t/// @return debtComposite Composite debt including the liquidation reserve. Valid for LTV (CR) calculations.   \n\tfunction getCreditLineStatusLiquity(address payable _smartAccount) external view returns (\n\t\tuint8 status,\n\t\tuint256 collateral,\n\t\tuint256 debtToRepay, \n\t\tuint256 debtComposite\n\t) {\n\t\t(debtComposite, collateral, , status, ) = TroveManager.Troves(_smartAccount);\t\n\t\tdebtToRepay = debtComposite > LIQUITY_LUSD_GAS_COMPENSATION ? debtComposite - LIQUITY_LUSD_GAS_COMPENSATION : 0;\n\t}\n\n\t/// @notice Calculates Liquity sorting hints based on the provided NICR\n\tfunction getLiquityHints(uint256 NICR) internal view returns (\n\t\taddress upperHint,\n\t\taddress lowerHint\n\t) {\n\t\t// Get an approximate address hint from the deployed HintHelper contract.\n\t\tuint256 numTroves = SortedTroves.getSize();\n\t\tuint256 numTrials = sqrt(numTroves) * 15;\n\t\t(address approxHint, , ) = HintHelpers.getApproxHint(NICR, numTrials, 0x41505553);\n\n\t\t// Use the approximate hint to get the exact upper and lower hints from the deployed SortedTroves contract\n\t\t(upperHint, lowerHint) = SortedTroves.findInsertPosition(NICR, approxHint, approxHint);\n\t}\n\n\t/// @notice Calculates LUSD expected debt to repay. \n\t/// Includes _LUSDRequested, Adoption Contribution, Liquity protocol fee.\n\t/// Adoption Contribution reflects the Adoption Contribution Rate and Recognised Community Contributor Acknowledgement Rate if applicable.\n\tfunction getLiquityExpectedDebtToRepay(uint256 _LUSDRequested) internal view returns (uint256 expectedDebtToRepay) {\n\t\tuint16 applicableAcr;\n\t\tuint256 expectedLiquityProtocolRate;\n\n\t\t(applicableAcr, expectedLiquityProtocolRate) = getLiquityRates();\n\n\t\tuint256 neededLUSDAmount = calcNeededLiquityLUSDAmount(_LUSDRequested, expectedLiquityProtocolRate, applicableAcr);\n\n\t\tuint256 expectedLiquityProtocolFee = TroveManager.getBorrowingFeeWithDecay(neededLUSDAmount);\n\n\t\texpectedDebtToRepay = neededLUSDAmount + expectedLiquityProtocolFee;\n\t}\n\n\t/// @notice Calculates the rates related to Liquity for the msg.sender\n\t/// @return applicableAcr Adoption Contribution Rate with applied Recognised Community Contributor Acknowledgement Rate of msg.sender if applicable.\n\t/// @return expectedLiquityProtocolRate Current rate of the Liquity protocol\n\tfunction getLiquityRates() internal view returns (uint16 applicableAcr, uint256 expectedLiquityProtocolRate) {\n\t\t// Get and apply Recognised Community Contributor Acknowledgement Rate\n\t\tCommunityAcknowledgement ca = CommunityAcknowledgement(Registry(registry).getAddress(COMMUNITY_ACKNOWLEDGEMENT_ID));\n\t\tuint16 rccar = ca.getAcknowledgementRate(keccak256(abi.encodePacked(msg.sender)));\n\n\t\tConfig config = Config(Registry(registry).getAddress(CONFIG_ID));\n\n\t\tapplicableAcr = applyRccarOnAcr(rccar, config.adoptionContributionRate());\n\n\t\texpectedLiquityProtocolRate = TroveManager.getBorrowingRateWithDecay();\n\t}\n\n\t/// @notice Calculates the current rate for the msg.sender as related to Liquity and Adoption Contribution incl. RCCAR\n\tfunction userAdoptionRate() external view returns (uint256) {\n\t\tuint16 applicableAcr;\n\t\tuint256 expectedLiquityProtocolRate;\n\n\t\t(applicableAcr, expectedLiquityProtocolRate) = getLiquityRates();\n\n\t\t// Normalise applicable ACR 1e4 -> 1e18\n        uint256 r = DECIMAL_PRECISION / ACR_DECIMAL_PRECISION * applicableAcr;\n\n        // Apply Liquity protocol rate when applicable ACR is lower\n        return r < expectedLiquityProtocolRate ? expectedLiquityProtocolRate : r;\n\t}\n\n\t/// @notice Makes a gasless calculation to get the data for the Credit Line's initial setup on Liquity protocol\n    /// @param _LUSDRequested Requested LUSD amount to be taken by borrower. In e18 (1 LUSD = 1e18).\n\t///\t  \t\tAdoption Contribution including protocol's fees is applied in the form of additional debt.\n    /// @param _collateralAmount Amount of ETH to be deposited into the Credit Line. In wei (1 ETH = 1e18).\n\t/// @return expectedDebtToRepay Total amount of LUSD needed to close the Credit Line (exluding the 200 LUSD liquidation reserve).\n\t/// @return liquidationReserve Liquidation gas reserve required by the Liquity protocol.\n\t/// @return expectedCompositeDebtLiquity Total debt of the new Credit Line including the liquidation reserve. Valid for LTV (CR) calculations.\n\t/// @return NICR Nominal Individual Collateral Ratio for this calculation as defined and used by Liquity protocol.\n\t/// @return upperHint Calculated hint for gas optimalization of the Liquity protocol when opening new Credit Line with openCreditLineLiquity.\n\t/// @return lowerHint Calculated hint for gas optimalization of the Liquity protocol when opening new Credit Line with openCreditLineLiquity.\n    function calculateInitialLiquityParameters(uint256 _LUSDRequested, uint256 _collateralAmount) public view returns (\n\t\tuint256 expectedDebtToRepay,\n\t\tuint256 liquidationReserve,\n\t\tuint256 expectedCompositeDebtLiquity,\n        uint256 NICR,\n\t\taddress upperHint,\n\t\taddress lowerHint\n    ) {\n\t\tliquidationReserve = LIQUITY_LUSD_GAS_COMPENSATION;\n\n\t\texpectedDebtToRepay = getLiquityExpectedDebtToRepay(_LUSDRequested);\n\n\t\texpectedCompositeDebtLiquity = expectedDebtToRepay + LIQUITY_LUSD_GAS_COMPENSATION;\n\n\t\t// Get the nominal NICR of the new Liquity's trove\n\t\tNICR = _collateralAmount * 1e20 / expectedCompositeDebtLiquity;\n\n\t\t(upperHint, lowerHint) = getLiquityHints(NICR);\n    }\n\n\t/// @notice Makes a gasless calculation to get the data for the Credit Line's adjustement on Liquity protocol\n\t/// @param _isDebtIncrease Indication whether _LUSDRequestedChange increases debt (true), decreases debt(false) or does not impact debt (false).\n\t/// @param _LUSDRequestedChange Amount of LUSD to be returned or further borrowed. The increase or decrease is indicated by _isDebtIncrease.\n\t///\t\t\tAdoption Contribution including protocol's fees is applied in the form of additional debt in case of requested debt increase.\n\t/// @param _isCollateralIncrease Indication whether _LUSDRequestedChange increases debt (true), decreases debt(false) or does not impact debt (false).\n\t/// @param _collateralChange Amount of ETH collateral to be withdrawn or added. The increase or decrease is indicated by _isCollateralIncrease.\n\t/// @return newCollateral Calculated future collateral.\n\t/// @return expectedDebtToRepay Total future amount of LUSD needed to close the Credit Line (exluding the 200 LUSD liquidation reserve).\n\t/// @return liquidationReserve Liquidation gas reserve required by the Liquity protocol.\n\t/// @return expectedCompositeDebtLiquity Total future debt of the new Credit Line including the liquidation reserve. Valid for LTV (CR) calculations.\n\t/// @return NICR Nominal Individual Collateral Ratio for this calculation as defined and used by Liquity protocol.\n\t/// @return upperHint Calculated hint for gas optimalization of the Liquity protocol when opening new Credit Line with openCreditLineLiquity.\n\t/// @return lowerHint Calculated hint for gas optimalization of the Liquity protocol when opening new Credit Line with openCreditLineLiquity.\n\t/// @dev bools and uints are used to avoid typecasting and overflow issues and to explicitely signal the direction\n\tfunction calculateChangedLiquityParameters(\n\t\tbool _isDebtIncrease,\n\t\tuint256 _LUSDRequestedChange,\n\t\tbool _isCollateralIncrease,\n\t\tuint256 _collateralChange,\n\t\taddress payable _smartAccount\n\t)  public view returns (\n\t\tuint256 newCollateral,\n\t\tuint256 expectedDebtToRepay,\n\t\tuint256 liquidationReserve,\n\t\tuint256 expectedCompositeDebtLiquity,\n        uint256 NICR,\n\t\taddress upperHint,\n\t\taddress lowerHint\n    ) {\n\t\tliquidationReserve = LIQUITY_LUSD_GAS_COMPENSATION;\n\n\t\t// Get the current LUSD debt and ETH collateral\n\t\t(uint256 currentCompositeDebt, uint256 currentCollateral, , ) = TroveManager.getEntireDebtAndColl(_smartAccount);\n\n\t\tuint256 currentDebtToRepay = currentCompositeDebt - LIQUITY_LUSD_GAS_COMPENSATION;\n\n\t\tif (_isCollateralIncrease) {\n\t\t\tnewCollateral = currentCollateral + _collateralChange;\n\t\t} else {\n\t\t\tnewCollateral = currentCollateral - _collateralChange;\n\t\t}\n\n\t\tif (_isDebtIncrease) {\n\t\t\tuint256 additionalDebtToRepay = getLiquityExpectedDebtToRepay(_LUSDRequestedChange);\n\t\t\texpectedDebtToRepay = currentDebtToRepay + additionalDebtToRepay;\n\t\t} else {\n\t\t\texpectedDebtToRepay = currentDebtToRepay - _LUSDRequestedChange;\n\t\t}\n\n\t\texpectedCompositeDebtLiquity = expectedDebtToRepay + LIQUITY_LUSD_GAS_COMPENSATION;\n\n\t\t// Get the nominal NICR of the new Liquity's trove\n\t\tNICR = newCollateral * 1e20 / expectedCompositeDebtLiquity;\n\n\t\t(upperHint, lowerHint) = getLiquityHints(NICR);\n\n\t}\n\n\t/// @notice Opens a new Credit Line using Liquity protocol by depositing ETH collateral and borrowing LUSD.\n\t/// Creates the new Smart Account (MakerDAO's proxy) if requested.\n\t/// Use calculateInitialLiquityParameters for gasless calculation of proper Hints for _LUSDRequested.\n\t/// @param _LUSDRequested Amount of LUSD caller wants to borrow and withdraw. In e18 (1 LUSD = 1e18).\n\t/// @param _LUSDTo Address that will receive the generated LUSD. Can be different to save gas on transfer.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateInitialLiquityParameters for gasless calculation of proper Hints for _LUSDRequested.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateInitialLiquityParameters for gasless calculation of proper Hints for _LUSDRequested.\n\t/// @param _smartAccount Smart Account address. When 0x0000...00 sender requests to open a new Smart Account.\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\t/// @dev Value is amount of ETH to deposit into Liquity protocol.\n\tfunction openCreditLineLiquity(uint256 _LUSDRequested, address _LUSDTo, address _upperHint, address _lowerHint, address payable _smartAccount) external payable {\n\n\t\t// By submitting 0x00..0 as the smartAccount address the caller wants to open a new Smart Account during this 1 transaction and thus saving gas.\n\t\t_smartAccount = (_smartAccount == address(0)) ? _openSmartAccount() : _smartAccount;\n\n\t\t_execute(_smartAccount, msg.value, abi.encodeWithSignature(\n\t\t\t\"openCreditLineLiquity(uint256,address,address,address,address)\",\n\t\t\t_LUSDRequested, _LUSDTo, _upperHint, _lowerHint, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Allows a borrower to repay all LUSD debt, withdraw all their ETH collateral, and close their Credit Line on Liquity protocol.\n\t/// @param _LUSDFrom Address where the LUSD is being pulled from to repay debt.\n\t/// @param _collateralTo Address that will receive the withdrawn ETH.\n\t/// @param _smartAccount Smart Account address\n\tfunction closeCreditLineLiquity(address _LUSDFrom, address payable _collateralTo, address payable _smartAccount) public {\n\n\t\t_execute(_smartAccount, 0, \n\t\t\tabi.encodeWithSignature(\n\t\t\t\t\"closeCreditLineLiquity(address,address,address)\",\n\t\t\t\t_LUSDFrom,\n\t\t\t\t_collateralTo, \n\t\t\t\tmsg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Allows a borrower to repay all LUSD debt, withdraw all their ETH collateral, and close their Credit Line on Liquity protocol using EIP2612 Permit.\n\t/// @param _LUSDFrom Address where the LUSD is being pulled from to repay debt.\n\t/// @param _collateralTo Address that will receive the withdrawn ETH.\n\t/// @param v EIP2612 secp256k1 permit signature part\n\t/// @param r EIP2612 secp256k1 permit signature part\n\t/// @param s EIP2612 secp256k1 permit signature part\n\t/// @param _smartAccount Smart Account address\n\tfunction closeCreditLineLiquityWithPermit(address _LUSDFrom, address payable _collateralTo, uint8 v, bytes32 r, bytes32 s, address payable _smartAccount) external {\n\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"closeCreditLineLiquityWithPermit(address,address,uint8,bytes32,bytes32,address)\",\n\t\t\t_LUSDFrom, _collateralTo, v, r, s, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Enables a borrower to simultaneously change both their collateral and debt.\n\t/// Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _isDebtIncrease Indication whether _LUSDRequestedChange increases debt (true), decreases debt(false) or does not impact debt (false).\n\t/// @param _LUSDRequestedChange Amount of LUSD to be returned or further borrowed.\n\t///\t\t\tThe increase or decrease is indicated by _isDebtIncrease.\n\t///\t\t\tAdoption Contribution and protocol's fees are applied in the form of additional debt in case of requested debt increase.\n\t/// @param _LUSDAddress Address where the LUSD is being pulled from in case of to repaying debt.\n\t/// Or address that will receive the generated LUSD in case of increasing debt.\n\t/// Approval of LUSD transfers for given Smart Account is required in case of repaying debt.\n\t/// @param _collWithdrawal Amount of ETH collateral to withdraw. MUST be 0 if ETH is provided to increase collateral.\n\t/// @param _collateralTo Address that will receive the withdrawn collateral ETH.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _smartAccount Smart Account address\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\t/// @dev Hints should reflect calculated neededLUSDAmount instead of _LUSDRequestedChange\n\t/// @dev Value is amount of ETH to deposit into Liquity protocol\n\tfunction adjustCreditLineLiquity(\n\t\tbool _isDebtIncrease,\n\t\tuint256 _LUSDRequestedChange,\n\t\taddress _LUSDAddress,\n\t\tuint256 _collWithdrawal,\n\t\taddress payable _collateralTo,\n\t\taddress _upperHint, address _lowerHint,\n\t\taddress payable _smartAccount) external payable {\n\n\t\t_execute(_smartAccount, msg.value, abi.encodeWithSignature(\n\t\t\t\"adjustCreditLineLiquity(bool,uint256,address,uint256,address,address,address,address)\",\n\t\t\t_isDebtIncrease, _LUSDRequestedChange, _LUSDAddress, _collWithdrawal, _collateralTo, _upperHint, _lowerHint, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Enables a borrower to simultaneously change both their collateral and decrease debt providing LUSD from ANY ADDRESS using EIP2612 Permit. \n\t/// Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// It is useful only when the debt decrease is requested while working with collateral.\n\t/// In all other cases [adjustCreditLineLiquity()] MUST be used. It is cheaper on gas.\n\t/// @param _LUSDRequestedChange Amount of LUSD to be returned.\n\t/// @param _LUSDFrom Address where the LUSD is being pulled from. Can be ANY ADDRESS with enough LUSD.\n\t/// Approval of LUSD transfers for given Smart Account is ensured by the offchain signature from that address.\n\t/// @param _collWithdrawal Amount of ETH collateral to withdraw. MUST be 0 if ETH is provided to increase collateral.\n\t/// @param _collateralTo Address that will receive the withdrawn collateral ETH.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param v EIP2612 secp256k1 permit signature part\n\t/// @param r EIP2612 secp256k1 permit signature part\n\t/// @param s EIP2612 secp256k1 permit signature part\n\t/// @param _smartAccount Smart Account address\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\t/// @dev Value is amount of ETH to deposit into Liquity protocol\n\tfunction adjustCreditLineLiquityWithPermit(\n\t\tuint256 _LUSDRequestedChange,\n\t\taddress _LUSDFrom,\n\t\tuint256 _collWithdrawal,\n\t\taddress payable _collateralTo,\n\t\taddress _upperHint, address _lowerHint,\n\t\tuint8 v, bytes32 r, bytes32 s,\n\t\taddress payable _smartAccount) external payable {\n\n\t\t_execute(_smartAccount, msg.value, abi.encodeWithSignature(\n\t\t\t\"adjustCreditLineLiquityWithPermit(uint256,address,uint256,address,address,address,uint8,bytes32,bytes32,address)\",\n\t\t\t_LUSDRequestedChange, _LUSDFrom, _collWithdrawal, _collateralTo, _upperHint, _lowerHint, v, r, s, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Gasless check if there is anything to be claimed after the forced closure of the Liquity Credit Line\n\tfunction checkClaimableCollateralLiquity(address _smartAccount) external view returns (uint256) {\n\t\treturn CollSurplusPool.getCollateral(_smartAccount);\n\t}\n\n\t/// @notice Claims remaining collateral from the user's closed Credit Line (Liquity protocol) due to a redemption or a liquidation.\n\t/// @param _collateralTo Address that will receive the claimed collateral ETH.\n\t/// @param _smartAccount Smart Account address\n\tfunction claimRemainingCollateralLiquity(address payable _collateralTo, address payable _smartAccount) external {\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"claimRemainingCollateralLiquity(address,address)\",\n\t\t\t_collateralTo,\n\t\t\tmsg.sender\n\t\t));\n\t}\n\n\n\t/// @notice Allows ANY ADDRESS (calling and paying) to add ETH collateral to borrower's Credit Line (Liquity protocol) and thus increase CR (decrease LTV ratio).\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints.\n\t/// @param _smartAccount Smart Account address\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\tfunction addCollateralLiquity(address _upperHint, address _lowerHint, address payable _smartAccount) external payable {\n\n\t\t// Must be executable by anyone in order to be able to provide ETH by addresses, which do not own smart account proxy\n\t\t_executeByAnyone(_smartAccount, msg.value, abi.encodeWithSignature(\n\t\t\t\"addCollateralLiquity(address,address,address)\",\n\t\t\t_upperHint, _lowerHint, msg.sender\n\t\t));\n\t}\n\n\t/// @notice Withdraws amount of ETH collateral from the Credit Line and transfer to _collateralTo address.\n\t/// @param _collWithdrawal Amount of ETH collateral to withdraw\n\t/// @param _collateralTo Address that will receive the withdrawn collateral ETH\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints.\n\t/// @param _smartAccount Smart Account address\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\tfunction withdrawCollateralLiquity(uint256 _collWithdrawal, address payable _collateralTo, address _upperHint, address _lowerHint, address payable _smartAccount) external {\n\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"withdrawCollateralLiquity(uint256,address,address,address,address)\",\n\t\t\t_collWithdrawal, _collateralTo, _upperHint, _lowerHint, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Issues amount of LUSD from the liquity's protocol to the provided address.\n\t/// This increases the debt on the Credit Line, decreases CR (increases LTV).\n\t/// @param _LUSDRequestedChange Amount of LUSD to further borrow.\n\t/// @param _LUSDTo Address that will receive the generated LUSD. When 0 msg.sender is used.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _smartAccount Smart Account address\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\t/// @dev Hints should reflect calculated new debt instead of _LUSDRequestedChange\n\t/// @dev This is facade to adjustCreditLineLiquity\n\tfunction borrowLUSDLiquity(uint256 _LUSDRequestedChange, address _LUSDTo, address _upperHint, address _lowerHint, address payable _smartAccount) external {\n\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"adjustCreditLineLiquity(bool,uint256,address,uint256,address,address,address,address)\",\n\t\t\ttrue, _LUSDRequestedChange, _LUSDTo, 0, msg.sender, _upperHint, _lowerHint, msg.sender\n//\t\t\t_isDebtIncrease, _LUSDRequestedChange, _LUSDAddress, _collWithdrawal, _collateralTo, _upperHint, _lowerHint, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Enables credit line owner to partially repay the debt from ANY ADDRESS by the given amount of LUSD.\n\t/// Approval of LUSD transfers for given Smart Account is required.\n\t/// Cannot repay below 2000 LUSD composite debt. Use closeCreditLineLiquity to repay whole debt instead.\n\t/// @param _LUSDRequestedChange Amount of LUSD to be repaid in e18 (1 LUSD = 1e18). Repaying is subject to leaving 2000 LUSD min. debt in the Liquity protocol.\n\t/// @param _LUSDFrom Address where the LUSD is being pulled from to repay debt.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _smartAccount Smart Account address.\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\tfunction repayLUSDLiquity(uint256 _LUSDRequestedChange, address _LUSDFrom, address _upperHint, address _lowerHint, address payable _smartAccount) external {\n\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"repayLUSDLiquity(uint256,address,address,address,address)\",\n\t\t\t_LUSDRequestedChange, _LUSDFrom, _upperHint, _lowerHint, msg.sender\n\t\t));\n\n\t}\n\n\t/// @notice Enables credit line owner to partially repay the debt from ANY ADDRESS by the given amount of LUSD using EIP2612 Permit.\n\t/// Approval of LUSD transfers for given Smart Account is ensured by the offchain signature.\n\t/// Cannot repay below 2000 LUSD composite debt. Use closeCreditLineLiquity to repay whole debt instead.\n\t/// @param _LUSDRequestedChange Amount of LUSD to be repaid in e18 (1 LUSD = 1e18). Repaying is subject to leaving 2000 LUSD min. debt in the Liquity protocol.\n\t/// @param _LUSDFrom Address where the LUSD is being pulled from to repay debt.\n\t/// @param _upperHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param _lowerHint For gas optimalisation when using Liquity protocol. Use calculateChangedLiquityParameters for gasless calculation of proper Hints for _LUSDRequestedChange.\n\t/// @param v EIP2612 secp256k1 permit signature part\n\t/// @param r EIP2612 secp256k1 permit signature part\n\t/// @param s EIP2612 secp256k1 permit signature part\n\t/// @param _smartAccount Smart Account address.\n\t/// @dev Hints explained: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n\tfunction repayLUSDLiquityWithPermit(uint256 _LUSDRequestedChange, address _LUSDFrom, address _upperHint, address _lowerHint, uint8 v, bytes32 r, bytes32 s, address payable _smartAccount) external {\n\n\t\t_execute(_smartAccount, 0, abi.encodeWithSignature(\n\t\t\t\"repayLUSDLiquityWithPermit(uint256,address,address,address,uint8,bytes32,bytes32,address)\",\n\t\t\t_LUSDRequestedChange, _LUSDFrom, _upperHint, _lowerHint, v, r, s, msg.sender\n\t\t));\n\n\t}\n\n}\n"
    },
    "contracts/dapphub/DSAuth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"./DSAuthority.sol\";\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\nabstract contract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public virtual;\n\n    function setAuthority(DSAuthority authority_) public virtual;\n\n    function isAuthorized(address src, bytes4 sig) internal view virtual returns (bool);\n}\n"
    },
    "contracts/dapphub/DSAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nabstract contract DSAuthority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public view virtual returns (bool);\n}\n"
    },
    "contracts/dapphub/DSProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"./DSAuth.sol\";\n\nabstract contract DSProxy is DSAuth {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) {\n        require(setCache(_cacheAddr), \"Cache not set\");\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n}\n\nabstract contract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view virtual returns (address);\n\n    function write(bytes memory _code) public virtual returns (address target);\n}\n"
    },
    "contracts/dapphub/DSProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\nimport \"./DSProxy.sol\";\n\nabstract contract DSProxyFactory {\n    function build(address owner) public virtual returns (DSProxy proxy);\n    function build() public virtual returns (DSProxy proxy);\n    function isProxy(address proxy) public virtual view returns (bool);\n}\n"
    },
    "contracts/interfaces/ICollSurplusPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n\ninterface ICollSurplusPool {\n\n    // --- Events ---\n    \n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\n\n    event CollBalanceUpdated(address indexed _account, uint _newBalance);\n    event EtherSent(address _to, uint _amount);\n\n    // --- Contract setters ---\n\n    function setAddresses(\n        address _borrowerOperationsAddress,\n        address _troveManagerAddress,\n        address _activePoolAddress\n    ) external;\n\n    function getETH() external view returns (uint);\n\n    function getCollateral(address _account) external view returns (uint);\n\n    function accountSurplus(address _account, uint _amount) external;\n\n    function claimColl(address _account) external;\n}\n"
    },
    "contracts/interfaces/IHintHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\ninterface IHintHelpers {\n\n    function getRedemptionHints(\n        uint _LUSDamount, \n        uint _price,\n        uint _maxIterations\n    )\n        external\n        view\n        returns (\n            address firstRedemptionHint,\n            uint partialRedemptionHintNICR,\n            uint truncatedLUSDamount\n        );\n\n    function getApproxHint(uint _CR, uint _numTrials, uint _inputRandomSeed)\n        external\n        view\n        returns (address hintAddress, uint diff, uint latestRandomSeed);\n\n    function computeNominalCR(uint _coll, uint _debt) external pure returns (uint);\n\n    function computeCR(uint _coll, uint _debt, uint _price) external pure returns (uint);\n}\n"
    },
    "contracts/interfaces/ISortedTroves.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n// Common interface for the SortedTroves Doubly Linked List.\ninterface ISortedTroves {\n\n    // --- Events ---\n    \n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\n    event NodeAdded(address _id, uint _NICR);\n    event NodeRemoved(address _id);\n\n    // --- Functions ---\n    \n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\n\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\n\n    function remove(address _id) external;\n\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\n\n    function contains(address _id) external view returns (bool);\n\n    function isFull() external view returns (bool);\n\n    function isEmpty() external view returns (bool);\n\n    function getSize() external view returns (uint256);\n\n    function getMaxSize() external view returns (uint256);\n\n    function getFirst() external view returns (address);\n\n    function getLast() external view returns (address);\n\n    function getNext(address _id) external view returns (address);\n\n    function getPrev(address _id) external view returns (address);\n\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\n\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\n}\n"
    },
    "contracts/interfaces/ITroveManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n\n// Common interface for the Trove Manager.\ninterface ITroveManager {\n    \n    // --- Events ---\n\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\n    event ActivePoolAddressChanged(address _activePoolAddress);\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n    event GasPoolAddressChanged(address _gasPoolAddress);\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n    event LQTYTokenAddressChanged(address _lqtyTokenAddress);\n    event LQTYStakingAddressChanged(address _lqtyStakingAddress);\n\n    event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation, uint _LUSDGasCompensation);\n    event Redemption(uint _attemptedLUSDAmount, uint _actualLUSDAmount, uint _ETHSent, uint _ETHFee);\n    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\n    event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);\n    event BaseRateUpdated(uint _baseRate);\n    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\n    event TotalStakesUpdated(uint _newTotalStakes);\n    event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);\n    event LTermsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n    event TroveSnapshotsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n    event TroveIndexUpdated(address _borrower, uint _newIndex);\n\n    function getTroveOwnersCount() external view returns (uint);\n\n    function getTroveFromTroveOwnersArray(uint _index) external view returns (address);\n\n    function getNominalICR(address _borrower) external view returns (uint);\n    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\n\n    function liquidate(address _borrower) external;\n\n    function liquidateTroves(uint _n) external;\n\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\n\n    function redeemCollateral(\n        uint _LUSDAmount,\n        address _firstRedemptionHint,\n        address _upperPartialRedemptionHint,\n        address _lowerPartialRedemptionHint,\n        uint _partialRedemptionHintNICR,\n        uint _maxIterations,\n        uint _maxFee\n    ) external; \n\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\n\n    function updateTroveRewardSnapshots(address _borrower) external;\n\n    function addTroveOwnerToArray(address _borrower) external returns (uint index);\n\n    function applyPendingRewards(address _borrower) external;\n\n    function getPendingETHReward(address _borrower) external view returns (uint);\n\n    function getPendingLUSDDebtReward(address _borrower) external view returns (uint);\n\n     function hasPendingRewards(address _borrower) external view returns (bool);\n\n    function getEntireDebtAndColl(address _borrower) external view returns (\n        uint debt, \n        uint coll, \n        uint pendingLUSDDebtReward, \n        uint pendingETHReward\n    );\n\n    function closeTrove(address _borrower) external;\n\n    function removeStake(address _borrower) external;\n\n    function getRedemptionRate() external view returns (uint);\n    function getRedemptionRateWithDecay() external view returns (uint);\n\n    function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\n\n    function getBorrowingRate() external view returns (uint);\n    function getBorrowingRateWithDecay() external view returns (uint);\n\n    function getBorrowingFee(uint LUSDDebt) external view returns (uint);\n    function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\n\n    function decayBaseRateFromBorrowing() external;\n\n    function getTroveStatus(address _borrower) external view returns (uint);\n    \n    function getTroveStake(address _borrower) external view returns (uint);\n\n    function getTroveDebt(address _borrower) external view returns (uint);\n\n    function getTroveColl(address _borrower) external view returns (uint);\n\n    function setTroveStatus(address _borrower, uint num) external;\n\n    function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);\n\n    function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint); \n\n    function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint); \n\n    function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint); \n\n    function getTCR(uint _price) external view returns (uint);\n\n    function checkRecoveryMode(uint _price) external view returns (bool);\n\n    function Troves(address) external view returns (uint256, uint256, uint256, uint8, uint128); \n}\n"
    }
  }
}}