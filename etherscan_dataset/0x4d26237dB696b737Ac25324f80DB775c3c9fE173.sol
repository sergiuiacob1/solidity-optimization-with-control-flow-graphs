{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Renderers/SmartbagsRenderer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport '../utils/Base64.sol';\nimport '../SmartbagsUtils.sol';\n\ncontract SmartbagsRenderer {\n    using Strings for uint256;\n\n    function render(\n        address contractAddress,\n        string memory tokenNumber,\n        string memory name,\n        SmartbagsUtils.Color memory color,\n        bytes memory texture,\n        bytes memory fonts\n    ) external view returns (string memory) {\n        string memory imgDataURI = Base64.toB64SVG(\n            _renderImage(\n                abi.encodePacked(\n                    'data:image/bmp;base64,',\n                    Base64.encode(\n                        bytes.concat(\n                            bytes18(0x424D7C000000000000001A0000000C000000), // bmp header\n                            bytes2(uint16(56)) << 8,\n                            bytes2(uint16(56)) << 8,\n                            bytes4(0x01001800),\n                            SmartbagsUtils.renderContract(\n                                contractAddress,\n                                9408\n                            ),\n                            bytes2(0)\n                        )\n                    )\n                ),\n                texture,\n                fonts,\n                uint256(uint160(contractAddress)).toHexString(20),\n                tokenNumber,\n                name,\n                color.color\n            )\n        );\n\n        return\n            Base64.toB64JSON(\n                abi.encodePacked(\n                    '{\"name\":\"BAG #',\n                    tokenNumber,\n                    '\",\"description\":\"This smartbag uses contract ',\n                    uint256(uint160(contractAddress)).toHexString(20),\n                    ' to generate its output.\\\\n\\\\n',\n                    'Handle with care.\\\\n\\\\n',\n                    '#thetokenisthecanvas\",\"attributes\":[{\"trait_type\":\"color\",\"value\":\"',\n                    color.name,\n                    '\"},{\"trait_type\":\"Contract Address\",\"value\":\"',\n                    uint256(uint160(contractAddress)).toHexString(20),\n                    '\"}],\"image\":\"',\n                    imgDataURI,\n                    '\"}'\n                )\n            );\n    }\n\n    function _renderImage(\n        bytes memory bmpURI,\n        bytes memory texture,\n        bytes memory fonts,\n        string memory addrString,\n        string memory tokenNumber,\n        string memory name,\n        string memory color\n    ) internal pure returns (bytes memory) {\n        bytes memory shortName;\n        if (bytes(name).length > 23) {\n            shortName = new bytes(23);\n            for (uint256 i; i < 23; i++) {\n                if (i >= 20) shortName[i] = bytes1('.');\n                else shortName[i] = bytes(name)[i];\n            }\n        } else {\n            shortName = bytes(name);\n        }\n\n        // create the SVG\n        return\n            abi.encodePacked(\n                abi.encodePacked(\n                    \"<svg width='2884' height='2884' viewBox='0 0 2884 2884' xmlns='http://www.w3.org/2000/svg'>\",\n                    '<style>',\n                    fonts,\n                    '.contractImage {image-rendering:optimizeSpeed;image-rendering:-moz-crisp-edges;image-rendering:-o-crisp-edges;image-rendering:-webkit-optimize-contrast;image-rendering:optimize-contrast;image-rendering:crisp-edges;image-rendering:pixelated;-ms-interpolation-mode:nearest-neighbor;}',\n                    '.id {font-family:arial, sans-serif;fill:#ffeeff;font-size:130px;font-weight:800;letter-spacing:-4px;}svg {filter:contrast(1.25) saturate(1) brightness(1.1);}',\n                    '</style>'\n                ),\n                abi.encodePacked(\n                    '<defs>',\n                    \"<filter id='threshold' x='0%' y='0%' width='100%' height='100%'>\",\n                    \"<feFlood x='0' y='0' height='4' width='4' result='pixel'/>\",\n                    \"<feComposite in='pixel' width='22' height='22' result='compositedPixel'/>\",\n                    \"<feTile in='compositedPixel' result='a'/>\",\n                    \"<feComposite in='SourceGraphic' in2='a' operator='in' result='pix'/>\",\n                    \"<feMorphology in='pix' operator='dilate' radius='10.5' result='pix'/>\",\n                    \"<feColorMatrix in='pix' type='saturate' values='0'/>\",\n                    \"<feColorMatrix type='matrix' values='-1 0 0 0 1 0 -1 0 0 1 0 0 -1 0 1 0 0 0 1 0'/>\",\n                    '<feComponentTransfer>',\n                    \"<feFuncR type='discrete' tableValues='0 0  1'/>\",\n                    \"<feFuncG type='discrete' tableValues='0 0 1'/>\",\n                    \"<feFuncB type='discrete' tableValues='0 0  1'/>\",\n                    '</feComponentTransfer>',\n                    '</filter>'\n                ),\n                abi.encodePacked(\n                    \"<pattern id='a' patternUnits='userSpaceOnUse' width='70' height='8' patternTransform='scale(2.8) rotate(140)'>\",\n                    \"<rect x='0' y='0' width='100%' height='100%' fill='hsla(0, 0%, 0%, 1)'/>\",\n                    \"<path d='M-.02 22c8.373 0 11.938-4.695 16.32-9.662C20.785 7.258 25.728 2 35 2c9.272 0 14.215 5.258 18.7 10.338C58.082 17.305 61.647 22 70.02 22M-.02 14.002C8.353 14 11.918 9.306 16.3 4.339 20.785-.742 25.728-6 35-6 44.272-6 49.215-.742 53.7 4.339c4.382 4.967 7.947 9.661 16.32 9.664M70 6.004c-8.373-.001-11.918-4.698-16.3-9.665C49.215-8.742 44.272-14 35-14c-9.272 0-14.215 5.258-18.7 10.339C11.918 1.306 8.353 6-.02 6.002' stroke-width='3' stroke='white' fill='none'/>\",\n                    '</pattern>',\n                    \"<linearGradient id='lgrad' x1='50%' y1='0%' x2='50%' y2='100%' >\",\n                    \"<stop offset='0%' style='stop-color:rgb(255,255,255);stop-opacity:1.00'/>\",\n                    \"<stop offset='100%' style='stop-color:rgba(0,0,0,0);stop-opacity:1.00'/>\",\n                    '</linearGradient>',\n                    \"<image id='t' x='701' y='465' width='1540' height='1925' href='data:image/png;base64,\",\n                    texture,\n                    \"'/>\",\n                    \"<mask id='smartbagMask'>\",\n                    \"<rect x='0' y='0' width='100%' height='100%' fill='white'/>\"\n                ),\n                abi.encodePacked(\n                    \"<g transform='translate(753 540)'>\",\n                    \"<path d='M15.6986 12.0848C15.6986 1.79058 23.0156 1.48782 26.6741 2.62321C56.3635 4.10143 132.391 7.05788 198.984 7.05788C282.225 7.05788 342.7 16.3069 381.831 21.9987C420.961 27.6904 423.807 33.3821 457.246 31.2477C497.8 28.4019 500.646 32.6707 573.927 38.3624C684.915 51.4534 802.725 39.2665 847.756 31.5367C892.219 27.2158 991.598 18.4069 1033.41 17.7379C1075.23 17.0688 1091.53 14.9502 1094.46 13.9746C1138.78 4.35723 1136.28 3.93908 1178.51 3.52094C1220.74 3.10279 1394.46 2.25186 1406.44 1.12229C1418.41 -0.00728762 1415.47 6.99607 1415.92 9.48114C1416.38 11.9662 1414.34 39.9796 1414.57 62.5711C1414.79 85.1626 1412.08 124.698 1412.99 151.582C1413.89 178.465 1410.73 178.465 1410.95 188.18C1411.13 195.951 1401.99 195.635 1397.4 194.505C1394.24 193.451 1387.64 193.15 1386.55 200.379C1385.47 207.608 1390.47 210.018 1393.11 210.319C1394.24 210.319 1397.99 210.5 1403.95 211.223C1411.41 212.127 1410.95 214.838 1411.01 226.543C1410.32 279.886 1401.31 439.915 1401.31 543.829C1399.23 726.72 1399.93 758.587 1404.08 801.539C1407.41 835.9 1409.16 889.751 1409.63 912.381C1409.16 924.158 1409.63 960.875 1411.01 980.272C1415.86 1042.62 1413.78 1082.11 1410.32 1127.83C1406.85 1173.55 1402 1187.41 1401.31 1254.61C1400.62 1321.81 1403.39 1338.43 1403.39 1427.8C1403.39 1517.17 1404.77 1637.46 1405.03 1639.79C1405.24 1641.65 1407.02 1724.4 1407.89 1765.54L1407.88 1765.66C1407.69 1775.24 1407.63 1778.5 1392.41 1777.34C1374.99 1777.92 1350.42 1775.45 1316.44 1774.39C1243.17 1774.39 1175.21 1757.4 1139.11 1753.15C1068.6 1746.36 1034.7 1746.78 1026.55 1747.84C929.927 1762.71 887.453 1746.78 844.98 1743.6C745.166 1740.41 706.94 1751.03 653.848 1759.52C550.849 1779.7 542.354 1773.33 497.757 1770.14C363.964 1763.77 320.429 1768.02 280.079 1769.08C197.255 1777.57 109.075 1764.33 102.665 1762.57C94.6527 1760.16 39.8989 1755.34 31.1037 1755.49C13.215 1756.68 13.215 1739.98 12.9168 1735.66C12.6187 1731.34 11.4551 1707.99 12.5028 1700.66C13.3409 1694.79 9.35966 1673.42 7.26425 1663.47C3.07344 1638.32 3.07344 1597.99 9.88351 1548.74C16.6936 1499.5 20.3605 1435.59 19.8367 1411.49C19.3128 1349.68 20.3605 1369.06 20.3605 1308.82C20.3605 1248.58 17.7413 1236 5.69274 1185.19C-6.35585 1134.38 5.16889 1079.37 21.9321 1000.27C38.6954 921.169 29.2661 867.212 27.1707 838.4C25.0753 809.588 13.0266 729.439 7.78811 678.102C2.54959 626.764 8.31194 550.806 9.35964 537.185C10.4073 523.565 14.0743 498.42 12.671 474.187C10.4002 431.421 11.5356 368.975 12.671 345.51C13.8063 322.045 15.6986 223.267 15.6986 219.482C15.6986 215.697 15.6986 210.02 26.6741 210.399C37.6495 210.777 37.6494 208.128 39.1633 202.83C40.3744 198.591 36.6402 195.765 34.6218 194.882C33.2341 195.008 29.0205 195.185 23.2679 194.882C17.5153 194.579 15.8248 189.962 15.6986 187.691V12.0848Z' fill='black'/>\",\n                    '</g>',\n                    '</mask>',\n                    \"<mask id='frontMask'>\",\n                    \"<rect x='0' y='0' width='100%' height='100%' fill='white'/>\",\n                    \"<rect x='910' y='1090' width='1100' height='1070' fill='black' style='opacity:.3'/>\",\n                    '</mask>',\n                    '</defs>'\n                ),\n                abi.encodePacked(\n                    \"<rect id='bg' width='100%' height='100%' fill='black'/>\",\n                    \"<g id='bag'>\",\n                    \"<rect width='100%' height='574'  transform='translate(701 465)' fill='#ddccdd'/>\",\n                    \"<image transform='translate(706 1060)' filter='url(#threshold)' class='contractImage' width='1250' height='1250' href='\",\n                    bmpURI,\n                    \"'/>\",\n                    \"<g style='font-family:arial,sans-serif;fill:black;font-size:15em;font-style:italic;font-weight:800;letter-spacing:-15px;transform-origin:0% 0%;transform:rotate(-90deg);stroke:white;stroke-width:5px;mix-blend-mode:difference;'>\",\n                    \"<text x='-3030' y='1928'>THETOKENISTHECANVASTHETOKENISTHECANVAS</text>\",\n                    \"<text x='-4630' y='1735'>THETOKENISTHECANVASTHETOKENISTHECANVAS</text>\",\n                    '</g>',\n                    \"<rect x='803' y='800' width='480' height='40' fill='black'/>\"\n                ),\n                abi.encodePacked(\n                    \"<rect x='1956' y='1038' width='300' height='100%' fill='black'/>\",\n                    \"<text x='-2330' y='2150' style='font-family:InterB;fill:#ddccdd;font-size:15em;letter-spacing:.06em;transform-origin:0% 0%;transform:rotate(-90deg);mix-blend-mode:difference;'>\",\n                    name,\n                    '</text>',\n                    \"<rect x='1000' y='1050' width='90' height='1300' fill='url(#a)' style='mix-blend-mode:multiply;'/>\",\n                    \"<rect x='706' y='1060' width='1250' height='1255' style='mix-blend-mode:darken' fill='\",\n                    color,\n                    \"'/>\",\n                    \"<circle cx='1805' cy='780' r='185' style='fill:black'/>\",\n                    \"<text x='1675' y='825' class='id'>\"\n                ),\n                abi.encodePacked(\n                    tokenNumber,\n                    '</text>',\n                    \"<text x='1640' y='820' class='id' style='font-family:InterB;font-size:100px;stroke:black;stroke-width:13px;'>#</text>\",\n                    \"<text x='1640' y='820' class='id' style='font-family:InterB;font-size:100px;stroke-linecap:round;'>#</text>\",\n                    \"<text x='803' y='780' style='font-family:InterB;fill:black;font-size:35px;letter-spacing:-2px;'>\",\n                    shortName,\n                    '</text>',\n                    \"<text x='814' y='826' style='font-family:Monospace,sans-serif;fill:#ffeeff;font-size:17px;font-weight:100;letter-spacing:.8px;'>\",\n                    addrString,\n                    '</text>',\n                    \"<text x='803' y='980' style='font-family:InterEB;fill:black;font-size:145px;letter-spacing:-12px;'>smartbags.</text>\"\n                ),\n                abi.encodePacked(\n                    \"<g transform='translate(1860 580) scale(3)' style='fill:#ffeeff;mix-blend-mode:difference;'>\",\n                    \"<path d='M0 10.25L10.25 0L20.5 10.25L30.75 0L41 10.25L30.75 20.5L41 30.75L30.75 41L20.5 30.75L10.25 41L0 30.75L10.25 20.5L0 10.25Z'></path>\",\n                    '</g>',\n                    \"<g style='font-family:arial,sans-serif;fill:black;font-size:12px;font-weight:300;letter-spacing:-.5px;'>\",\n                    \"<text x='805' y='600'>&gt; node smartbags.js</text>\",\n                    \"<text x='805' y='615'>&gt; limited editions NFTs representing smart contracts.</text>\",\n                    \"<text x='805' y='630'>&gt; each smartbag is a visual representation of the corresponding smart contract.</text>\",\n                    \"<text x='805' y='645'>&gt; the visual is created on-chain.</text>\",\n                    \"<text x='805' y='660'>&gt; created by @dievardump &amp; @nahiko.</text>\",\n                    \"<text x='805' y='675'>&gt; the token is the canvas.</text>\",\n                    \"<text x='805' y='690'>&gt; loading...</text>\"\n                ),\n                abi.encodePacked(\n                    '</g>',\n                    \"<rect x='2128' width='99' height='100%' fill='\",\n                    color,\n                    \"'/>\",\n                    \"<use href='#t' style='mix-blend-mode:screen;opacity:.8;'/>\",\n                    \"<use href='#t' style='mix-blend-mode:multiply;opacity:.7;filter:blur(8px)' mask='url(#frontMask)'/>\",\n                    \"<use href='#t' style='mix-blend-mode:overlay;opacity:.2;'/>\",\n                    \"<rect x='910' y='1090' width='1100' height='1070' fill='url(#lgrad)' style='mix-blend-mode:overlay;opacity:0.2'/>\",\n                    \"<rect x='910' y='1090' width='1100' height='1070' fill='white' style='mix-blend-mode:color;opacity:0.2'/>\",\n                    \"<rect width='100%' height='100%' fill='black' mask='url(#smartbagMask)'/>\",\n                    '</g>',\n                    '</svg>'\n                )\n            );\n    }\n}\n"
    },
    "contracts/SmartbagsUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\nlibrary SmartbagsUtils {\n    using Strings for uint256;\n\n    struct Color {\n        string name;\n        string color;\n    }\n\n    function getColor(address contractAddress)\n        internal\n        pure\n        returns (Color memory)\n    {\n        uint256 colorSeed = uint256(uint160(contractAddress));\n\n        return\n            [\n                Color({color: '#fc6f03', name: 'orange'}),\n                Color({color: '#ff0000', name: 'red'}),\n                Color({color: '#ffb700', name: 'gold'}),\n                Color({color: '#ffe600', name: 'yellow'}),\n                Color({color: '#fbff00', name: 'light green'}),\n                Color({color: '#a6ff00', name: 'green'}),\n                Color({color: '#dee060', name: 'pastel green'}),\n                Color({color: '#f28b85', name: 'salmon'}),\n                Color({color: '#48b007', name: 'forest green'}),\n                Color({color: '#00ff55', name: 'turquoise green'}),\n                Color({color: '#b4ff05', name: 'flashy Green'}),\n                Color({color: '#61c984', name: 'alguae'}),\n                Color({color: '#00ff99', name: 'turquoise'}),\n                Color({color: '#00ffc3', name: 'flashy blue'}),\n                Color({color: '#00fff2', name: 'light blue'}),\n                Color({color: '#009c94', name: 'aqua blue'}),\n                Color({color: '#0363ff', name: 'deep blue'}),\n                Color({color: '#3636c2', name: 'blurple'}),\n                Color({color: '#5d00ff', name: 'purple'}),\n                Color({color: '#ff4ff9', name: 'pink'}),\n                Color({color: '#fc0065', name: 'redPink'}),\n                Color({color: '#ffffff', name: 'white'}),\n                Color({color: '#c95136', name: 'copper'}),\n                Color({color: '#c5c8c9', name: 'silver'})\n            ][colorSeed % 24];\n    }\n\n    function getName(address contractAddress)\n        internal\n        view\n        returns (string memory)\n    {\n        // get name from contract if possible\n        try IERC721Metadata(contractAddress).name() returns (\n            string memory name\n        ) {\n            // uppercase the name, and remove any non AZ09 characters\n            bytes memory strBytes = bytes(name);\n            bytes memory sanitized = new bytes(strBytes.length);\n            uint8 charCode;\n            bytes1 char;\n            for (uint256 i; i < strBytes.length; i++) {\n                char = strBytes[i];\n                charCode = uint8(char);\n\n                if (\n                    // ! \" # $ %\n                    (charCode >= 33 && charCode <= 37) ||\n                    // ' ( ) * + - . /\n                    (charCode >= 39 && charCode <= 47) ||\n                    // 0-9\n                    (charCode >= 48 && charCode <= 57) ||\n                    // A - Z\n                    (charCode >= 65 && charCode <= 90)\n                ) {\n                    sanitized[i] = char;\n                } else if (charCode >= 97 && charCode <= 122) {\n                    // if a-z, use uppercase\n                    sanitized[i] = bytes1(charCode - 32);\n                } else {\n                    // for all others, use a space\n                    sanitized[i] = 0x32;\n                }\n            }\n\n            if (sanitized.length > 0) {\n                return string(sanitized);\n            }\n        } catch Error(string memory) {} catch (bytes memory) {}\n        return uint256(uint160(contractAddress)).toHexString(20);\n    }\n\n    function tokenNumber(uint256 tokenId)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory tokenStr = bytes(tokenId.toString());\n        bytes memory fixedTokenStr = new bytes(4);\n        fixedTokenStr[0] = 0x30;\n        fixedTokenStr[1] = 0x30;\n        fixedTokenStr[2] = 0x30;\n        fixedTokenStr[3] = 0x30;\n\n        uint256 it;\n        for (uint256 i = tokenStr.length; i > 0; i--) {\n            fixedTokenStr[3 - it] = tokenStr[i - 1];\n            it++;\n        }\n\n        return string(fixedTokenStr);\n    }\n\n    function renderContract(address _addr, uint256 length)\n        internal\n        view\n        returns (bytes memory)\n    {\n        // get contract full size\n        uint256 maxSize;\n        assembly {\n            maxSize := extcodesize(_addr)\n        }\n\n        uint256 offset = maxSize > length\n            ? (maxSize - length) % uint256(uint160(_addr))\n            : 0;\n\n        bytes memory code = getContractBytecode(\n            _addr,\n            offset,\n            maxSize < length ? maxSize : length\n        );\n\n        if (maxSize < length) {\n            uint256 toFill = length - maxSize;\n            uint256 length = toFill / 2;\n\n            bytes memory filler = new bytes(length);\n            for (uint256 i; i < length; i++) {\n                filler[i] = 0xff;\n            }\n\n            return abi.encodePacked(filler, code, filler);\n        }\n\n        return code;\n    }\n\n    function getContractBytecode(\n        address _addr,\n        uint256 start,\n        uint256 length\n    ) internal view returns (bytes memory o_code) {\n        assembly {\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(\n                0x40,\n                add(o_code, and(add(add(length, 0x20), 0x1f), not(0x1f)))\n            )\n            // store length in memory\n            mstore(o_code, length)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(_addr, add(o_code, 0x20), start, length)\n        }\n    }\n}\n"
    },
    "contracts/utils/Base64.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\n\n/// modified to add some utility functions\nlibrary Base64 {\n    string internal constant TABLE =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n\n    function toB64JSON(bytes memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    encode(toEncode)\n                )\n            );\n    }\n\n    function toB64JSON(string memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return toB64JSON(bytes(toEncode));\n    }\n\n    function toB64SVG(bytes memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked('data:image/svg+xml;base64,', encode(toEncode))\n            );\n    }\n\n    function toB64SVG(string memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return toB64SVG(bytes(toEncode));\n    }\n}\n"
    }
  }
}}