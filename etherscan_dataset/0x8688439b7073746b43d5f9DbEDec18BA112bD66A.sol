{"Address.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * Address库定义isContract函数用于检查指定地址是否为合约地址\r\n */\r\nlibrary Address {\r\n\r\n    /**\r\n     * 判断是否是合约地址\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\r\n    }\r\n}"},"Context.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    /**\r\n     * 内部函数_msgSender，获取函数调用者地址\r\n     */\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}"},"ERC20.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Context.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n\r\n    // 引入SafeMath安全数学运算库，避免数学运算整型溢出\r\n    using SafeMath for uint;\r\n\r\n    // 用mapping保存每个地址对应的余额\r\n    mapping (address =\u003e uint) private _balances;\r\n\r\n    // 存储对账号的控制 \r\n    mapping (address =\u003e mapping (address =\u003e uint)) private _allowances;\r\n\r\n    // 总供应量\r\n    uint private _totalSupply;\r\n\r\n    /**\r\n     * 获取总供应量\r\n     */\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * 获取某个地址的余额\r\n     */\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * 转账\r\n     */\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  获取被授权令牌余额,获取 _owner 地址授权给 _spender 地址可以转移的令牌的余额\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * 授权，允许 spender 地址从你的账户中转移 amount 个令牌到任何地方\r\n     */\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        // 调用内部函数_approve设置调用者对spender的授权值\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 代理转账函数，调用者代理代币持有者sender向指定地址recipient转账一定数量amount代币\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        // 调用内部函数_transfer进行代币转账\r\n        _transfer(sender, recipient, amount);\r\n        // 调用内部函数_approve更新转账源地址sender对调用者的授权值\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 增加授权值函数，调用者增加对spender的授权值\r\n     */\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 减少授权值函数，调用者减少对spender的授权值\r\n     */\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 转账\r\n     */\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        // 非零地址检查\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        // 非零地址检查，避免转账代币丢失\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        // 修改转账双方地址的代币余额\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        // 触发Transfer事件\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * 铸币\r\n     */\r\n    function _mint(address account, uint amount) internal {\r\n        // 非零地址检查\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        // 更新代币总量\r\n        _totalSupply = _totalSupply.add(amount);\r\n        // 修改代币销毁地址account的代币余额\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * 代币销毁\r\n     */\r\n    function _burn(address account, uint amount) internal {\r\n        // 非零地址检查\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        // 修改代币销毁地址account的代币余额\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        // 更新代币总量\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        // 触发Transfer事件\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * 批准_spender能从合约调用账户中转出数量为amount的token\r\n     */\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        // 非零地址检查\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        // 非零地址检查\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        // 设置owner对spender的授权值为amount\r\n        _allowances[owner][spender] = amount;\r\n        // 触发Approval事件\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}"},"ERC20Detailed.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./IERC20.sol\u0027;\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n    string private _name;  // 代币的名字\r\n    string private _symbol; // 代币的简称\r\n    uint8 private _decimals; // 代币的精度，例如：为2的话，则精确到小数点后面两位\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    /** \r\n     * 获取代币的名称\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /** \r\n     * 获取代币的简称\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /** \r\n     * 获取代币的精度\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}"},"ERC20Token.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./SafeERC20.sol\u0027;\r\nimport \u0027./ERC20Detailed.sol\u0027;\r\nimport \u0027./ERC20.sol\u0027;\r\n\r\n/**\r\n * 发布的token\r\n */\r\ncontract ERC20Token is ERC20, ERC20Detailed {\r\n\r\n    // 引入SafeERC20库，其内部函数用于安全外部ERC20合约转账相关操作\r\n    using SafeERC20 for IERC20;\r\n    // 使用Address库中函数检查指定地址是否为合约地址\r\n    using Address for address;\r\n    // 引入SafeMath安全数学运算库，避免数学运算整型溢出\r\n    using SafeMath for uint;\r\n\r\n    // 存储治理管理员地址\r\n    address public governance;\r\n\r\n    // 存储指定地址的铸币权限\r\n    mapping (address =\u003e bool) public minters;\r\n\r\n\r\n    // 构造函数，设置代币名称、简称、精度；将发布合约的账号设置为治理账号\r\n    constructor () public ERC20Detailed(\"HX99.COM\", \"HX99.com\", 18) {\r\n        governance = tx.origin;\r\n    }\r\n\r\n    /**\r\n     * 铸币\r\n     *   拥有铸币权限地址向指定地址铸币\r\n     */\r\n    function mint(address account, uint256 amount) public {\r\n        require(minters[msg.sender], \"!minter\");\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * 设置治理管理员地址\r\n     */\r\n    function setGovernance(address _governance) public {\r\n        // 要求调用者必须为当前治理管理员地址\r\n        require(msg.sender == governance, \"!governance\");\r\n        // 更新governance\r\n        governance = _governance;\r\n    }\r\n\r\n    /**\r\n     * 添加铸币权限函数\r\n     */\r\n    function addMinter(address _minter) public {\r\n        // 要求调用者必须为当前治理管理员地址\r\n        require(msg.sender == governance, \"!governance\");\r\n        // 变更指定地址_minter的铸币权限为true\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    /**\r\n     * 移除铸币权限函数\r\n     */\r\n    function removeMinter(address _minter) public {\r\n        // 要求调用者必须为当前治理管理员地址\r\n        require(msg.sender == governance, \"!governance\");\r\n        // 变更指定地址_minter的铸币权限为false\r\n        minters[_minter] = false;\r\n    }\r\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * 定义ERC20 Token标准要求的接口函数\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * token总量\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * 某个地址的余额\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * 转账\r\n     * @param recipient 接收者\r\n     * @param amount    转账金额\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * 获取_spender可以从账户_owner中转出token的剩余数量\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * 批准_spender能从合约调用账户中转出数量为_value的token\r\n     * @param spender 授权给的地址\r\n     * @param amount  金额\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * 代理转账函数，调用者代理代币持有者sender向指定地址recipient转账一定数量amount代币\r\n        （用于允许合约代理某人转移token。条件是sender账户必须经过了approve）\r\n     * @param sender    转账人\r\n     * @param recipient 接收者\r\n     * @param amount    转账金额\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * 发生转账时必须要触发的事件，transfer 和 transferFrom 成功执行时必须触发的事件\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * 当函数approve 成功执行时必须触发的事件\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}"},"SafeERC20.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \u0027./Address.sol\u0027;\r\nimport \u0027./IERC20.sol\u0027;\r\n\r\n/**\r\n * SafeERC20库，其内部函数用于安全外部ERC20合约转账相关操作\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    // 引入SafeMath安全数学运算库，避免数学运算整型溢出\r\n    using SafeMath for uint;\r\n    // 使用Address库中函数检查指定地址是否为合约地址\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length \u003e 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * SafeMath库定义如下函数用于安全数学运算\r\n */\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}"}}