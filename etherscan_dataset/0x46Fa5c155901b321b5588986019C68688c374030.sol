{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/accumulator/AngleAccumulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"./BaseAccumulator.sol\";\n\n/// @title A contract that accumulates sanUSDC_EUR rewards and notifies them to the LGV4\n/// @author StakeDAO\ncontract AngleAccumulator is BaseAccumulator {\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(address _tokenReward) BaseAccumulator(_tokenReward) {}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\t/// @notice Claims rewards from the locker and notify an amount to the LGV4\n\t/// @param _amount amount to notify after the claim\n\tfunction claimAndNotify(uint256 _amount) external {\n\t\trequire(locker != address(0), \"locker not set\");\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\n\t\t_notifyReward(tokenReward, _amount);\n\t}\n\n\t/// @notice Claims rewards from the locker and notify all to the LGV4\n\tfunction claimAndNotifyAll() external {\n\t\trequire(locker != address(0), \"locker not set\");\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\n\t\tuint256 amount = IERC20(tokenReward).balanceOf(address(this));\n\t\t_notifyReward(tokenReward, amount);\n\t}\n}\n"
    },
    "contracts/accumulator/BaseAccumulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ILiquidityGauge.sol\";\nimport \"../interfaces/ILocker.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title A contract that defines the functions shared by all accumulators\n/// @author StakeDAO\ncontract BaseAccumulator {\n\tusing SafeERC20 for IERC20;\n\t/* ========== STATE VARIABLES ========== */\n\taddress public governance;\n\taddress public locker;\n\taddress public tokenReward;\n\taddress public gauge;\n\n\t/* ========== EVENTS ========== */\n\tevent GaugeSet(address oldGauge, address newGauge);\n\tevent RewardNotified(address gauge, address tokenReward, uint256 amount);\n\tevent LockerSet(address oldLocker, address newLocker);\n\tevent GovernanceSet(address oldGov, address newGov);\n\tevent TokenRewardSet(address oldTr, address newTr);\n\tevent TokenDeposited(address token, uint256 amount);\n\tevent ERC20Rescued(address token, uint256 amount);\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(address _tokenReward) {\n\t\ttokenReward = _tokenReward;\n\t\tgovernance = msg.sender;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\n\t/// @notice Notify the reward using an extra token\n\t/// @param _tokenReward token address to notify\n\t/// @param _amount amount to notify\n\tfunction notifyExtraReward(address _tokenReward, uint256 _amount) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\t_notifyReward(_tokenReward, _amount);\n\t}\n\n\t/// @notice Notify the reward using all balance of extra token\n\t/// @param _tokenReward token address to notify\n\tfunction notifyAllExtraReward(address _tokenReward) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\tuint256 amount = IERC20(_tokenReward).balanceOf(address(this));\n\t\t_notifyReward(_tokenReward, amount);\n\t}\n\n\t/// @notice Notify the new reward to the LGV4\n\t/// @param _tokenReward token to notify\n\t/// @param _amount amount to notify\n\tfunction _notifyReward(address _tokenReward, uint256 _amount) internal {\n\t\trequire(gauge != address(0), \"gauge not set\");\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\tuint256 balanceBefore = IERC20(_tokenReward).balanceOf(address(this));\n\t\trequire(balanceBefore >= _amount, \"amount not enough\");\n\t\tif (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor != address(0)) {\n\t\t\tIERC20(_tokenReward).approve(gauge, _amount);\n\t\t\tILiquidityGauge(gauge).deposit_reward_token(_tokenReward, _amount);\n\t\t\tuint256 balanceAfter = IERC20(_tokenReward).balanceOf(address(this));\n\t\t\trequire(balanceBefore - balanceAfter == _amount, \"wrong amount notified\");\n\t\t\temit RewardNotified(gauge, _tokenReward, _amount);\n\t\t}\n\t}\n\n\t/// @notice Deposit token into the accumulator\n\t/// @param _token token to deposit\n\t/// @param _amount amount to deposit\n\tfunction depositToken(address _token, uint256 _amount) external {\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\tIERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\t\temit TokenDeposited(_token, _amount);\n\t}\n\n\t/// @notice Sets gauge for the accumulator which will receive and distribute the rewards\n\t/// @dev Can be called only by the governance\n\t/// @param _gauge gauge address\n\tfunction setGauge(address _gauge) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_gauge != address(0), \"can't be zero address\");\n\t\temit GaugeSet(gauge, _gauge);\n\t\tgauge = _gauge;\n\t}\n\n\t/// @notice Allows the governance to set the new governance\n\t/// @dev Can be called only by the governance\n\t/// @param _governance governance address\n\tfunction setGovernance(address _governance) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_governance != address(0), \"can't be zero address\");\n\t\temit GovernanceSet(governance, _governance);\n\t\tgovernance = _governance;\n\t}\n\n\t/// @notice Allows the governance to set the locker\n\t/// @dev Can be called only by the governance\n\t/// @param _locker locker address\n\tfunction setLocker(address _locker) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_locker != address(0), \"can't be zero address\");\n\t\temit LockerSet(locker, _locker);\n\t\tlocker = _locker;\n\t}\n\n\t/// @notice Allows the governance to set the token reward\n\t/// @dev Can be called only by the governance\n\t/// @param _tokenReward token reward address\n\tfunction setTokenReward(address _tokenReward) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_tokenReward != address(0), \"can't be zero address\");\n\t\temit TokenRewardSet(tokenReward, _tokenReward);\n\t\ttokenReward = _tokenReward;\n\t}\n\n\t/// @notice A function that rescue any ERC20 token\n\t/// @param _token token address\n\t/// @param _amount amount to rescue\n\t/// @param _recipient address to send token rescued\n\tfunction rescueERC20(\n\t\taddress _token,\n\t\tuint256 _amount,\n\t\taddress _recipient\n\t) external {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\trequire(_amount > 0, \"set an amount > 0\");\n\t\trequire(_recipient != address(0), \"can't be zero address\");\n\t\tIERC20(_token).safeTransfer(_recipient, _amount);\n\t\temit ERC20Rescued(_token, _amount);\n\t}\n}\n"
    },
    "contracts/factories/AngleVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"../strategy/AngleVault.sol\";\nimport \"../staking/GaugeMultiRewards.sol\";\n\n/**\n * @title Factory contract usefull for creating new angle vaults that supports LP related\n * to the angle platform, and the gauge multi rewards attached to it.\n */\ncontract AngleVaultFactory {\n\tusing ClonesUpgradeable for address;\n\n\taddress public vaultImpl = address(new AngleVault());\n\taddress public gaugeImpl = address(new GaugeMultiRewards());\n\n\tevent VaultDeployed(address proxy, address lpToken, address impl);\n\tevent GaugeDeployed(address proxy, address stakeToken, address impl);\n\n\t/**\n\t@dev Function to clone Angle Vault and its gauge contracts \n\t@param _vaultLPToken Angle LP token related to the vault \n\t@param _vaultGovernance vault governance address\n\t@param _vaultName vault name\n\t@param _vaultSymbol vault symbol\n\t@param _vaultAngleStrategy angle strategy proxy\n\t@param _gaugeGovernance gauge governance address\n\t@param _gaugeName gauge name\n\t@param _gaugeSymbol gauge symbol \n\t */\n\tfunction cloneAndInit(\n\t\tERC20Upgradeable _vaultLPToken,\n\t\taddress _vaultGovernance,\n\t\tstring memory _vaultName,\n\t\tstring memory _vaultSymbol,\n\t\tAngleStrategy _vaultAngleStrategy,\n\t\taddress _gaugeGovernance,\n\t\tstring memory _gaugeName,\n\t\tstring memory _gaugeSymbol\n\t) public {\n\t\taddress vaultImplAddress = _cloneAndInitVault(\n\t\t\tvaultImpl,\n\t\t\t_vaultLPToken,\n\t\t\t_vaultGovernance,\n\t\t\t_vaultName,\n\t\t\t_vaultSymbol,\n\t\t\t_vaultAngleStrategy\n\t\t);\n\t\taddress gaugeImplAddress = _cloneAndInitGauge(\n\t\t\tgaugeImpl,\n\t\t\tvaultImplAddress,\n\t\t\t_gaugeGovernance,\n\t\t\t_gaugeName,\n\t\t\t_gaugeSymbol\n\t\t);\n\t\tAngleVault(vaultImplAddress).setGaugeMultiRewards(gaugeImplAddress);\n\t\tAngleVault(vaultImplAddress).setGovernance(_vaultGovernance);\n\t}\n\n\t/**\n\t@dev Internal function to clone the vault \n\t@param _impl address of contract to clone\n\t@param _lpToken angle LP token address \n\t@param _governance governance address \n\t@param _name vault name\n\t@param _symbol vault symbol\n\t@param _angleStrategy angle strategy proxy\n\t */\n\tfunction _cloneAndInitVault(\n\t\taddress _impl,\n\t\tERC20Upgradeable _lpToken,\n\t\taddress _governance,\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tAngleStrategy _angleStrategy\n\t) internal returns (address) {\n\t\tAngleVault deployed = cloneVault(\n\t\t\t_impl,\n\t\t\t_lpToken,\n\t\t\tkeccak256(abi.encodePacked(_governance, _name, _symbol, _angleStrategy))\n\t\t);\n\t\tdeployed.init(_lpToken, address(this), _name, _symbol, _angleStrategy);\n\t\treturn address(deployed);\n\t}\n\n\t/**\n\t@dev Internal function to clone the gauge multi rewards\n\t@param _impl address of contract to clone\n\t@param _stakingToken sd LP token address \n\t@param _governance governance address \n\t@param _name gauge name\n\t@param _symbol gauge symbol\n\t */\n\tfunction _cloneAndInitGauge(\n\t\taddress _impl,\n\t\taddress _stakingToken,\n\t\taddress _governance,\n\t\tstring memory _name,\n\t\tstring memory _symbol\n\t) internal returns (address) {\n\t\tGaugeMultiRewards deployed = cloneGauge(\n\t\t\t_impl,\n\t\t\t_stakingToken,\n\t\t\tkeccak256(abi.encodePacked(_governance, _name, _symbol))\n\t\t);\n\t\tdeployed.init(_stakingToken, _stakingToken, _governance, _name, _symbol);\n\t\treturn address(deployed);\n\t}\n\n\t/**\n\t@dev Internal function that deploy and returns a clone of vault impl\n\t@param _impl address of contract to clone\n\t@param _lpToken angle LP token address\n\t@param _paramsHash governance+name+symbol+strategy parameters hash\n\t */\n\tfunction cloneVault(\n\t\taddress _impl,\n\t\tERC20Upgradeable _lpToken,\n\t\tbytes32 _paramsHash\n\t) internal returns (AngleVault) {\n\t\taddress deployed = address(_impl).cloneDeterministic(keccak256(abi.encodePacked(address(_lpToken), _paramsHash)));\n\t\temit VaultDeployed(deployed, address(_lpToken), _impl);\n\t\treturn AngleVault(deployed);\n\t}\n\n\t/**\n\t@dev Internal function that deploy and returns a clone of gauge impl\n\t@param _impl address of contract to clone\n\t@param _stakingToken sd LP token address\n\t@param _paramsHash governance+name+symbol parameters hash\n\t */\n\tfunction cloneGauge(\n\t\taddress _impl,\n\t\taddress _stakingToken,\n\t\tbytes32 _paramsHash\n\t) internal returns (GaugeMultiRewards) {\n\t\taddress deployed = address(_impl).cloneDeterministic(\n\t\t\tkeccak256(abi.encodePacked(address(_stakingToken), _paramsHash))\n\t\t);\n\t\temit GaugeDeployed(deployed, _stakingToken, _impl);\n\t\treturn GaugeMultiRewards(deployed);\n\t}\n\n\t/**\n\t@dev Function that predicts the future address passing the parameters\n\t@param _impl address of contract to clone\n\t@param _token token (LP or sdLP)\n\t@param _paramsHash parameters hash\n\t */\n\tfunction predictAddress(\n\t\taddress _impl,\n\t\tIERC20 _token,\n\t\tbytes32 _paramsHash\n\t) public view returns (address) {\n\t\treturn address(_impl).predictDeterministicAddress(keccak256(abi.encodePacked(address(_token), _paramsHash)));\n\t}\n}\n"
    },
    "contracts/interfaces/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.7;\n\ninterface ILiquidityGauge {\n\tstruct Reward {\n\t\taddress token;\n\t\taddress distributor;\n\t\tuint256 period_finish;\n\t\tuint256 rate;\n\t\tuint256 last_update;\n\t\tuint256 integral;\n\t}\n\n\t// solhint-disable-next-line\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\n\n\t// solhint-disable-next-line\n\tfunction claim_rewards_for(address _user, address _recipient) external;\n\n\t// // solhint-disable-next-line\n\t// function claim_rewards_for(address _user) external;\n\n\t// solhint-disable-next-line\n\tfunction deposit(uint256 _value, address _addr) external;\n\n\t// solhint-disable-next-line\n\tfunction reward_tokens(uint256 _i) external view returns (address);\n\n\t// solhint-disable-next-line\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\n\n\tfunction balanceOf(address) external returns (uint256);\n\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\n\n\tfunction user_checkpoint(address _user) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface ILocker {\n\tfunction createLock(uint256, uint256) external;\n\n\tfunction increaseAmount(uint256) external;\n\n\tfunction increaseUnlockTime(uint256) external;\n\n\tfunction release() external;\n\n\tfunction claimRewards(address,address) external;\n\n\tfunction claimFXSRewards(address) external;\n\n\tfunction execute(\n\t\taddress,\n\t\tuint256,\n\t\tbytes calldata\n\t) external returns (bool, bytes memory);\n\n\tfunction setGovernance(address) external;\n\n\tfunction voteGaugeWeight(address, uint256) external;\n\n\tfunction setAngleDepositor(address) external;\n\n\tfunction setFxsDepositor(address) external;\n}\n"
    },
    "contracts/interfaces/IMultiRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IMultiRewards {\n\tfunction balanceOf(address) external returns (uint256);\n\n\tfunction stakeFor(address, uint256) external;\n\n\tfunction withdrawFor(address, uint256) external;\n\n\tfunction notifyRewardAmount(address, uint256) external;\n\n\tfunction mintFor(address recipient, uint256 amount) external;\n\n\tfunction burnFrom(address _from, uint256 _amount) external;\n\n\tfunction stakeOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/staking/GaugeMultiRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\ncontract GaugeMultiRewards is ReentrancyGuardUpgradeable, PausableUpgradeable, ERC20Upgradeable {\n\tusing SafeERC20Upgradeable for ERC20Upgradeable;\n\n\t/* ========== STATE VARIABLES ========== */\n\n\tstruct Reward {\n\t\taddress rewardsDistributor;\n\t\tuint256 rewardsDuration;\n\t\tuint256 periodFinish;\n\t\tuint256 rewardRate;\n\t\tuint256 lastUpdateTime;\n\t\tuint256 rewardPerTokenStored;\n\t}\n\n\tERC20Upgradeable public stakingToken;\n\taddress public vault;\n\n\tmapping(address => Reward) public rewardData;\n\n\taddress public governance;\n\taddress[] public rewardTokens;\n\n\t// user -> reward token -> amount\n\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n\tmapping(address => mapping(address => uint256)) public rewards;\n\n\tuint256 private _totalStake;\n\tuint256 public derivedSupply;\n\n\tmapping(address => uint256) private _stakes;\n\tmapping(address => uint256) public derivedBalances;\n\n\t/* ========== CONSTRUCTOR ========== */\n\n\tfunction init(\n\t\taddress _stakingToken,\n\t\taddress _vault,\n\t\taddress _governance,\n\t\tstring memory _name,\n\t\tstring memory _symbol\n\t) public initializer {\n\t\t__ERC20_init(_name, _symbol);\n\t\tgovernance = _governance;\n\t\tstakingToken = ERC20Upgradeable(_stakingToken);\n\t\tvault = _vault;\n\t}\n\n\tfunction addReward(\n\t\taddress _rewardsToken,\n\t\taddress _rewardsDistributor,\n\t\tuint256 _rewardsDuration\n\t) public onlyGovernance {\n\t\trequire(rewardData[_rewardsToken].rewardsDuration == 0);\n\t\trewardTokens.push(_rewardsToken);\n\t\trewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\n\t\trewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\n\t}\n\n\t/* ========== VIEWS ========== */\n\n\tfunction totalStaked() external view returns (uint256) {\n\t\treturn _totalStake;\n\t}\n\n\tfunction stakeOf(address account) external view returns (uint256) {\n\t\treturn _stakes[account];\n\t}\n\n\tfunction lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\n\t\treturn MathUpgradeable.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\n\t}\n\n\tfunction rewardPerToken(address _rewardsToken) public view returns (uint256) {\n\t\tif (_totalStake == 0) {\n\t\t\treturn rewardData[_rewardsToken].rewardPerTokenStored;\n\t\t}\n\t\treturn\n\t\t\trewardData[_rewardsToken].rewardPerTokenStored +\n\t\t\t(((lastTimeRewardApplicable(_rewardsToken) - rewardData[_rewardsToken].lastUpdateTime) *\n\t\t\t\trewardData[_rewardsToken].rewardRate *\n\t\t\t\t(10**stakingToken.decimals())) / _totalStake); // from 1e18\n\t}\n\n\tfunction earned(address _account, address _rewardsToken) public view returns (uint256) {\n\t\tuint256 userBalance = _stakes[_account];\n\n\t\treturn\n\t\t\t(userBalance * (rewardPerToken(_rewardsToken) - userRewardPerTokenPaid[_account][_rewardsToken])) /\n\t\t\t(10**stakingToken.decimals()) +\n\t\t\trewards[_account][_rewardsToken];\n\t}\n\n\tfunction getRewardForDuration(address _rewardsToken) external view returns (uint256) {\n\t\treturn rewardData[_rewardsToken].rewardRate * rewardData[_rewardsToken].rewardsDuration;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\n\tfunction setRewardsDistributor(address _rewardsToken, address _rewardsDistributor) external onlyGovernance {\n\t\trewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\n\t}\n\n\tfunction _stake(uint256 amount, address account) internal nonReentrant whenNotPaused updateReward(account) {\n\t\trequire(amount > 0, \"Cannot stake 0\");\n\t\t_totalStake = _totalStake + amount;\n\t\t_stakes[account] = _stakes[account] + amount;\n\t\tstakingToken.safeTransferFrom(msg.sender, address(this), amount);\n\t\temit Staked(account, amount);\n\t}\n\n\tfunction _withdraw(uint256 amount, address account) internal nonReentrant updateReward(account) {\n\t\trequire(amount > 0, \"Cannot withdraw 0\");\n\t\t_totalStake = _totalStake - amount;\n\t\t_stakes[account] = _stakes[account] - amount;\n\t\tstakingToken.safeTransfer(msg.sender, amount);\n\t\temit Withdrawn(account, amount);\n\t}\n\n\tfunction stakeFor(address account, uint256 amount) external onlyVault {\n\t\t_stake(amount, account);\n\t}\n\n\tfunction withdrawFor(address account, uint256 amount) external onlyVault {\n\t\t_withdraw(amount, account);\n\t}\n\n\tfunction getRewardFor(address account) public nonReentrant updateReward(account) {\n\t\tfor (uint256 i; i < rewardTokens.length; i++) {\n\t\t\taddress _rewardsToken = rewardTokens[i];\n\t\t\tuint256 reward = rewards[account][_rewardsToken];\n\t\t\tif (reward > 0) {\n\t\t\t\trewards[account][_rewardsToken] = 0;\n\t\t\t\tERC20Upgradeable(_rewardsToken).safeTransfer(account, reward);\n\t\t\t\temit RewardPaid(account, _rewardsToken, reward);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* ========== RESTRICTED FUNCTIONS ========== */\n\n\tfunction setGovernance(address _governance) public onlyGovernance {\n\t\tgovernance = _governance;\n\t}\n\n\tfunction notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\n\t\trequire(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\n\t\t// handle the transfer of reward tokens via `transferFrom` to reduce the number\n\t\t// of transactions required and ensure correctness of the reward amount\n\t\tERC20Upgradeable(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\n\n\t\tif (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\n\t\t\trewardData[_rewardsToken].rewardRate = reward / rewardData[_rewardsToken].rewardsDuration;\n\t\t} else {\n\t\t\tuint256 remaining = rewardData[_rewardsToken].periodFinish - block.timestamp;\n\t\t\tuint256 leftover = remaining * rewardData[_rewardsToken].rewardRate;\n\t\t\trewardData[_rewardsToken].rewardRate = (reward + leftover) / rewardData[_rewardsToken].rewardsDuration;\n\t\t}\n\n\t\trewardData[_rewardsToken].lastUpdateTime = block.timestamp;\n\t\trewardData[_rewardsToken].periodFinish = block.timestamp + rewardData[_rewardsToken].rewardsDuration;\n\t\temit RewardAdded(reward);\n\t}\n\n\tfunction recoverERC20(\n\t\taddress tokenAddress,\n\t\tuint256 tokenAmount,\n\t\taddress destination\n\t) external onlyGovernance {\n\t\trequire(tokenAddress != address(stakingToken), \"Cannot withdraw staking token\");\n\t\trequire(rewardData[tokenAddress].lastUpdateTime == 0, \"Cannot withdraw reward token\");\n\t\tERC20Upgradeable(tokenAddress).safeTransfer(destination, tokenAmount);\n\t\temit Recovered(tokenAddress, tokenAmount);\n\t}\n\n\tfunction setRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) external {\n\t\trequire(block.timestamp > rewardData[_rewardsToken].periodFinish, \"Reward period still active\");\n\t\trequire(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\n\t\trequire(_rewardsDuration > 0, \"Reward duration must be non-zero\");\n\t\trewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\n\t\temit RewardsDurationUpdated(_rewardsToken, rewardData[_rewardsToken].rewardsDuration);\n\t}\n\n\tfunction mintFor(address _recipient, uint256 _amount) external onlyVault {\n\t\t_mint(_recipient, _amount);\n\t}\n\n\tfunction burnFrom(address _from, uint256 _amount) external onlyVault {\n\t\t_burn(_from, _amount);\n\t}\n\n\tfunction _transfer(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) internal override updateReward(sender) updateReward(recipient) {\n\t\tsuper._transfer(sender, recipient, amount);\n\t\t_stakes[sender] = _stakes[sender] - amount;\n\t\t_stakes[recipient] = _stakes[recipient] + amount;\n\t}\n\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn stakingToken.decimals();\n\t}\n\n\t/* ========== MODIFIERS ========== */\n\n\tmodifier updateReward(address account) {\n\t\tfor (uint256 i; i < rewardTokens.length; i++) {\n\t\t\taddress token = rewardTokens[i];\n\t\t\trewardData[token].rewardPerTokenStored = rewardPerToken(token);\n\t\t\trewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\n\t\t\tif (account != address(0)) {\n\t\t\t\trewards[account][token] = earned(account, token);\n\t\t\t\tuserRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\n\t\t\t}\n\t\t}\n\t\t_;\n\t}\n\n\tmodifier onlyGovernance() {\n\t\trequire(msg.sender == governance, \"!gov\");\n\t\t_;\n\t}\n\n\tmodifier onlyVault() {\n\t\trequire(msg.sender == vault, \"!vault\");\n\t\t_;\n\t}\n\n\t/* ========== EVENTS ========== */\n\n\tevent RewardAdded(uint256 reward);\n\tevent Staked(address indexed user, uint256 amount);\n\tevent Withdrawn(address indexed user, uint256 amount);\n\tevent RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\n\tevent RewardsDurationUpdated(address token, uint256 newDuration);\n\tevent Recovered(address token, uint256 amount);\n}\n"
    },
    "contracts/strategy/AngleStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"../accumulator/AngleAccumulator.sol\";\nimport \"../interfaces/ILiquidityGauge.sol\";\nimport \"../interfaces/IMultiRewards.sol\";\n\ncontract AngleStrategy is BaseStrategy {\n\tusing SafeERC20 for IERC20;\n\tAngleAccumulator public accumulator;\n\tstruct ClaimerReward {\n\t\taddress rewardToken;\n\t\tuint256 amount;\n\t}\n\tenum MANAGEFEE {\n\t\tPERFFEE,\n\t\tVESDTFEE,\n\t\tACCUMULATORFEE,\n\t\tCLAIMERREWARD\n\t}\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(\n\t\tILocker _locker,\n\t\taddress _governance,\n\t\taddress _receiver,\n\t\tAngleAccumulator _accumulator,\n\t\taddress _veSDTFeeProxy\n\t) BaseStrategy(_locker, _governance, _receiver) {\n\t\tveSDTFee = 500; // %5\n\t\taccumulatorFee = 800; // %8\n\t\tclaimerReward = 50; //%0.5\n\t\taccumulator = _accumulator;\n\t\tveSDTFeeProxy = _veSDTFeeProxy;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\tfunction deposit(address _token, uint256 _amount) public override onlyApprovedVault {\n\t\tIERC20(_token).transferFrom(msg.sender, address(locker), _amount);\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, 0));\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, _amount));\n\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"deposit(uint256)\", _amount));\n\t\trequire(success, \"Deposit failed!\");\n\t\temit Deposited(gauge, _token, _amount);\n\t}\n\n\tfunction withdraw(address _token, uint256 _amount) public override onlyApprovedVault {\n\t\tuint256 _before = IERC20(_token).balanceOf(address(locker));\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", _amount));\n\t\trequire(success, \"Transfer failed!\");\n\t\tuint256 _after = IERC20(_token).balanceOf(address(locker));\n\n\t\tuint256 _net = _after - _before;\n\t\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, _net));\n\t\trequire(success, \"Transfer failed!\");\n\t\temit Withdrawn(gauge, _token, _amount);\n\t}\n\n\tfunction claim(address _token) external override {\n\t\taddress gauge = gauges[_token];\n\t\trequire(gauge != address(0), \"!gauge\");\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"user_checkpoint(address)\", address(locker)));\n\t\trequire(success, \"Checkpoint failed!\");\n\t\t(success, ) = locker.execute(\n\t\t\tgauge,\n\t\t\t0,\n\t\t\tabi.encodeWithSignature(\"claim_rewards(address,address)\", address(locker), address(this))\n\t\t);\n\t\trequire(success, \"Claim failed!\");\n\t\tfor (uint8 i = 0; i < 8; i++) {\n\t\t\taddress rewardToken = ILiquidityGauge(gauge).reward_tokens(i);\n\t\t\tif (rewardToken == address(0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tuint256 rewardsBalance = IERC20(rewardToken).balanceOf(address(this));\n\t\t\tuint256 multisigFee = (rewardsBalance * perfFee[gauge]) / BASE_FEE;\n\t\t\tuint256 accumulatorPart = (rewardsBalance * accumulatorFee) / BASE_FEE;\n\t\t\tuint256 veSDTPart = (rewardsBalance * veSDTFee) / BASE_FEE;\n\t\t\tuint256 claimerPart = (rewardsBalance * claimerReward) / BASE_FEE;\n\t\t\tIERC20(rewardToken).approve(address(accumulator), accumulatorPart);\n\t\t\taccumulator.depositToken(rewardToken, accumulatorPart);\n\t\t\tIERC20(rewardToken).transfer(rewardsReceiver, multisigFee);\n\t\t\tIERC20(rewardToken).transfer(veSDTFeeProxy, veSDTPart);\n\t\t\tIERC20(rewardToken).transfer(msg.sender, claimerPart);\n\t\t\tuint256 netRewards = rewardsBalance - multisigFee - accumulatorPart - veSDTPart - claimerPart;\n\t\t\tIERC20(rewardToken).approve(multiGauges[gauge], netRewards);\n\t\t\tIMultiRewards(multiGauges[gauge]).notifyRewardAmount(rewardToken, netRewards);\n\t\t\temit Claimed(gauge, rewardToken, rewardsBalance);\n\t\t}\n\t}\n\n\tfunction claimerPendingRewards(address _token) external view returns (ClaimerReward[] memory) {\n\t\tClaimerReward[] memory pendings = new ClaimerReward[](8);\n\t\taddress gauge = gauges[_token];\n\t\tfor (uint8 i = 0; i < 8; i++) {\n\t\t\taddress rewardToken = ILiquidityGauge(gauge).reward_tokens(i);\n\t\t\tif (rewardToken == address(0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tuint256 rewardsBalance = ILiquidityGauge(gauge).claimable_reward(address(locker), rewardToken);\n\t\t\tuint256 pendingAmount = (rewardsBalance * claimerReward) / BASE_FEE;\n\t\t\tClaimerReward memory pendingReward = ClaimerReward(rewardToken, pendingAmount);\n\t\t\tpendings[i] = pendingReward;\n\t\t}\n\t\treturn pendings;\n\t}\n\n\tfunction toggleVault(address _vault) external override onlyGovernance {\n\t\tvaults[_vault] = !vaults[_vault];\n\t\temit VaultToggled(_vault, vaults[_vault]);\n\t}\n\n\tfunction setGauge(address _token, address _gauge) external override onlyGovernance {\n\t\tgauges[_token] = _gauge;\n\t\temit GaugeSet(_gauge, _token);\n\t}\n\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external override onlyGovernance {\n\t\tmultiGauges[_gauge] = _multiGauge;\n\t}\n\n\tfunction setVeSDTProxy(address _newVeSDTProxy) external onlyGovernance {\n\t\tveSDTFeeProxy = _newVeSDTProxy;\n\t}\n\n\tfunction setAccumulator(address _newAccumulator) external onlyGovernance {\n\t\taccumulator = AngleAccumulator(_newAccumulator);\n\t}\n\n\tfunction setRewardsReceiver(address _newRewardsReceiver) external onlyGovernance {\n\t\trewardsReceiver = _newRewardsReceiver;\n\t}\n\n\tfunction setGovernance(address _newGovernance) external onlyGovernance {\n\t\tgovernance = _newGovernance;\n\t}\n\n\tfunction manageFee(\n\t\tMANAGEFEE _manageFee,\n\t\taddress _gauge,\n\t\tuint256 _newFee\n\t) external onlyGovernance {\n\t\tif (_manageFee == MANAGEFEE.PERFFEE) {\n\t\t\t// 0\n\t\t\trequire(_gauge != address(0), \"zero address\");\n\t\t\tperfFee[_gauge] = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.VESDTFEE) {\n\t\t\t// 1\n\t\t\tveSDTFee = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.ACCUMULATORFEE) {\n\t\t\t//2\n\t\t\taccumulatorFee = _newFee;\n\t\t} else if (_manageFee == MANAGEFEE.CLAIMERREWARD) {\n\t\t\t// 3\n\t\t\tclaimerReward = _newFee;\n\t\t}\n\t}\n\n\t/// @notice execute a function\n\t/// @param to Address to sent the value to\n\t/// @param value Value to be sent\n\t/// @param data Call function data\n\tfunction execute(\n\t\taddress to,\n\t\tuint256 value,\n\t\tbytes calldata data\n\t) external onlyGovernance returns (bool, bytes memory) {\n\t\t(bool success, bytes memory result) = to.call{ value: value }(data);\n\t\treturn (success, result);\n\t}\n}\n"
    },
    "contracts/strategy/AngleVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IMultiRewards.sol\";\nimport \"./AngleStrategy.sol\";\n\ncontract AngleVault is ERC20Upgradeable {\n\tusing SafeERC20Upgradeable for ERC20Upgradeable;\n\tusing AddressUpgradeable for address;\n\n\tERC20Upgradeable public token;\n\taddress public governance;\n\tuint256 public withdrawalFee;\n\tuint256 public keeperFee;\n\taddress public multiRewardsGauge;\n\tuint256 public accumulatedFee;\n\tAngleStrategy public angleStrategy;\n\tuint256 public min;\n\tuint256 public constant max = 10000;\n\tevent Earn(address _token, uint256 _amount);\n\tevent Deposit(address _depositor, uint256 _amount);\n\tevent Withdraw(address _depositor, uint256 _amount);\n\n\tfunction init(\n\t\tERC20Upgradeable _token,\n\t\taddress _governance,\n\t\tstring memory name_,\n\t\tstring memory symbol_,\n\t\tAngleStrategy _angleStrategy\n\t) public initializer {\n\t\t__ERC20_init(name_, symbol_);\n\t\ttoken = _token;\n\t\tgovernance = _governance;\n\t\twithdrawalFee = 50; // %0.5\n\t\tmin = 10000;\n\t\tkeeperFee = 10; // %0.1\n\t\tangleStrategy = _angleStrategy;\n\t}\n\n\tfunction deposit(uint256 _amount, bool _earn) public {\n\t\trequire(address(multiRewardsGauge) != address(0), \"Gauge not yet initialized\");\n\t\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\n\t\tif (!_earn) {\n\t\t\tuint256 keeperCut = (_amount * keeperFee) / 10000;\n\t\t\t_amount -= keeperCut;\n\t\t\taccumulatedFee += keeperCut;\n\t\t} else {\n\t\t\t_amount += accumulatedFee;\n\t\t\taccumulatedFee = 0;\n\t\t}\n\t\t_mint(address(this), _amount);\n\t\tERC20Upgradeable(address(this)).approve(multiRewardsGauge, _amount);\n\t\tIMultiRewards(multiRewardsGauge).stakeFor(msg.sender, _amount);\n\t\tIMultiRewards(multiRewardsGauge).mintFor(msg.sender, _amount);\n\t\tif (_earn) {\n\t\t\tearn();\n\t\t}\n\t\temit Deposit(msg.sender, _amount);\n\t}\n\n\tfunction withdraw(uint256 _shares) public {\n\t\tuint256 userTotalShares = IMultiRewards(multiRewardsGauge).stakeOf(msg.sender);\n\t\trequire(_shares <= userTotalShares, \"Not enough staked\");\n\t\tIMultiRewards(multiRewardsGauge).withdrawFor(msg.sender, _shares);\n\t\t_burn(address(this), _shares);\n\t\tuint256 tokenBalance = token.balanceOf(address(this)) - accumulatedFee;\n\t\tuint256 withdrawFee;\n\t\tif (_shares > tokenBalance) {\n\t\t\tuint256 amountToWithdraw = _shares - tokenBalance;\n\t\t\tangleStrategy.withdraw(address(token), amountToWithdraw);\n\t\t\twithdrawFee = (amountToWithdraw * withdrawalFee) / 10000;\n\t\t\ttoken.safeTransfer(governance, withdrawFee);\n\t\t}\n\t\tIMultiRewards(multiRewardsGauge).burnFrom(msg.sender, _shares);\n\t\ttoken.safeTransfer(msg.sender, _shares - withdrawFee);\n\t\temit Withdraw(msg.sender, _shares - withdrawFee);\n\t}\n\n\tfunction withdrawAll() external {\n\t\twithdraw(balanceOf(msg.sender));\n\t}\n\n\tfunction setGovernance(address _governance) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\tgovernance = _governance;\n\t}\n\n\tfunction setKeeperFee(uint256 _newFee) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\tkeeperFee = _newFee;\n\t}\n\n\tfunction setGaugeMultiRewards(address _multiRewardsGauge) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\tmultiRewardsGauge = _multiRewardsGauge;\n\t}\n\n\tfunction setAngleStrategy(AngleStrategy _newStrat) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\tangleStrategy = _newStrat;\n\t}\n\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn token.decimals();\n\t}\n\n\tfunction setWithdrawnFee(uint256 _newFee) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\twithdrawalFee = _newFee;\n\t}\n\n\tfunction setMin(uint256 _min) external {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\tmin = _min;\n\t}\n\n\tfunction available() public view returns (uint256) {\n\t\treturn ((token.balanceOf(address(this)) - accumulatedFee) * min) / max;\n\t}\n\n\tfunction earn() internal {\n\t\tuint256 tokenBalance = available();\n\t\ttoken.approve(address(angleStrategy), 0);\n\t\ttoken.approve(address(angleStrategy), tokenBalance);\n\t\tangleStrategy.deposit(address(token), tokenBalance);\n\t\temit Earn(address(token), tokenBalance);\n\t}\n}\n"
    },
    "contracts/strategy/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport \"../interfaces/ILocker.sol\";\n\ncontract BaseStrategy {\n\t/* ========== STATE VARIABLES ========== */\n\tILocker locker;\n\taddress public governance;\n\taddress public rewardsReceiver;\n\tuint256 public veSDTFee;\n\taddress public veSDTFeeProxy;\n\tuint256 public accumulatorFee;\n\tuint256 public claimerReward;\n\tuint256 public constant BASE_FEE = 10000;\n\tmapping(address => address) public gauges;\n\tmapping(address => bool) public vaults;\n\tmapping(address => uint256) public perfFee;\n\tmapping(address => address) public multiGauges;\n\n\t/* ========== EVENTS ========== */\n\tevent Deposited(address _gauge, address _token, uint256 _amount);\n\tevent Withdrawn(address _gauge, address _token, uint256 _amount);\n\tevent Claimed(address _gauge, address _token, uint256 _amount);\n\tevent VaultToggled(address _vault, bool _newState);\n\tevent GaugeSet(address _gauge, address _token);\n\n\t/* ========== MODIFIERS ========== */\n\tmodifier onlyGovernance() {\n\t\trequire(msg.sender == governance, \"!governance\");\n\t\t_;\n\t}\n\tmodifier onlyApprovedVault() {\n\t\trequire(vaults[msg.sender], \"!approved vault\");\n\t\t_;\n\t}\n\n\t/* ========== CONSTRUCTOR ========== */\n\tconstructor(\n\t\tILocker _locker,\n\t\taddress _governance,\n\t\taddress _receiver\n\t) public {\n\t\tlocker = _locker;\n\t\tgovernance = _governance;\n\t\trewardsReceiver = _receiver;\n\t}\n\n\t/* ========== MUTATIVE FUNCTIONS ========== */\n\tfunction deposit(address _token, uint256 _amount) external virtual onlyApprovedVault {}\n\n\tfunction withdraw(address _token, uint256 _amount) external virtual onlyApprovedVault {}\n\n\tfunction claim(address _gauge) external virtual {}\n\n\tfunction toggleVault(address _vault) external virtual onlyGovernance {}\n\n\tfunction setGauge(address _token, address _gauge) external virtual onlyGovernance {}\n\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external virtual onlyGovernance {}\n}\n"
    }
  }
}}