{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/EnglishAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../interfaces/IFinalizeAuctionController.sol\";\nimport \"./utils/EnglishAuctionStorage.sol\";\nimport \"./utils/EIP712.sol\";\nimport \"./SafeEthSender.sol\";\n\ncontract EnglishAuction is EnglishAuctionStorage, SafeEthSender, EIP712 {\n    bytes32 immutable BID_TYPEHASH =\n        keccak256(\"Bid(uint32 auctionId,address bidder,uint256 value)\");\n\n    event AuctionCreated(uint32 auctionId);\n    event AuctionCanceled(uint32 auctionId);\n    event AuctionCanceledByAdmin(uint32 auctionId, string reason);\n    event AuctionFinalized(uint32 auctionId, uint256 auctionBalance);\n    event AuctionBidPlaced(uint32 auctionId, address bidder, uint256 amount);\n\n    constructor(\n        address _accessManangerAddress,\n        address payable _withdrawalAddress\n    ) EIP712(\"Place Bid\", \"1\") {\n        accessManager = IAccessManager(_accessManangerAddress);\n        withdrawalAddress = _withdrawalAddress;\n        initializeAuction();\n    }\n\n    modifier isOperationalAddress() {\n        require(\n            accessManager.isOperationalAddress(msg.sender) == true,\n            \"English Auction: You are not allowed to use this function\"\n        );\n        _;\n    }\n\n    function setWithdrawalAddress(address payable _newWithdrawalAddress)\n        public\n        isOperationalAddress\n    {\n        withdrawalAddress = _newWithdrawalAddress;\n    }\n\n    function createAuction(\n        uint32 _tokenId,\n        uint32 _timeStart,\n        uint32 _timeEnd,\n        uint8 _minBidPercentage,\n        uint256 _initialPrice,\n        uint256 _minBidValue,\n        address _nftContractAddress,\n        address _finalizeAuctionControllerAddress,\n        bytes memory _additionalDataForFinalizeAuction\n    ) public isOperationalAddress {\n        require(\n            _initialPrice > 0,\n            \"English Auction: Initial price have to be bigger than zero\"\n        );\n\n        uint32 currentAuctionId = incrementAuctionId();\n        auctionIdToAuction[currentAuctionId] = AuctionStruct(\n            _tokenId,\n            _timeStart,\n            _timeEnd,\n            _minBidPercentage,\n            _initialPrice,\n            _minBidValue,\n            0, //auctionBalance\n            _nftContractAddress,\n            _finalizeAuctionControllerAddress,\n            payable(address(0)),\n            _additionalDataForFinalizeAuction\n        );\n\n        emit AuctionCreated(currentAuctionId);\n    }\n\n    function incrementAuctionId() private returns (uint32) {\n        return lastAuctionId++;\n    }\n\n    /**\n     * @notice Returns auction details for a given auctionId.\n     */\n    function getAuction(uint32 _auctionId)\n        public\n        view\n        returns (AuctionStruct memory)\n    {\n        return auctionIdToAuction[_auctionId];\n    }\n\n    function initializeAuction() private {\n        lastAuctionId = 1;\n    }\n\n    function placeBid(uint32 _auctionId, bytes memory _signature)\n        public\n        payable\n    {\n        placeBid(_auctionId, _signature, msg.sender);\n    }\n\n    function placeBid(\n        uint32 _auctionId,\n        bytes memory _signature,\n        address _bidder\n    ) public payable {\n        bytes32 _hash = _hashTypedDataV4(\n            keccak256(abi.encode(BID_TYPEHASH, _auctionId, _bidder, msg.value))\n        );\n        address recoverAddress = ECDSA.recover(_hash, _signature);\n\n        require(\n            accessManager.isOperationalAddress(recoverAddress) == true,\n            \"Incorrect bid permission signature\"\n        );\n\n        AuctionStruct storage auction = auctionIdToAuction[_auctionId];\n\n        require(auction.initialPrice > 0, \"English Auction: Auction not found\");\n\n        if (auction.timeStart == 0) {\n            auction.timeStart = uint32(block.timestamp);\n            auction.timeEnd += auction.timeStart;\n        }\n\n        require(\n            auction.timeStart <= block.timestamp,\n            \"English Auction: Auction is not active yet\"\n        );\n\n        require(\n            auction.timeEnd > block.timestamp,\n            \"English Auction: Auction has been finished\"\n        );\n\n        uint256 requiredBalance = auction.auctionBalance == 0\n            ? auction.initialPrice\n            : auction.auctionBalance + auction.minBidValue;\n\n        uint256 requiredPercentageValue = (auction.auctionBalance *\n            (auction.minBidPercentage + 100)) / 100;\n\n        require(\n            msg.value >= requiredBalance &&\n                msg.value >= requiredPercentageValue,\n            \"English Auction: Bid amount was too low\"\n        );\n\n        uint256 prevBalance = auction.auctionBalance;\n        address payable prevBidder = auction.bidder;\n\n        auction.bidder = payable(_bidder);\n        auction.auctionBalance = msg.value;\n        if ((auction.timeEnd - uint32(block.timestamp)) < 15 minutes) {\n            auction.timeEnd = uint32(block.timestamp) + 15 minutes;\n        }\n\n        if (prevBalance > 0) {\n            sendEthWithLimitedGas(prevBidder, prevBalance, 2300);\n        }\n        emit AuctionBidPlaced(_auctionId, _bidder, msg.value);\n    }\n\n    /**\n     * @notice Once the countdown has expired for an auction, anyone can settle the auction.\n     * This will send the NFT to the highest bidder and distribute funds.\n     */\n    function finalizeAuction(uint32 _auctionId) external {\n        AuctionStruct memory auction = auctionIdToAuction[_auctionId];\n\n        uint256 auctionBalance = auction.auctionBalance;\n\n        require(auction.timeEnd > 0, \"English Auction: Auction not found\");\n\n        require(\n            auction.timeEnd <= block.timestamp,\n            \"English Auction: Auction is still in progress\"\n        );\n\n        IFinalizeAuctionController finalizeAuctionController = IFinalizeAuctionController(\n                auction.finalizeAuctionControllerAddress\n            );\n\n        (bool success, ) = auction\n            .finalizeAuctionControllerAddress\n            .delegatecall(\n                abi.encodeWithSelector(\n                    finalizeAuctionController.finalize.selector,\n                    _auctionId\n                )\n            );\n\n        require(success, \"FinalizeAuction: DelegateCall failed\");\n\n        delete auctionIdToAuction[_auctionId];\n\n        emit AuctionFinalized(_auctionId, auctionBalance);\n    }\n\n    /**\n     * @notice If an auction has been created but has not yet received bids, it may be canceled by the seller.\n     */\n    function cancelAuction(uint32 _auctionId) external {\n        AuctionStruct memory auction = auctionIdToAuction[_auctionId];\n\n        IFinalizeAuctionController finalizeAuctionController = IFinalizeAuctionController(\n                auction.finalizeAuctionControllerAddress\n            );\n\n        (bool success, ) = auction\n            .finalizeAuctionControllerAddress\n            .delegatecall(\n                abi.encodeWithSelector(\n                    finalizeAuctionController.cancel.selector,\n                    _auctionId\n                )\n            );\n\n        require(success, \"CancelAuction: DelegateCall failed\");\n\n        delete auctionIdToAuction[_auctionId];\n\n        emit AuctionCanceled(_auctionId);\n    }\n\n    /**\n     * @notice Allows Nifties to cancel an auction, refunding the bidder and returning the NFT to the seller.\n     * This should only be used for extreme cases such as DMCA takedown requests. The reason should always be provided.\n     */\n    function adminCancelAuction(uint32 _auctionId, string memory _reason)\n        public\n        isOperationalAddress\n    {\n        AuctionStruct memory auction = auctionIdToAuction[_auctionId];\n\n        IFinalizeAuctionController finalizeAuctionController = IFinalizeAuctionController(\n                auction.finalizeAuctionControllerAddress\n            );\n\n        (bool success, ) = auction\n            .finalizeAuctionControllerAddress\n            .delegatecall(\n                abi.encodeWithSelector(\n                    finalizeAuctionController.adminCancel.selector,\n                    _auctionId,\n                    _reason\n                )\n            );\n\n        require(success, \"AdminCancelAuction: DelegateCall failed\");\n\n        if (auction.bidder != address(0)) {\n            uint256 bidderAmount = auction.auctionBalance;\n            auction.auctionBalance -= auction.auctionBalance;\n\n            sendEthWithLimitedGas(auction.bidder, bidderAmount, 2300);\n        }\n\n        delete auctionIdToAuction[_auctionId];\n\n        emit AuctionCanceledByAdmin(_auctionId, _reason);\n    }\n}\n"
    },
    "contracts/MintAuctionCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./EnglishAuction.sol\";\nimport \"../interfaces/IAccessManager.sol\";\nimport \"../interfaces/INFT.sol\";\n\ncontract MintAuctionCreator {\n    address englishAuctionAddress;\n    address finalizeAuctionControllerAddress;\n    EnglishAuction englishAuction;\n    IAccessManager accessManager;\n\n    constructor(\n        address _englishAuctionAddress,\n        address _accessManangerAddress,\n        address _finalizeAuctionControllerAddress\n    ) {\n        englishAuctionAddress = _englishAuctionAddress;\n        finalizeAuctionControllerAddress = _finalizeAuctionControllerAddress;\n        englishAuction = EnglishAuction(englishAuctionAddress);\n        accessManager = IAccessManager(_accessManangerAddress);\n    }\n\n    modifier isOperationalAddress() {\n        require(\n            accessManager.isOperationalAddress(msg.sender) == true,\n            \"Mint Auction Creator: You are not allowed to use this function\"\n        );\n        _;\n    }\n\n    function createMintAuction(\n        uint8 _minBidPercentage,\n        uint256 _initialPrice,\n        uint256 _minBidValue,\n        address _nftContractAddress\n    ) public isOperationalAddress {\n        require(\n            _initialPrice > 0,\n            \"Mint Auction Creator: Initial price have to be bigger than zero\"\n        );\n\n        INFT nft = INFT(_nftContractAddress);\n\n        uint32 editions = nft.totalAmountOfEdition();\n        uint32 timeStart = nft.timeStart();\n        uint32 timeEnd = nft.timeEnd();\n\n        for (uint32 tokenId = 1; tokenId <= editions; tokenId++) {\n            englishAuction.createAuction(\n                tokenId,\n                timeStart,\n                timeEnd,\n                _minBidPercentage,\n                _initialPrice,\n                _minBidValue,\n                _nftContractAddress,\n                finalizeAuctionControllerAddress,\n                \"0x\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/SafeEthSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./utils/CallHelpers.sol\";\n\nabstract contract SafeEthSender is ReentrancyGuard {\n    mapping(address => uint256) private withdrawRegistry;\n\n    event PendingWithdraw(address _user, uint256 _amount);\n    event Withdrawn(address _user, uint256 _amount);\n\n    constructor() ReentrancyGuard() {}\n\n    function sendEthWithLimitedGas(\n        address payable _user,\n        uint256 _amount,\n        uint256 _gasLimit\n    ) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        (bool success, ) = _user.call{value: _amount, gas: _gasLimit}(\"\");\n        if (!success) {\n            withdrawRegistry[_user] += _amount;\n\n            emit PendingWithdraw(_user, _amount);\n        }\n    }\n\n    function getAmountToWithdrawForUser(address user)\n        public\n        view\n        returns (uint256)\n    {\n        return withdrawRegistry[user];\n    }\n\n    function withdrawPendingEth() external {\n        this.withdrawPendingEthFor(payable(msg.sender));\n    }\n\n    function withdrawPendingEthFor(address payable _user)\n        external\n        nonReentrant\n    {\n        uint256 amount = withdrawRegistry[_user];\n        require(amount > 0, \"SafeEthSender: no funds to withdraw\");\n        withdrawRegistry[_user] = 0;\n        (bool success, bytes memory response) = _user.call{value: amount}(\"\");\n\n        if (!success) {\n            string memory message = CallHelpers.getRevertMsg(response);\n            revert(message);\n        }\n\n        emit Withdrawn(_user, amount);\n    }\n}\n"
    },
    "contracts/utils/CallHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nlibrary CallHelpers {\n    function getRevertMsg(bytes memory _returnData)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n\n        assembly {\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string));\n    }\n}\n"
    },
    "contracts/utils/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    typeHash,\n                    nameHash,\n                    versionHash,\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash)\n        internal\n        view\n        virtual\n        returns (bytes32)\n    {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/utils/EnglishAuctionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../interfaces/IAccessManager.sol\";\n\nabstract contract EnglishAuctionStorage {\n    uint32 lastAuctionId;\n    address payable public withdrawalAddress;\n    IAccessManager accessManager;\n\n    struct AuctionStruct {\n        uint32 tokenId;\n        uint32 timeStart;\n        uint32 timeEnd;\n        uint8 minBidPercentage;\n        uint256 initialPrice;\n        uint256 minBidValue;\n        uint256 auctionBalance;\n        address nftContractAddress;\n        address finalizeAuctionControllerAddress;\n        address payable bidder;\n        bytes additionalDataForFinalizeAuction;\n    }\n\n    mapping(uint32 => AuctionStruct) auctionIdToAuction;\n}\n"
    },
    "interfaces/IAccessManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IAccessManager {\n    function isOperationalAddress(address _address)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "interfaces/IFinalizeAuctionController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IFinalizeAuctionController {\n    function finalize(uint32 _auctionId) external;\n\n    function cancel(uint32 _auctionId) external;\n\n    function adminCancel(uint32 _auctionId, string memory _reason) external;\n\n    function getAuctionType() external view returns (string memory);\n}\n"
    },
    "interfaces/INFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ninterface INFT is IERC2981 {\n    function awardToken(address _user, uint32 _tokenID) external;\n\n    function totalAmountOfEdition() external view returns (uint32);\n\n    function timeStart() external view returns (uint32);\n\n    function timeEnd() external view returns (uint32);\n\n    function nftId() external view returns (uint32);\n\n    function init(\n        address _accessManangerAddress,\n        bytes memory _staticData,\n        bytes memory _dynamicData\n    ) external;\n}\n"
    }
  }
}}