{{
  "language": "Solidity",
  "sources": {
    "LendingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"Ownable.sol\";\nimport \"Math.sol\";\nimport \"ReentrancyGuard.sol\";\n\nimport \"IBasketFacet.sol\";\nimport \"ILendingRegistry.sol\";\n\ncontract LendingManager is Ownable, ReentrancyGuard {\n    using Math for uint256;\n\n    ILendingRegistry public lendingRegistry;\n    IBasketFacet public basket;\n\n    event Lend(\n        address indexed underlying,\n        uint256 amount,\n        bytes32 indexed protocol\n    );\n    event UnLend(address indexed wrapped, uint256 amount);\n\n    /**\n        @notice Constructor\n        @param _lendingRegistry Address of the lendingRegistry contract\n        @param _basket Address of the pool/pie/basket to manage\n    */\n    constructor(address _lendingRegistry, address _basket) {\n        require(_lendingRegistry != address(0), \"INVALID_LENDING_REGISTRY\");\n        require(_basket != address(0), \"INVALID_BASKET\");\n        lendingRegistry = ILendingRegistry(_lendingRegistry);\n        basket = IBasketFacet(_basket);\n    }\n\n    /**\n        @notice Move underlying to a lending protocol\n        @param _underlying Address of the underlying token\n        @param _amount Amount of underlying to lend\n        @param _protocol Bytes32 protocol key to lend to\n    */\n    function lend(\n        address _underlying,\n        uint256 _amount,\n        bytes32 _protocol\n    ) public onlyOwner nonReentrant {\n        // _amount or actual balance, whatever is less\n        uint256 amount = _amount.min(\n            IERC20(_underlying).balanceOf(address(basket))\n        );\n\n        //lend token\n        (address[] memory _targets, bytes[] memory _data) = lendingRegistry\n            .getLendTXData(_underlying, amount, _protocol);\n\n        basket.callNoValue(_targets, _data);\n\n        // if needed remove underlying from basket\n        removeToken(_underlying);\n\n        // add wrapped token\n        addToken(\n            lendingRegistry.underlyingToProtocolWrapped(_underlying, _protocol)\n        );\n\n        emit Lend(_underlying, _amount, _protocol);\n    }\n\n    /**\n        @notice Unlend wrapped token from its lending protocol\n        @param _wrapped Address of the wrapped token\n        @param _amount Amount of the wrapped token to unlend\n    */\n    function unlend(address _wrapped, uint256 _amount)\n        public\n        onlyOwner\n        nonReentrant\n    {\n        // unlend token\n        // _amount or actual balance, whatever is less\n        uint256 amount = _amount.min(\n            IERC20(_wrapped).balanceOf(address(basket))\n        );\n\n        //Unlend token\n        (address[] memory _targets, bytes[] memory _data) = lendingRegistry\n            .getUnlendTXData(_wrapped, amount);\n        basket.callNoValue(_targets, _data);\n\n        // if needed add underlying\n        addToken(lendingRegistry.wrappedToUnderlying(_wrapped));\n\n        // if needed remove wrapped\n        removeToken(_wrapped);\n\n        emit UnLend(_wrapped, _amount);\n    }\n\n    /**\n        @notice Unlend and immediately lend in a different protocol\n        @param _wrapped Address of the wrapped token to bounce to another protocol\n        @param _amount Amount of the wrapped token to bounce to the other protocol\n        @param _toProtocol Protocol to deposit bounced tokens in\n        @dev Uses reentrency protection of unlend() and lend()\n    */\n    function bounce(\n        address _wrapped,\n        uint256 _amount,\n        bytes32 _toProtocol\n    ) external {\n        unlend(_wrapped, _amount);\n        // Bounce all to new protocol\n        lend(\n            lendingRegistry.wrappedToUnderlying(_wrapped),\n            type(uint256).max,\n            _toProtocol\n        );\n    }\n\n    function removeToken(address _token) internal {\n        uint256 balance = basket.balance(_token);\n        bool inPool = basket.getTokenInPool(_token);\n        //if there is a token balance of the token is not in the pool, skip\n        if (balance != 0 || !inPool) {\n            return;\n        }\n\n        // remove token\n        basket.singleCall(\n            address(basket),\n            abi.encodeWithSelector(basket.removeToken.selector, _token),\n            0\n        );\n    }\n\n    function addToken(address _token) internal {\n        uint256 balance = basket.balance(_token);\n        bool inPool = basket.getTokenInPool(_token);\n        // If token has no balance or is already in the pool, skip\n        if (balance == 0 || inPool) {\n            return;\n        }\n\n        // add token\n        basket.singleCall(\n            address(basket),\n            abi.encodeWithSelector(basket.addToken.selector, _token),\n            0\n        );\n    }\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "IBasketFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\nimport {ICallFacet} from \"ICallFacet.sol\";\nimport {IERC20} from \"IERC20.sol\";\n\ninterface IBasketFacet is IERC20, ICallFacet {\n    event TokenAdded(address indexed _token);\n    event TokenRemoved(address indexed _token);\n    event EntryFeeSet(uint256 fee);\n    event ExitFeeSet(uint256 fee);\n    event AnnualizedFeeSet(uint256 fee);\n    event FeeBeneficiarySet(address indexed beneficiary);\n    event EntryFeeBeneficiaryShareSet(uint256 share);\n    event ExitFeeBeneficiaryShareSet(uint256 share);\n\n    event PoolJoined(address indexed who, uint256 amount);\n    event PoolExited(address indexed who, uint256 amount);\n    event FeeCharged(uint256 amount);\n    event LockSet(uint256 lockBlock);\n    event CapSet(uint256 cap);\n\n    /** \n        @notice Sets entry fee paid when minting\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setEntryFee(uint256 _fee) external;\n\n    /**\n        @notice Get the entry fee\n        @return Current entry fee\n    */\n    function getEntryFee() external view returns (uint256);\n\n    /**\n        @notice Set the exit fee paid when exiting\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setExitFee(uint256 _fee) external;\n\n    /**\n        @notice Get the exit fee\n        @return Current exit fee\n    */\n    function getExitFee() external view returns (uint256);\n\n    /**\n        @notice Set the annualized fee. Often referred to as streaming fee\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\n    */\n    function setAnnualizedFee(uint256 _fee) external;\n\n    /**\n        @notice Get the annualized fee.\n        @return Current annualized fee.\n    */\n    function getAnnualizedFee() external view returns (uint256);\n\n    /**\n        @notice Set the address receiving the fees.\n    */\n    function setFeeBeneficiary(address _beneficiary) external;\n\n    /**\n        @notice Get the fee benificiary\n        @return The current fee beneficiary\n    */\n    function getFeeBeneficiary() external view returns (address);\n\n    /**\n        @notice Set the fee beneficiaries share of the entry fee\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \n    */\n    function setEntryFeeBeneficiaryShare(uint256 _share) external;\n\n    /**\n        @notice Get the entry fee beneficiary share\n        @return Feeshare amount\n    */\n    function getEntryFeeBeneficiaryShare() external view returns (uint256);\n\n    /**\n        @notice Set the fee beneficiaries share of the exit fee\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \n    */\n    function setExitFeeBeneficiaryShare(uint256 _share) external;\n\n    /**\n        @notice Get the exit fee beneficiary share\n        @return Feeshare amount\n    */\n    function getExitFeeBeneficiaryShare() external view returns (uint256);\n\n    /**\n        @notice Calculate the oustanding annualized fee\n        @return Amount of pool tokens to be minted to charge the annualized fee\n    */\n    function calcOutStandingAnnualizedFee() external view returns (uint256);\n\n    /**\n        @notice Charges the annualized fee\n    */\n    function chargeOutstandingAnnualizedFee() external;\n\n    /**\n        @notice Pulls underlying from caller and mints the pool token\n        @param _amount Amount of pool tokens to mint\n    */\n    function joinPool(uint256 _amount) external;\n\n    /**\n        @notice Burns pool tokens from the caller and returns underlying assets\n    */\n    function exitPool(uint256 _amount) external;\n\n    /**\n        @notice Get if the pool is locked or not. (not accepting exit and entry)\n        @return Boolean indicating if the pool is locked\n    */\n    function getLock() external view returns (bool);\n\n    /**\n        @notice Get the block until which the pool is locked\n        @return The lock block\n    */\n    function getLockBlock() external view returns (uint256);\n\n    /**\n        @notice Set the lock block\n        @param _lock Block height of the lock\n    */\n    function setLock(uint256 _lock) external;\n\n    /**\n        @notice Get the maximum of pool tokens that can be minted\n        @return Cap\n    */\n    function getCap() external view returns (uint256);\n\n    /**\n        @notice Set the maximum of pool tokens that can be minted\n        @param _maxCap Max cap \n    */\n    function setCap(uint256 _maxCap) external;\n\n    /**\n        @notice Get the amount of tokens owned by the pool\n        @param _token Addres of the token\n        @return Amount owned by the contract\n    */\n    function balance(address _token) external view returns (uint256);\n\n    /**\n        @notice Get the tokens in the pool\n        @return Array of tokens in the pool\n    */\n    function getTokens() external view returns (address[] memory);\n\n    /**\n        @notice Add a token to the pool. Should have at least a balance of 10**6\n        @param _token Address of the token to add\n    */\n    function addToken(address _token) external;\n\n    /**\n        @notice Removes a token from the pool\n        @param _token Address of the token to remove\n    */\n    function removeToken(address _token) external;\n\n    /**\n        @notice Checks if a token was added to the pool\n        @param _token address of the token\n        @return If token is in the pool or not\n    */\n    function getTokenInPool(address _token) external view returns (bool);\n\n    /**\n        @notice Calculate the amounts of underlying needed to mint that pool amount.\n        @param _amount Amount of pool tokens to mint\n        @return tokens Tokens needed\n        @return amounts Amounts of underlying needed\n    */\n    function calcTokensForAmount(uint256 _amount)\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts);\n\n    /**\n        @notice Calculate the amounts of underlying to receive when burning that pool amount\n        @param _amount Amount of pool tokens to burn\n        @return tokens Tokens returned\n        @return amounts Amounts of underlying returned\n    */\n    function calcTokensForAmountExit(uint256 _amount)\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory amounts);\n}\n"
    },
    "ICallFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface ICallFacet {\n    event CallerAdded(address indexed caller);\n    event CallerRemoved(address indexed caller);\n    event Call(\n        address indexed caller,\n        address indexed target,\n        bytes data,\n        uint256 value\n    );\n\n    /**\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool. Reverts if one of the calls fails\n        @param _targets Array of addresses of targets to call\n        @param _calldata Array of calldata for each call\n        @param _values Array of amounts of ETH to send with the call\n    */\n    function call(\n        address[] memory _targets,\n        bytes[] memory _calldata,\n        uint256[] memory _values\n    ) external;\n\n    /**\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool without sending any Ether. Reverts if one of the calls fail\n        @param _targets Array of addresses of targets to call\n        @param _calldata Array of calldata for each call\n    */\n    function callNoValue(address[] memory _targets, bytes[] memory _calldata)\n        external;\n\n    /**\n        @notice Lets whitelisted callers execute a single arbitrary call from the pool. Reverts if the call fails\n        @param _target Address of the target to call\n        @param _calldata Calldata of the call\n        @param _value Amount of ETH to send with the call\n    */\n    function singleCall(\n        address _target,\n        bytes calldata _calldata,\n        uint256 _value\n    ) external;\n\n    /**\n        @notice Add a whitelisted caller. Can only be called by the contract owner\n        @param _caller Caller to add\n    */\n    function addCaller(address _caller) external;\n\n    /**\n        @notice Remove a whitelisted caller. Can only be called by the contract owner\n    */\n    function removeCaller(address _caller) external;\n\n    /**\n        @notice Checks if an address is a whitelisted caller\n        @param _caller Address to check\n        @return If the address is whitelisted\n    */\n    function canCall(address _caller) external view returns (bool);\n\n    /**\n        @notice Get all whitelisted callers\n        @return Array of whitelisted callers\n    */\n    function getCallers() external view returns (address[] memory);\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "ILendingRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\ninterface ILendingRegistry {\n    // Maps wrapped token to protocol\n    function wrappedToProtocol(address _wrapped)\n        external\n        view\n        returns (bytes32);\n\n    // Maps wrapped token to underlying\n    function wrappedToUnderlying(address _wrapped)\n        external\n        view\n        returns (address);\n\n    function underlyingToProtocolWrapped(address _underlying, bytes32 protocol)\n        external\n        view\n        returns (address);\n\n    function protocolToLogic(bytes32 _protocol) external view returns (address);\n\n    /**\n        @notice Set which protocl a wrapped token belongs to\n        @param _wrapped Address of the wrapped token\n        @param _protocol Bytes32 key of the protocol\n    */\n    function setWrappedToProtocol(address _wrapped, bytes32 _protocol) external;\n\n    /**\n        @notice Set what is the underlying for a wrapped token\n        @param _wrapped Address of the wrapped token\n        @param _underlying Address of the underlying token\n    */\n    function setWrappedToUnderlying(address _wrapped, address _underlying)\n        external;\n\n    /**\n        @notice Set the logic contract for the protocol\n        @param _protocol Bytes32 key of the procol\n        @param _logic Address of the lending logic contract for that protocol\n    */\n    function setProtocolToLogic(bytes32 _protocol, address _logic) external;\n\n    /**\n        @notice Set the wrapped token for the underlying deposited in this protocol\n        @param _underlying Address of the unerlying token\n        @param _protocol Bytes32 key of the protocol\n        @param _wrapped Address of the wrapped token\n    */\n    function setUnderlyingToProtocolWrapped(\n        address _underlying,\n        bytes32 _protocol,\n        address _wrapped\n    ) external;\n\n    /**\n        @notice Get tx data to lend the underlying amount in a specific protocol\n        @param _underlying Address of the underlying token\n        @param _amount Amount to lend\n        @param _protocol Bytes32 key of the protocol\n        @return targets Addresses of the contracts to call\n        @return data Calldata for the calls\n    */\n    function getLendTXData(\n        address _underlying,\n        uint256 _amount,\n        bytes32 _protocol\n    ) external view returns (address[] memory targets, bytes[] memory data);\n\n    /**\n        @notice Get the tx data to unlend the wrapped amount\n        @param _wrapped Address of the wrapped token\n        @param _amount Amount of wrapped token to unlend\n        @return targets Addresses of the contracts to call\n        @return data Calldata for the calls\n    */\n    function getUnlendTXData(address _wrapped, uint256 _amount)\n        external\n        view\n        returns (address[] memory targets, bytes[] memory data);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}