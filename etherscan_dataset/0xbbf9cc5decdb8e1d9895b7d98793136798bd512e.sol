{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"ArrayUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// StarBlock DAO Contracts\n\npragma solidity ^0.8.0;\n\nlibrary ArrayUtils {\n    function hasDuplicate(uint256[] memory self) external pure returns(bool) {\n        uint256 ivalue;\n        uint256 jvalue;\n        for(uint256 i = 0; i \u003c self.length - 1; i ++){\n            ivalue = self[i];\n            for(uint256 j = i + 1; j \u003c self.length; j ++){\n                jvalue = self[j];\n                if(ivalue == jvalue){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``\u0027s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"NFTMasterChef.sol":{"content":"// SPDX-License-Identifier: MIT\n// StarBlock DAO Contracts\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC20.sol\";\nimport \"./SafeERC20.sol\";\nimport \"./IERC2981.sol\";\n\nimport \"./wnft_interfaces.sol\";\nimport \"./ArrayUtils.sol\";\n\n// harvest strategy contract, for havesting permission\ninterface IHarvestStrategy {\n    function canHarvest(uint256 _pid, address _forUser, uint256[] memory _wnfTokenIds) external view returns (bool);\n}\n\ninterface INFTMasterChef {\n    event AddPoolInfo(IERC721Metadata nft, IWrappedNFT wnft, uint256 startBlock, \n                    RewardInfo[] rewards, uint256 depositFee, IERC20 dividendToken, bool withUpdate);\n    event SetStartBlock(uint256 pid, uint256 startBlock);\n    event UpdatePoolReward(uint256 pid, uint256 rewardIndex, uint256 rewardBlock, uint256 rewardForEachBlock, uint256 rewardPerNFTForEachBlock);\n    event SetPoolDepositFee(uint256 pid, uint256 depositFee);\n    event SetHarvestStrategy(IHarvestStrategy harvestStrategy);\n    event SetPoolDividendToken(uint256 pid, IERC20 dividendToken);\n\n    event AddTokenRewardForPool(uint256 pid, uint256 addTokenPerPool, uint256 addTokenPerBlock, bool withTokenTransfer);\n    event AddDividendForPool(uint256 pid, uint256 addDividend);\n\n    event UpdateDevAddress(address payable devAddress);\n    event EmergencyStop(address user, address to);\n    event ClosePool(uint256 pid, address payable to);\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256[] tokenIds);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256[] wnfTokenIds);\n    event WithdrawWithoutHarvest(address indexed user, uint256 indexed pid, uint256[] wnfTokenIds);\n    event Harvest(address indexed user, uint256 indexed pid, uint256[] wnftTokenIds, \n                    uint256 mining, uint256 dividend);\n\n    // Info of each NFT.\n    struct NFTInfo {\n        bool deposited;     // If the NFT is deposited.\n        uint256 rewardDebt; // Reward debt.\n\n        uint256 dividendDebt; // Dividend debt.\n    }\n\n    //Info of each Reward \n    struct RewardInfo {\n        uint256 rewardBlock;\n        uint256 rewardForEachBlock;    //Reward for each block, can only be set one with rewardPerNFTForEachBlock\n        uint256 rewardPerNFTForEachBlock;    //Reward for each block for every NFT, can only be set one with rewardForEachBlock\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IWrappedNFT wnft;// Address of wnft contract.\n\n        uint256 startBlock; // Reward start block.\n\n        uint256 currentRewardIndex;// the current reward phase index for poolsRewardInfos\n        uint256 currentRewardEndBlock;  // the current reward end block.\n\n        uint256 amount;     // How many NFTs the pool has.\n        \n        uint256 lastRewardBlock;  // Last block number that token distribution occurs.\n        uint256 accTokenPerShare; // Accumulated tokens per share, times 1e12.\n        \n        IERC20 dividendToken;\n        uint256 accDividendPerShare; // Accumulated dividend per share, times 1e12.\n        \n        uint256 depositFee;// ETH charged when user deposit.\n    }\n    \n    function poolLength() external view returns (uint256);\n    function poolRewardLength(uint256 _pid) external view returns (uint256);\n\n    function poolInfos(uint256 _pid) external view returns (IWrappedNFT _wnft, \n                uint256 _startBlock, uint256 _currentRewardIndex, uint256 _currentRewardEndBlock, uint256 _amount, uint256 _lastRewardBlock, \n                uint256 _accTokenPerShare, IERC20 _dividendToken, uint256 _accDividendPerShare, uint256 _depositFee);\n    function poolsRewardInfos(uint256 _pid, uint256 _rewardInfoId) external view returns (uint256 _rewardBlock, uint256 _rewardForEachBlock, uint256 _rewardPerNFTForEachBlock);\n    function poolNFTInfos(uint256 _pid, uint256 _nftTokenId) external view returns (bool _deposited, uint256 _rewardDebt, uint256 _dividendDebt);\n\n    function getPoolCurrentReward(uint256 _pid) external view returns (RewardInfo memory _rewardInfo, uint256 _currentRewardIndex);\n    function getPoolEndBlock(uint256 _pid) external view returns (uint256 _poolEndBlock);\n    function isPoolEnd(uint256 _pid) external view returns (bool);\n\n    function pending(uint256 _pid, uint256[] memory _wnftTokenIds) external view returns (uint256 _mining, uint256 _dividend);\n    function deposit(uint256 _pid, uint256[] memory _tokenIds) external payable;\n    function withdraw(uint256 _pid, uint256[] memory _wnftTokenIds) external;\n    function withdrawWithoutHarvest(uint256 _pid, uint256[] memory _wnftTokenIds) external;\n    function harvest(uint256 _pid, address _forUser, uint256[] memory _wnftTokenIds) external returns (uint256 _mining, uint256 _dividend);\n}\n\ncontract NFTMasterChef is INFTMasterChef, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using ArrayUtils for uint256[];\n\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n    IWrappedNFTFactory public immutable wnftFactory;\n    IERC20 public immutable token;// The reward TOKEN!\n    \n    IHarvestStrategy public harvestStrategy;\n\n    address payable public devAddress;\n\n    PoolInfo[] public poolInfos;// Info of each pool.\n    RewardInfo[][] public poolsRewardInfos;\n    mapping (uint256 =\u003e NFTInfo)[] public poolNFTInfos;// the nftInfo for pool\n\n    modifier validatePoolByPid(uint256 _pid) {\n        require(_pid \u003c poolInfos.length, \"NFTMasterChef: Pool does not exist\");\n        _;\n    }\n\n    constructor(\n        IWrappedNFTFactory _wnftFactory,\n        IERC20 _token,\n        address payable _devAddress\n    )  {\n        require(address(_wnftFactory) != address(0) \u0026\u0026 address(_token) != address(0) \n                \u0026\u0026 address(_devAddress) != address(0), \"NFTMasterChef: invalid parameters!\");\n        wnftFactory = _wnftFactory;\n        token = _token;\n        devAddress = _devAddress;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfos.length;\n    }\n\n    function poolRewardLength(uint256 _pid) external view validatePoolByPid(_pid) returns (uint256) {\n        return poolsRewardInfos[_pid].length;\n    }\n\n    // Add a new NFT to the pool. Can only be called by the owner.\n    function addPoolInfo(IERC721Metadata _nft, uint256 _startBlock, RewardInfo[] memory _rewards, \n            uint256 _depositFee, IERC20 _dividendToken, bool _withUpdate) external onlyOwner nonReentrant {\n        require(address(_nft) != address(0), \"NFTMasterChef: wrong _nft or _dividendToken!\");\n        require(_rewards.length \u003e 0, \"NFTMasterChef: _rewards must be set!\");\n        uint256 rewardForEachBlock = _rewards[0].rewardForEachBlock;\n        uint256 rewardPerNFTForEachBlock = _rewards[0].rewardPerNFTForEachBlock;\n        //allow pool with dividend and without mining, or must have mining. Mining can only have either rewardForEachBlock or _rewardPerNFTForEachBlock set.\n        require((address(_dividendToken) != address(0) \u0026\u0026 (rewardForEachBlock == 0 \u0026\u0026 rewardPerNFTForEachBlock == 0)) || \n                ((rewardForEachBlock == 0 \u0026\u0026 rewardPerNFTForEachBlock \u003e 0) || (rewardForEachBlock \u003e 0 \u0026\u0026 rewardPerNFTForEachBlock == 0)), \n                \"NFTMasterChef: rewardForEachBlock or rewardPerNFTForEachBlock must be greater than zero!\");\n        IWrappedNFT wnft = wnftFactory.wnfts(_nft);\n        require(address(wnft) != address(0) \u0026\u0026 wnft.nft() == _nft \u0026\u0026 wnft.factory() == wnftFactory \u0026\u0026 wnft.delegator() == address(this), \"NFTMasterChef: wrong wnft!\");\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        PoolInfo storage pool = poolInfos.push();\n        pool.wnft = wnft;\n        pool.amount = 0;\n        pool.startBlock = block.number \u003e _startBlock ? block.number : _startBlock;\n        pool.lastRewardBlock = pool.startBlock;\n        pool.accTokenPerShare = 0;\n        pool.depositFee = _depositFee;\n\n        pool.dividendToken = _dividendToken;\n        pool.accDividendPerShare = 0;\n        \n        RewardInfo[] storage rewards = poolsRewardInfos.push();\n        _setPoolRewards(poolInfos.length - 1, _rewards);\n        pool.currentRewardEndBlock = pool.startBlock + rewards[0].rewardBlock; \n\n        poolNFTInfos.push();\n        \n        emit AddPoolInfo(_nft, wnft, _startBlock, _rewards, _depositFee, _dividendToken, _withUpdate);\n    }\n\n    function _setPoolRewards(uint256 _pid, RewardInfo[] memory _rewards) internal {\n        RewardInfo[] storage rewards = poolsRewardInfos[_pid];\n        bool rewardForEachBlockSet;\n        if(_rewards.length \u003e 0){\n            rewardForEachBlockSet = _rewards[0].rewardForEachBlock \u003e 0;\n        }\n        for (uint256 i = 0; i \u003c _rewards.length; i++) {\n            RewardInfo memory reward = _rewards[i];\n            require(reward.rewardBlock \u003e 0, \"NFTMasterChef: rewardBlock error!\");\n            require(!(reward.rewardForEachBlock \u003e 0 \u0026\u0026 reward.rewardPerNFTForEachBlock \u003e 0), \"NFTMasterChef: reward can only set one!\");\n            require((rewardForEachBlockSet \u0026\u0026 reward.rewardForEachBlock \u003e 0) || (!rewardForEachBlockSet \u0026\u0026 reward.rewardPerNFTForEachBlock \u003e 0)\n                    || (reward.rewardForEachBlock == 0 \u0026\u0026 reward.rewardPerNFTForEachBlock == 0), \"NFTMasterChef: setting error!\");\n            rewards.push(RewardInfo({\n                rewardBlock: reward.rewardBlock,\n                rewardForEachBlock: reward.rewardForEachBlock,\n                rewardPerNFTForEachBlock: reward.rewardPerNFTForEachBlock\n            }));\n        }\n    }\n\n    // update the pool reward of specified index\n    function updatePoolReward(uint256 _pid, uint256 _rewardIndex, uint256 _rewardBlock, uint256 _rewardForEachBlock, uint256 _rewardPerNFTForEachBlock) \n                            external validatePoolByPid(_pid) onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfos[_pid];\n        require(!isPoolEnd(_pid), \"NFTMasterChef: pool is end!\");\n        require(_rewardBlock \u003e 0, \"NFTMasterChef: rewardBlock error!\");\n        require(_rewardIndex \u003c poolsRewardInfos[_pid].length, \"NFTMasterChef: _rewardIndex not exists!\");\n        (, uint256 _currentRewardIndex) = getPoolCurrentReward(_pid);\n        require(_rewardIndex \u003e= _currentRewardIndex, \"NFTMasterChef: _rewardIndex error!\");\n        RewardInfo storage reward = poolsRewardInfos[_pid][_rewardIndex];\n        require(_rewardBlock \u003e= reward.rewardBlock, \"NFTMasterChef: _rewardBlock error!\");\n        require(!(_rewardForEachBlock \u003e 0 \u0026\u0026 _rewardPerNFTForEachBlock \u003e 0), \"NFTMasterChef: reward can only set one!\");\n        require((reward.rewardForEachBlock \u003e 0 \u0026\u0026 _rewardForEachBlock \u003e 0) || (reward.rewardPerNFTForEachBlock \u003e 0 \u0026\u0026 _rewardPerNFTForEachBlock \u003e 0) \n                || (_rewardForEachBlock == 0 \u0026\u0026 _rewardPerNFTForEachBlock == 0), \"NFTMasterChef: invalid parameters!\");\n        updatePool(_pid);\n        if(_rewardIndex == _currentRewardIndex){\n            pool.currentRewardEndBlock = pool.currentRewardEndBlock + _rewardBlock - reward.rewardBlock;\n        }\n        reward.rewardBlock = _rewardBlock;\n        reward.rewardForEachBlock = _rewardForEachBlock;\n        reward.rewardPerNFTForEachBlock = _rewardPerNFTForEachBlock;\n        \n        emit UpdatePoolReward(_pid, _rewardIndex, _rewardBlock, _rewardForEachBlock, _rewardPerNFTForEachBlock);\n    }\n\n    // Update the given pool\u0027s pool info. Can only be called by the owner.\n    function setStartBlock(uint256 _pid, uint256 _startBlock) external validatePoolByPid(_pid) onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfos[_pid];\n        require(block.number \u003c pool.startBlock, \"NFTMasterChef: can not change start block of started pool!\");\n        require(block.number \u003c _startBlock, \"NFTMasterChef: _startBlock must be less than block.number!\");\n        pool.startBlock = _startBlock;\n        emit SetStartBlock(_pid, _startBlock);\n    }\n\n    function isPoolEnd(uint256 _pid) public view returns (bool) {\n        uint256 poolEndBlock = getPoolEndBlock(_pid);\n        return block.number \u003e poolEndBlock;\n    }\n\n    function getPoolEndBlock(uint256 _pid) public view returns (uint256 _poolEndBlock) {\n        PoolInfo storage pool = poolInfos[_pid];\n        _poolEndBlock = pool.currentRewardEndBlock;\n        RewardInfo[] storage rewards = poolsRewardInfos[_pid];\n        for(uint256 index = pool.currentRewardIndex + 1; index \u003c rewards.length; index ++){\n            _poolEndBlock = _poolEndBlock.add(rewards[index].rewardBlock);\n        }\n    }\n\n    function getPoolCurrentReward(uint256 _pid) public view returns (RewardInfo memory _rewardInfo, uint256 _currentRewardIndex){\n        PoolInfo storage pool = poolInfos[_pid];\n        _currentRewardIndex = pool.currentRewardIndex;\n        uint256 poolCurrentRewardEndBlock = pool.currentRewardEndBlock;\n        uint256 poolRewardNumber = poolsRewardInfos[_pid].length;\n        _rewardInfo = poolsRewardInfos[_pid][_currentRewardIndex];\n        // Check whether to adjust multipliers and reward per block\n        while ((block.number \u003e poolCurrentRewardEndBlock) \u0026\u0026 (_currentRewardIndex \u003c (poolRewardNumber - 1))) {\n            // Update rewards per block\n            _currentRewardIndex ++;\n            _rewardInfo = poolsRewardInfos[_pid][_currentRewardIndex];\n            // Adjust the end block\n            poolCurrentRewardEndBlock = poolCurrentRewardEndBlock.add(_rewardInfo.rewardBlock);\n        }\n    }\n\n    // Update the given pool\u0027s pool info. Can only be called by the owner.\n    function setPoolDividendToken(uint256 _pid, IERC20 _dividendToken) external validatePoolByPid(_pid) onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfos[_pid];\n        require(!isPoolEnd(_pid), \"NFTMasterChef: pool is end!\");\n        require(address(pool.dividendToken) == address(0) || pool.accDividendPerShare == 0, \"NFTMasterChef: dividendToken can not be modified!\");\n        pool.dividendToken = _dividendToken;\n        emit SetPoolDividendToken(_pid, _dividendToken);\n    }\n\n    // Update the given pool\u0027s operation fee\n    function setPoolDepositFee(uint256 _pid, uint256 _depositFee) public validatePoolByPid(_pid) onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfos[_pid];\n        require(!isPoolEnd(_pid), \"NFTMasterChef: pool is end!\");\n        pool.depositFee = _depositFee;\n        emit SetPoolDepositFee(_pid, _depositFee);\n    }\n\n    //harvestStrategy change be changed and can be zero.\n    function setHarvestStrategy(IHarvestStrategy _harvestStrategy) external onlyOwner nonReentrant {\n        harvestStrategy = _harvestStrategy;\n        emit SetHarvestStrategy(_harvestStrategy);\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\n        if(_to \u003e _from){\n            return _to.sub(_from);\n        }\n        return 0;\n    }\n\n    function _getMultiplier(uint256 _lastRewardBlock, uint256 _currentRewardEndBlock) internal view returns (uint256 _multiplier) {\n        if(block.number \u003c _lastRewardBlock){\n            return 0;\n        }else if (block.number \u003e _currentRewardEndBlock){\n            _multiplier = getMultiplier(_lastRewardBlock, _currentRewardEndBlock);\n        }else{\n            _multiplier = getMultiplier(_lastRewardBlock, block.number);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfos[_pid];\n        if (block.number \u003c= pool.lastRewardBlock){\n            return;\n        }\n        if (block.number \u003c pool.startBlock){\n            return;\n        }\n        if (pool.lastRewardBlock \u003e= getPoolEndBlock(_pid)){\n             return;\n        }\n        RewardInfo[] storage rewards = poolsRewardInfos[_pid];\n        if(rewards.length == 0 || pool.currentRewardIndex \u003e (rewards.length - 1)){\n            return;\n        }\n        RewardInfo storage reward = rewards[pool.currentRewardIndex];\n        if(reward.rewardForEachBlock == 0 \u0026\u0026 reward.rewardPerNFTForEachBlock == 0){// only dividend pool do not need update pool\n            return;\n        }\n        if (pool.lastRewardBlock \u003c pool.startBlock) {\n            pool.lastRewardBlock = pool.startBlock;\n        }\n        if (pool.amount == 0) {\n            pool.lastRewardBlock = block.number;\n            // update current reward index\n            while ((pool.lastRewardBlock \u003e pool.currentRewardEndBlock) \u0026\u0026 (pool.currentRewardIndex \u003c (poolsRewardInfos[_pid].length - 1))) {\n                // Update rewards per block\n                pool.currentRewardIndex ++;\n                // Adjust the end block\n                pool.currentRewardEndBlock = pool.currentRewardEndBlock.add(reward.rewardBlock);\n            }\n            return;\n        }\n        uint256 multiplier = _getMultiplier(pool.lastRewardBlock, pool.currentRewardEndBlock);\n        uint256 rewardForEachBlock = reward.rewardForEachBlock;\n        if(rewardForEachBlock == 0){\n            rewardForEachBlock = pool.amount.mul(reward.rewardPerNFTForEachBlock);\n        }\n        uint256 poolReward = multiplier.mul(rewardForEachBlock);\n        uint256 poolRewardNumber = poolsRewardInfos[_pid].length;\n        // Check whether to adjust multipliers and reward per block\n        while ((block.number \u003e pool.currentRewardEndBlock) \u0026\u0026 (pool.currentRewardIndex \u003c (poolRewardNumber - 1))) {\n            // Update rewards per block\n            pool.currentRewardIndex ++;\n            \n            uint256 previousEndBlock = pool.currentRewardEndBlock;\n            \n            reward = poolsRewardInfos[_pid][pool.currentRewardIndex];\n            // Adjust the end block\n            pool.currentRewardEndBlock = pool.currentRewardEndBlock.add(reward.rewardBlock);\n            \n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, pool.currentRewardEndBlock);\n            rewardForEachBlock = reward.rewardForEachBlock;\n            if(rewardForEachBlock == 0){\n                rewardForEachBlock = pool.amount.mul(reward.rewardPerNFTForEachBlock);\n            }\n            // Adjust token rewards\n            poolReward = poolReward.add(newMultiplier.mul(rewardForEachBlock));\n        }\n\n        if (block.number \u003e pool.currentRewardEndBlock){\n            pool.lastRewardBlock = pool.currentRewardEndBlock;\n        }else{\n            pool.lastRewardBlock = block.number;\n        }\n        pool.accTokenPerShare = pool.accTokenPerShare.add(poolReward.mul(ACC_TOKEN_PRECISION).div(pool.amount));\n    }\n\n    // View function to see mining tokens and dividend on frontend.\n    function pending(uint256 _pid, uint256[] memory _wnftTokenIds) public view validatePoolByPid(_pid) returns (uint256 _mining, uint256 _dividend) {\n        _requireTokenIds(_wnftTokenIds);\n\n        PoolInfo storage pool =  poolInfos[_pid];\n\n        mapping(uint256 =\u003e NFTInfo) storage nfts = poolNFTInfos[_pid];\n        RewardInfo[] storage rewards = poolsRewardInfos[_pid];\n        RewardInfo storage reward = rewards[pool.currentRewardIndex];\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        uint256 rewardForEachBlock = reward.rewardForEachBlock;\n        if(rewardForEachBlock == 0){\n            rewardForEachBlock = pool.amount.mul(reward.rewardPerNFTForEachBlock);\n        }\n        if(rewardForEachBlock \u003e 0){\n            uint256 lastRewardBlock = pool.lastRewardBlock;\n            if (lastRewardBlock \u003c pool.startBlock) {\n                lastRewardBlock = pool.startBlock;\n            }\n            if (block.number \u003e lastRewardBlock \u0026\u0026 block.number \u003e= pool.startBlock \u0026\u0026 pool.amount \u003e 0){\n                uint256 multiplier = _getMultiplier(lastRewardBlock, pool.currentRewardEndBlock);\n\n                uint256 poolReward = multiplier.mul(rewardForEachBlock);\n                uint256 poolRewardNumber = poolsRewardInfos[_pid].length;\n                uint256 poolCurrentRewardIndex = pool.currentRewardIndex;\n                uint256 poolEndBlock = pool.currentRewardEndBlock;\n                // Check whether to adjust multipliers and reward per block\n                while ((block.number \u003e poolEndBlock) \u0026\u0026 (poolCurrentRewardIndex \u003c (poolRewardNumber - 1))) {\n                    // Update rewards per block\n                    poolCurrentRewardIndex ++;\n\n                    uint256 previousEndBlock = poolEndBlock;\n                    \n                    reward = rewards[poolCurrentRewardIndex];\n                    // Adjust the end block\n                    poolEndBlock = poolEndBlock.add(reward.rewardBlock);\n\n                    // Adjust multiplier to cover the missing periods with other lower inflation schedule\n                    uint256 newMultiplier = getMultiplier(previousEndBlock, poolEndBlock);\n                    \n                    rewardForEachBlock = reward.rewardForEachBlock;\n                    if(rewardForEachBlock == 0){\n                        rewardForEachBlock = pool.amount.mul(reward.rewardPerNFTForEachBlock);\n                    }\n                    // Adjust token rewards\n                    poolReward = poolReward.add(newMultiplier.mul(rewardForEachBlock));\n                }\n\n                accTokenPerShare = accTokenPerShare.add(poolReward.mul(ACC_TOKEN_PRECISION).div(pool.amount));\n            }\n        }\n\n        uint256 temp;\n        NFTInfo storage nft;\n        for(uint256 i = 0; i \u003c _wnftTokenIds.length; i ++){\n            uint256 wnftTokenId = _wnftTokenIds[i];\n            nft = nfts[wnftTokenId];\n            if(nft.deposited == true){\n                temp = accTokenPerShare.div(ACC_TOKEN_PRECISION);\n                _mining = _mining.add(temp.sub(nft.rewardDebt));\n\n                if(pool.accDividendPerShare \u003e 0 \u0026\u0026 address(pool.dividendToken) != address(0)){\n                    _dividend = _dividend.add(pool.accDividendPerShare.div(ACC_TOKEN_PRECISION).sub(nft.dividendDebt));\n                }\n            }\n        }\n    }\n   \n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfos.length;\n        for (uint256 pid = 0; pid \u003c length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Deposit NFTs to MasterChef for token allocation, do not give user reward.\n    function deposit(uint256 _pid, uint256[] memory _tokenIds) external validatePoolByPid(_pid) payable nonReentrant {\n        _requireTokenIds(_tokenIds);\n        updatePool(_pid);\n        PoolInfo storage pool = poolInfos[_pid];\n        require(block.number \u003e= pool.startBlock, \"NFTMasterChef: pool is not start!\");\n        require(!isPoolEnd(_pid), \"NFTMasterChef: pool is end!\");\n        if(pool.depositFee \u003e 0){// charge for fee\n            require(msg.value == pool.depositFee, \"NFTMasterChef: Fee is not enough or too much!\");\n            devAddress.transfer(pool.depositFee);\n        }\n        mapping(uint256 =\u003e NFTInfo) storage nfts = poolNFTInfos[_pid];\n        uint256 tokenId;\n        NFTInfo storage nft;\n        uint256 depositNumber;\n        for(uint256 i = 0; i \u003c _tokenIds.length; i ++){\n            tokenId = _tokenIds[i];\n            //ownerOf will return error if tokenId does not exist.\n            require(pool.wnft.nft().ownerOf(tokenId) == msg.sender, \"NFTMasterChef: can not deposit nft not owned!\");\n            nft = nfts[tokenId];\n            //If tokenId have reward not harvest, drop it.\n            if(nft.deposited == false){\n                depositNumber ++;\n                nft.deposited = true;\n            }\n            nft.rewardDebt = pool.accTokenPerShare.div(ACC_TOKEN_PRECISION);\n            nft.dividendDebt = pool.accDividendPerShare.div(ACC_TOKEN_PRECISION);\n        }\n        pool.wnft.deposit(msg.sender, _tokenIds);\n        pool.amount = pool.amount.add(depositNumber);\n        emit Deposit(msg.sender, _pid, _tokenIds);\n    }\n\n    // Withdraw NFTs from MasterChef.\n    function withdraw(uint256 _pid, uint256[] memory _wnftTokenIds) external validatePoolByPid(_pid) nonReentrant {\n        _harvest(_pid, msg.sender, _wnftTokenIds);\n        _withdrawWithoutHarvest(_pid, _wnftTokenIds);\n        emit Withdraw(msg.sender, _pid, _wnftTokenIds);\n    }\n\n    // Withdraw NFTs from MasterChef without reward\n    function _withdrawWithoutHarvest(uint256 _pid, uint256[] memory _wnftTokenIds) internal validatePoolByPid(_pid) {\n        _requireTokenIds(_wnftTokenIds);\n        PoolInfo storage pool = poolInfos[_pid];\n        mapping(uint256 =\u003e NFTInfo) storage nfts = poolNFTInfos[_pid];\n        uint256 wnftTokenId;\n        NFTInfo storage nft;\n        uint256 withdrawNumber;\n        for(uint256 i = 0; i \u003c _wnftTokenIds.length; i ++){\n            wnftTokenId = _wnftTokenIds[i];\n            require(pool.wnft.ownerOf(wnftTokenId) == msg.sender, \"NFTMasterChef: can not withdraw nft now owned!\");\n            nft = nfts[wnftTokenId];\n            if(nft.deposited == true){\n                withdrawNumber ++;\n                nft.deposited = false;\n            }\n            nft.rewardDebt = 0;\n            nft.dividendDebt = 0;\n        }\n        pool.wnft.withdraw(msg.sender, _wnftTokenIds);\n        pool.amount = pool.amount.sub(withdrawNumber);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function withdrawWithoutHarvest(uint256 _pid, uint256[] memory _wnftTokenIds) external validatePoolByPid(_pid) nonReentrant {\n        updatePool(_pid);\n        _withdrawWithoutHarvest(_pid, _wnftTokenIds);\n        emit WithdrawWithoutHarvest(msg.sender, _pid, _wnftTokenIds);\n    }\n\n    // Harvest the mining reward and dividend\n    function harvest(uint256 _pid, address _forUser, uint256[] memory _wnftTokenIds) external validatePoolByPid(_pid) nonReentrant returns (uint256 _mining, uint256 _dividend) {\n       return _harvest(_pid, _forUser, _wnftTokenIds);\n    }\n\n    function canHarvest(uint256 _pid, address _forUser, uint256[] memory _wnftTokenIds) public view validatePoolByPid(_pid) returns (bool) {\n        if(address(harvestStrategy) != address(0)){\n            return harvestStrategy.canHarvest(_pid, _forUser, _wnftTokenIds);\n        }\n        return true;\n    }\n\n    function _harvest(uint256 _pid, address _forUser, uint256[] memory _wnftTokenIds) internal validatePoolByPid(_pid) returns (uint256 _mining, uint256 _dividend) {\n        _requireTokenIds(_wnftTokenIds);\n        if(_forUser == address(0)){\n            _forUser = msg.sender;\n        }\n        require(canHarvest(_pid, _forUser, _wnftTokenIds), \"NFTMasterChef: can not harvest!\");\n        updatePool(_pid);\n        PoolInfo storage pool =  poolInfos[_pid];\n        mapping(uint256 =\u003e NFTInfo) storage nfts = poolNFTInfos[_pid];\n        uint256 wnftTokenId;\n        NFTInfo storage nft;\n        uint256 temp = 0;\n        for(uint256 i = 0; i \u003c _wnftTokenIds.length; i ++){\n            wnftTokenId = _wnftTokenIds[i];\n            nft = nfts[wnftTokenId];\n            require(pool.wnft.ownerOf(wnftTokenId) == _forUser, \"NFTMasterChef: can not harvest nft now owned!\");\n            if(nft.deposited == true){\n                temp = pool.accTokenPerShare.div(ACC_TOKEN_PRECISION);\n                _mining = _mining.add(temp.sub(nft.rewardDebt));\n                nft.rewardDebt = temp;\n\n                if(pool.accDividendPerShare \u003e 0 \u0026\u0026 address(pool.dividendToken) != address(0)){\n                    temp = pool.accDividendPerShare.div(ACC_TOKEN_PRECISION);\n                    _dividend = _dividend.add(temp.sub(nft.dividendDebt));\n                    nft.dividendDebt = temp;\n                }\n            }\n        }\n        if (_mining \u003e 0) {\n            _safeTransferTokenFromThis(token, _forUser, _mining);\n        }\n        if(_dividend \u003e 0){\n            _safeTransferTokenFromThis(pool.dividendToken, _forUser, _dividend);\n        }\n        emit Harvest(_forUser, _pid, _wnftTokenIds, _mining, _dividend);\n    }\n\n    function emergencyStop(address payable _to) external onlyOwner nonReentrant {\n        if(_to == address(0)){\n            _to = payable(msg.sender);\n        }\n        uint256 addrBalance = token.balanceOf(address(this));\n        if(addrBalance \u003e 0){\n            token.safeTransfer(_to, addrBalance);\n        }\n        uint256 length = poolInfos.length;\n        for (uint256 pid = 0; pid \u003c length; ++ pid) {\n            closePool(pid, _to);\n\n            PoolInfo storage pool = poolInfos[pid];\n            if(pool.accDividendPerShare \u003e 0 \u0026\u0026 address(pool.dividendToken) != address(0)){\n                uint256 bal = pool.dividendToken.balanceOf(address(this));\n                if(bal \u003e 0){\n                    pool.dividendToken.safeTransfer(_to, bal);\n                }\n            }\n        }\n        emit EmergencyStop(msg.sender, _to);\n    }\n\n    function closePool(uint256 _pid, address payable _to) public validatePoolByPid(_pid) onlyOwner {\n        PoolInfo storage pool = poolInfos[_pid];\n        if(isPoolEnd(_pid)){\n            return;\n        }\n        if(poolsRewardInfos[_pid].length \u003e 0){\n            pool.currentRewardIndex = poolsRewardInfos[_pid].length - 1;\n        }\n        pool.currentRewardEndBlock = block.number;\n        if(_to == address(0)){\n            _to = payable(msg.sender);\n        }\n        emit ClosePool(_pid, _to);\n    }\n\n    function _safeTransferTokenFromThis(IERC20 _token, address _to, uint256 _amount) internal {\n        uint256 bal = _token.balanceOf(address(this));\n        if (_amount \u003e bal) {\n            _token.safeTransfer(_to, bal);\n        } else {\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n\n    // Update dev1 address by the previous dev.\n    function updateDevAddress(address payable _devAddress) external nonReentrant {\n        require(msg.sender == devAddress, \"NFTMasterChef: dev: wut?\");\n        require(_devAddress != address(0), \"NFTMasterChef: address can not be zero!\");\n        devAddress = _devAddress;\n        emit UpdateDevAddress(_devAddress);\n    }\n\n    function addDividendForPool(uint256 _pid, uint256 _addDividend) external validatePoolByPid(_pid) onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfos[_pid];\n        require(_addDividend \u003e 0, \"NFTMasterChef: add token error!\");\n        require(address(pool.dividendToken) != address(0), \"NFTMasterChef: no dividend token set!\");\n        require(!isPoolEnd(_pid), \"NFTMasterChef: pool is end!\");\n\n        pool.accDividendPerShare = pool.accDividendPerShare.add(_addDividend.mul(ACC_TOKEN_PRECISION).div(pool.amount));\n        pool.dividendToken.safeTransferFrom(msg.sender, address(this), _addDividend);\n        emit AddDividendForPool(_pid, _addDividend);\n    }\n\n    function _requireTokenIds(uint256[] memory _tokenIds) internal pure {\n        require(_tokenIds.length \u003e 0, \"NFTMasterChef: tokenIds can not be empty!\");\n        require(!_tokenIds.hasDuplicate(), \"NFTMasterChef: tokenIds can not contain duplicate ones!\");\n    }\n}\n\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"},"wnft_interfaces.sol":{"content":"// SPDX-License-Identifier: MIT\n// StarBlock DAO Contracts\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\n\ninterface IERC2981Mutable is IERC165, IERC2981 {\n    function setDefaultRoyalty(address _receiver, uint96 _feeNumerator) external;\n    function deleteDefaultRoyalty() external;\n}\n\ninterface IBaseWrappedNFT is IERC165, IERC2981Mutable, IERC721Receiver, IERC721, IERC721Metadata {\n    event DelegatorChanged(address _delegator);\n    event Deposit(address _forUser, uint256[] _tokenIds);\n    event Withdraw(address _forUser, uint256[] _wnftTokenIds);\n\n    function nft() external view returns (IERC721Metadata);\n    function factory() external view returns (IWrappedNFTFactory);\n\n    function deposit(address _forUser, uint256[] memory _tokenIds) external;\n    function withdraw(address _forUser, uint256[] memory _wnftTokenIds) external;\n\n    function exists(uint256 _tokenId) external view returns (bool);\n    \n    function delegator() external view returns (address);\n    function setDelegator(address _delegator) external;\n    \n    function isEnumerable() external view returns (bool);\n}\n\ninterface IWrappedNFT is IBaseWrappedNFT {\n    function totalSupply() external view returns (uint256);\n}\n\ninterface IWrappedNFTEnumerable is IWrappedNFT, IERC721Enumerable {\n    function totalSupply() external view override(IWrappedNFT, IERC721Enumerable) returns (uint256);\n}\n\ninterface IWrappedNFTFactory {\n    event WrappedNFTDeployed(IERC721Metadata _nft, IWrappedNFT _wnft, bool _isEnumerable);\n    event WNFTDelegatorChanged(address _wnftDelegator);\n\n    function wnftDelegator() external view returns (address);\n\n    function deployWrappedNFT(IERC721Metadata _nft, bool _isEnumerable) external returns (IWrappedNFT);\n    function wnfts(IERC721Metadata _nft) external view returns (IWrappedNFT);\n    function wnftsNumber() external view returns (uint);\n}"}}