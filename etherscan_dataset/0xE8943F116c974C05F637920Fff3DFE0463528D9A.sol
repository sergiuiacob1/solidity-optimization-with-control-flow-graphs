{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/persistent/dispatcher/IDispatcher.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDispatcher Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IDispatcher {\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function claimOwnership() external;\n\n    function deployVaultProxy(\n        address _vaultLib,\n        address _owner,\n        address _vaultAccessor,\n        string calldata _fundName\n    ) external returns (address vaultProxy_);\n\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\n\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\n\n    function getFundDeployerForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (address fundDeployer_);\n\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\n        external\n        view\n        returns (\n            address nextFundDeployer_,\n            address nextVaultAccessor_,\n            address nextVaultLib_,\n            uint256 executableTimestamp_\n        );\n\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\n\n    function getNominatedOwner() external view returns (address nominatedOwner_);\n\n    function getOwner() external view returns (address owner_);\n\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\n\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (uint256 secondsRemaining_);\n\n    function hasExecutableMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasExecutableRequest_);\n\n    function hasMigrationRequest(address _vaultProxy)\n        external\n        view\n        returns (bool hasMigrationRequest_);\n\n    function removeNominatedOwner() external;\n\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\n\n    function setMigrationTimelock(uint256 _nextTimelock) external;\n\n    function setNominatedOwner(address _nextNominatedOwner) external;\n\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\n\n    function signalMigration(\n        address _vaultProxy,\n        address _nextVaultAccessor,\n        address _nextVaultLib,\n        bool _bypassFailure\n    ) external;\n}\n"
    },
    "contracts/release/core/fund-deployer/IFundDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IFundDeployer Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IFundDeployer {\n    function getOwner() external view returns (address);\n\n    function hasReconfigurationRequest(address) external view returns (bool);\n\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\n\n    function isAllowedVaultCall(\n        address,\n        bytes4,\n        bytes32\n    ) external view returns (bool);\n}\n"
    },
    "contracts/release/extensions/integration-manager/IIntegrationManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IIntegrationManager interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Interface for the IntegrationManager\ninterface IIntegrationManager {\n    enum SpendAssetsHandleType {None, Approve, Transfer}\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../IIntegrationManager.sol\";\n\n/// @title Integration Adapter interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Interface for all integration adapters\ninterface IIntegrationAdapter {\n    function parseAssetsForAction(\n        address _vaultProxy,\n        bytes4 _selector,\n        bytes calldata _encodedCallArgs\n    )\n        external\n        view\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        );\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/adapters/ConvexCurveLpStakingAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.6.12;\n\nimport \"../../../../infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol\";\nimport \"../../../../infrastructure/staking-wrappers/convex-curve-lp/ConvexCurveLpStakingWrapperFactory.sol\";\nimport \"../utils/actions/StakingWrapperActionsMixin.sol\";\nimport \"../utils/bases/CurveLiquidityAdapterBase.sol\";\n\n/// @title ConvexCurveLpStakingAdapter Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Adapter for staking Curve LP tokens via Convex,\n/// with optional combined end-to-end liquidity provision via Curve\n/// @dev Rewards tokens are not included as incoming assets for claimRewards()\n/// Rationale:\n/// - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need\n/// to enforce policy management or emit an event\n/// - rewards tokens can be outside of the asset universe, in which case they cannot be tracked\ncontract ConvexCurveLpStakingAdapter is CurveLiquidityAdapterBase, StakingWrapperActionsMixin {\n    ConvexCurveLpStakingWrapperFactory private immutable STAKING_WRAPPER_FACTORY_CONTRACT;\n    CurvePriceFeed private immutable CURVE_PRICE_FEED_CONTRACT;\n\n    constructor(\n        address _integrationManager,\n        address _curvePriceFeed,\n        address _wrappedNativeAsset,\n        address _stakingWrapperFactory,\n        address _nativeAssetAddress\n    )\n        public\n        CurveLiquidityAdapterBase(_integrationManager, _wrappedNativeAsset, _nativeAssetAddress)\n    {\n        CURVE_PRICE_FEED_CONTRACT = CurvePriceFeed(_curvePriceFeed);\n        STAKING_WRAPPER_FACTORY_CONTRACT = ConvexCurveLpStakingWrapperFactory(\n            _stakingWrapperFactory\n        );\n    }\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice Claims all rewards for a given staking token\n    /// @param _vaultProxy The VaultProxy of the calling fund\n    /// @param _actionData Data specific to this action\n    function claimRewards(\n        address _vaultProxy,\n        bytes calldata _actionData,\n        bytes calldata\n    ) external onlyIntegrationManager {\n        __stakingWrapperClaimRewardsFor(__decodeClaimRewardsCallArgs(_actionData), _vaultProxy);\n    }\n\n    /// @notice Lends assets for LP tokens, then stakes the received LP tokens\n    /// @param _vaultProxy The VaultProxy of the calling fund\n    /// @param _actionData Data specific to this action\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\n    function lendAndStake(\n        address _vaultProxy,\n        bytes calldata _actionData,\n        bytes calldata _assetData\n    ) external onlyIntegrationManager {\n        (\n            address pool,\n            uint256[] memory orderedOutgoingAssetAmounts,\n            address incomingStakingToken,\n            uint256 minIncomingStakingTokenAmount,\n            bool useUnderlyings\n        ) = __decodeLendAndStakeCallArgs(_actionData);\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\n\n        address lpToken = CURVE_PRICE_FEED_CONTRACT.getLpTokenForPool(pool);\n\n        __curveAddLiquidity(\n            pool,\n            spendAssets,\n            orderedOutgoingAssetAmounts,\n            minIncomingStakingTokenAmount,\n            useUnderlyings\n        );\n\n        __stakingWrapperStake(\n            incomingStakingToken,\n            _vaultProxy,\n            ERC20(lpToken).balanceOf(address(this)),\n            lpToken\n        );\n    }\n\n    /// @notice Stakes LP tokens\n    /// @param _vaultProxy The VaultProxy of the calling fund\n    /// @param _actionData Data specific to this action\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\n    function stake(\n        address _vaultProxy,\n        bytes calldata _actionData,\n        bytes calldata _assetData\n    ) external onlyIntegrationManager {\n        (, address incomingStakingToken, uint256 amount) = __decodeStakeCallArgs(_actionData);\n\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\n\n        __stakingWrapperStake(incomingStakingToken, _vaultProxy, amount, spendAssets[0]);\n    }\n\n    /// @notice Unstakes LP tokens\n    /// @param _vaultProxy The VaultProxy of the calling fund\n    /// @param _actionData Data specific to this action\n    function unstake(\n        address _vaultProxy,\n        bytes calldata _actionData,\n        bytes calldata\n    ) external onlyIntegrationManager {\n        (, address outgoingStakingToken, uint256 amount) = __decodeUnstakeCallArgs(_actionData);\n\n        __stakingWrapperUnstake(outgoingStakingToken, _vaultProxy, _vaultProxy, amount, false);\n    }\n\n    /// @notice Unstakes LP tokens, then redeems them\n    /// @param _vaultProxy The VaultProxy of the calling fund\n    /// @param _actionData Data specific to this action\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\n    function unstakeAndRedeem(\n        address _vaultProxy,\n        bytes calldata _actionData,\n        bytes calldata _assetData\n    )\n        external\n        onlyIntegrationManager\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\n    {\n        (\n            address pool,\n            address outgoingStakingToken,\n            uint256 outgoingStakingTokenAmount,\n            bool useUnderlyings,\n            RedeemType redeemType,\n            bytes memory incomingAssetsData\n        ) = __decodeUnstakeAndRedeemCallArgs(_actionData);\n\n        __stakingWrapperUnstake(\n            outgoingStakingToken,\n            _vaultProxy,\n            address(this),\n            outgoingStakingTokenAmount,\n            false\n        );\n\n        __curveRedeem(\n            pool,\n            outgoingStakingTokenAmount,\n            useUnderlyings,\n            redeemType,\n            incomingAssetsData\n        );\n    }\n\n    /////////////////////////////\n    // PARSE ASSETS FOR METHOD //\n    /////////////////////////////\n\n    /// @notice Parses the expected assets in a particular action\n    /// @param _selector The function selector for the callOnIntegration\n    /// @param _actionData Data specific to this action\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\n    /// the adapter access to spend assets (`None` by default)\n    /// @return spendAssets_ The assets to spend in the call\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\n    /// @return incomingAssets_ The assets to receive in the call\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\n    function parseAssetsForAction(\n        address,\n        bytes4 _selector,\n        bytes calldata _actionData\n    )\n        external\n        view\n        override\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        if (_selector == CLAIM_REWARDS_SELECTOR) {\n            return __parseAssetsForClaimRewards();\n        } else if (_selector == LEND_AND_STAKE_SELECTOR) {\n            return __parseAssetsForLendAndStake(_actionData);\n        } else if (_selector == STAKE_SELECTOR) {\n            return __parseAssetsForStake(_actionData);\n        } else if (_selector == UNSTAKE_SELECTOR) {\n            return __parseAssetsForUnstake(_actionData);\n        } else if (_selector == UNSTAKE_AND_REDEEM_SELECTOR) {\n            return __parseAssetsForUnstakeAndRedeem(_actionData);\n        }\n\n        revert(\"parseAssetsForAction: _selector invalid\");\n    }\n\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\n    /// during claimRewards() calls.\n    /// No action required, all values empty.\n    function __parseAssetsForClaimRewards()\n        private\n        pure\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        return (\n            IIntegrationManager.SpendAssetsHandleType.None,\n            new address[](0),\n            new uint256[](0),\n            new address[](0),\n            new uint256[](0)\n        );\n    }\n\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\n    /// during lendAndStake() calls\n    function __parseAssetsForLendAndStake(bytes calldata _actionData)\n        private\n        view\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        (\n            address pool,\n            uint256[] memory orderedOutgoingAssetAmounts,\n            address incomingStakingToken,\n            uint256 minIncomingStakingTokenAmount,\n            bool useUnderlyings\n        ) = __decodeLendAndStakeCallArgs(_actionData);\n\n        __validatePoolForWrapper(pool, incomingStakingToken);\n\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\n            pool,\n            orderedOutgoingAssetAmounts,\n            useUnderlyings\n        );\n\n        incomingAssets_ = new address[](1);\n        incomingAssets_[0] = incomingStakingToken;\n\n        minIncomingAssetAmounts_ = new uint256[](1);\n        minIncomingAssetAmounts_[0] = minIncomingStakingTokenAmount;\n\n        return (\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\n            spendAssets_,\n            spendAssetAmounts_,\n            incomingAssets_,\n            minIncomingAssetAmounts_\n        );\n    }\n\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\n    /// during stake() calls\n    function __parseAssetsForStake(bytes calldata _actionData)\n        private\n        view\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        (, address incomingStakingToken, uint256 amount) = __decodeStakeCallArgs(_actionData);\n\n        spendAssets_ = new address[](1);\n        spendAssets_[0] = STAKING_WRAPPER_FACTORY_CONTRACT.getCurveLpTokenForWrapper(\n            incomingStakingToken\n        );\n\n        spendAssetAmounts_ = new uint256[](1);\n        spendAssetAmounts_[0] = amount;\n\n        incomingAssets_ = new address[](1);\n        incomingAssets_[0] = incomingStakingToken;\n\n        minIncomingAssetAmounts_ = new uint256[](1);\n        minIncomingAssetAmounts_[0] = amount;\n\n        return (\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\n            spendAssets_,\n            spendAssetAmounts_,\n            incomingAssets_,\n            minIncomingAssetAmounts_\n        );\n    }\n\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\n    /// during unstake() calls\n    function __parseAssetsForUnstake(bytes calldata _actionData)\n        private\n        view\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        (, address outgoingStakingToken, uint256 amount) = __decodeUnstakeCallArgs(_actionData);\n\n        spendAssets_ = new address[](1);\n        spendAssets_[0] = outgoingStakingToken;\n\n        spendAssetAmounts_ = new uint256[](1);\n        spendAssetAmounts_[0] = amount;\n\n        incomingAssets_ = new address[](1);\n        incomingAssets_[0] = STAKING_WRAPPER_FACTORY_CONTRACT.getCurveLpTokenForWrapper(\n            outgoingStakingToken\n        );\n\n        minIncomingAssetAmounts_ = new uint256[](1);\n        minIncomingAssetAmounts_[0] = amount;\n\n        // SpendAssetsHandleType is `Approve`, since staking wrapper allows unstaking on behalf\n        return (\n            IIntegrationManager.SpendAssetsHandleType.Approve,\n            spendAssets_,\n            spendAssetAmounts_,\n            incomingAssets_,\n            minIncomingAssetAmounts_\n        );\n    }\n\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\n    /// during unstakeAndRedeem() calls\n    function __parseAssetsForUnstakeAndRedeem(bytes calldata _actionData)\n        private\n        view\n        returns (\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_,\n            uint256[] memory minIncomingAssetAmounts_\n        )\n    {\n        (\n            address pool,\n            address outgoingStakingToken,\n            uint256 outgoingStakingTokenAmount,\n            bool useUnderlyings,\n            RedeemType redeemType,\n            bytes memory incomingAssetsData\n        ) = __decodeUnstakeAndRedeemCallArgs(_actionData);\n\n        __validatePoolForWrapper(pool, outgoingStakingToken);\n\n        spendAssets_ = new address[](1);\n        spendAssets_[0] = outgoingStakingToken;\n\n        spendAssetAmounts_ = new uint256[](1);\n        spendAssetAmounts_[0] = outgoingStakingTokenAmount;\n\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\n            pool,\n            useUnderlyings,\n            redeemType,\n            incomingAssetsData\n        );\n\n        // SpendAssetsHandleType is `Approve`, since staking wrapper allows unstaking on behalf\n        return (\n            IIntegrationManager.SpendAssetsHandleType.Approve,\n            spendAssets_,\n            spendAssetAmounts_,\n            incomingAssets_,\n            minIncomingAssetAmounts_\n        );\n    }\n\n    /// @dev Helper to validate a given Curve `pool` for a given convex staking wrapper\n    function __validatePoolForWrapper(address _pool, address _wrapper) private view {\n        address lpToken = STAKING_WRAPPER_FACTORY_CONTRACT.getCurveLpTokenForWrapper(_wrapper);\n        require(\n            lpToken == CURVE_PRICE_FEED_CONTRACT.getLpTokenForPool(_pool),\n            \"__validatePoolForWrapper: Invalid\"\n        );\n    }\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../../../utils/AssetHelpers.sol\";\nimport \"../IIntegrationAdapter.sol\";\nimport \"./IntegrationSelectors.sol\";\n\n/// @title AdapterBase Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A base contract for integration adapters\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors, AssetHelpers {\n    using SafeERC20 for ERC20;\n\n    address internal immutable INTEGRATION_MANAGER;\n\n    /// @dev Provides a standard implementation for transferring incoming assets\n    /// from an adapter to a VaultProxy at the end of an adapter action\n    modifier postActionIncomingAssetsTransferHandler(\n        address _vaultProxy,\n        bytes memory _assetData\n    ) {\n        _;\n\n        (, , address[] memory incomingAssets) = __decodeAssetData(_assetData);\n\n        __pushFullAssetBalances(_vaultProxy, incomingAssets);\n    }\n\n    /// @dev Provides a standard implementation for transferring unspent spend assets\n    /// from an adapter to a VaultProxy at the end of an adapter action\n    modifier postActionSpendAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\n        _;\n\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\n\n        __pushFullAssetBalances(_vaultProxy, spendAssets);\n    }\n\n    modifier onlyIntegrationManager {\n        require(\n            msg.sender == INTEGRATION_MANAGER,\n            \"Only the IntegrationManager can call this function\"\n        );\n        _;\n    }\n\n    constructor(address _integrationManager) public {\n        INTEGRATION_MANAGER = _integrationManager;\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Helper to decode the _assetData param passed to adapter call\n    function __decodeAssetData(bytes memory _assetData)\n        internal\n        pure\n        returns (\n            address[] memory spendAssets_,\n            uint256[] memory spendAssetAmounts_,\n            address[] memory incomingAssets_\n        )\n    {\n        return abi.decode(_assetData, (address[], uint256[], address[]));\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\n    function getIntegrationManager() external view returns (address integrationManager_) {\n        return INTEGRATION_MANAGER;\n    }\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IntegrationSelectors Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Selectors for integration actions\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\nabstract contract IntegrationSelectors {\n    // Trading\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\n        keccak256(\"takeOrder(address,bytes,bytes)\")\n    );\n\n    // Lending\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\"lend(address,bytes,bytes)\"));\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\"redeem(address,bytes,bytes)\"));\n\n    // Staking\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\"stake(address,bytes,bytes)\"));\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\"unstake(address,bytes,bytes)\"));\n\n    // Rewards\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\n        keccak256(\"claimRewards(address,bytes,bytes)\")\n    );\n\n    // Combined\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\n        keccak256(\"lendAndStake(address,bytes,bytes)\")\n    );\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\n        keccak256(\"unstakeAndRedeem(address,bytes,bytes)\")\n    );\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/utils/actions/CurveLiquidityActionsMixin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../../../../../interfaces/IWETH.sol\";\nimport \"../../../../../utils/AssetHelpers.sol\";\n\n/// @title CurveLiquidityActionsMixin Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Mixin contract for interacting with the Curve pool liquidity functions\n/// @dev Inheriting contract must have a receive() function if lending or redeeming for the native asset\nabstract contract CurveLiquidityActionsMixin is AssetHelpers {\n    using Strings for uint256;\n\n    uint256 private constant ASSET_APPROVAL_TOP_UP_THRESHOLD = 1e76; // Arbitrary, slightly less than 1/11 of max uint256\n\n    bytes4 private constant CURVE_REMOVE_LIQUIDITY_ONE_COIN_SELECTOR = 0x1a4d01d2;\n    bytes4 private constant CURVE_REMOVE_LIQUIDITY_ONE_COIN_USE_UNDERLYINGS_SELECTOR = 0x517a55a3;\n\n    address private immutable CURVE_LIQUIDITY_WRAPPED_NATIVE_ASSET;\n\n    constructor(address _wrappedNativeAsset) public {\n        CURVE_LIQUIDITY_WRAPPED_NATIVE_ASSET = _wrappedNativeAsset;\n    }\n\n    /// @dev Helper to add liquidity to the pool.\n    /// _squashedOutgoingAssets are only those pool assets that are actually used to add liquidity,\n    /// which can be verbose and ordered, but it is more gas-efficient to only include non-0 amounts.\n    function __curveAddLiquidity(\n        address _pool,\n        address[] memory _squashedOutgoingAssets,\n        uint256[] memory _orderedOutgoingAssetAmounts,\n        uint256 _minIncomingLpTokenAmount,\n        bool _useUnderlyings\n    ) internal {\n        // Approve and/or unwrap native asset as necessary.\n        // Rather than using exact amounts for approvals,\n        // this tops up to max approval if 1/2 max is reached.\n        uint256 outgoingNativeAssetAmount;\n        for (uint256 i; i < _squashedOutgoingAssets.length; i++) {\n            if (_squashedOutgoingAssets[i] == getCurveLiquidityWrappedNativeAsset()) {\n                // It is never the case that a pool has multiple slots for the same native asset,\n                // so this is not additive\n                outgoingNativeAssetAmount = ERC20(getCurveLiquidityWrappedNativeAsset()).balanceOf(\n                    address(this)\n                );\n                IWETH(getCurveLiquidityWrappedNativeAsset()).withdraw(outgoingNativeAssetAmount);\n            } else {\n                // Once an asset it approved for a given pool, it will almost definitely\n                // never need approval again, but it is topped up to max once an arbitrary\n                // threshold is reached\n                __approveAssetMaxAsNeeded(\n                    _squashedOutgoingAssets[i],\n                    _pool,\n                    ASSET_APPROVAL_TOP_UP_THRESHOLD\n                );\n            }\n        }\n\n        // Dynamically call the appropriate selector\n        (bool success, bytes memory returnData) = _pool.call{value: outgoingNativeAssetAmount}(\n            __curveAddLiquidityEncodeCalldata(\n                _orderedOutgoingAssetAmounts,\n                _minIncomingLpTokenAmount,\n                _useUnderlyings\n            )\n        );\n        require(success, string(returnData));\n    }\n\n    /// @dev Helper to remove liquidity from the pool.\n    /// if using _redeemSingleAsset, must pre-validate that one - and only one - asset\n    /// has a non-zero _orderedMinIncomingAssetAmounts value.\n    function __curveRemoveLiquidity(\n        address _pool,\n        uint256 _outgoingLpTokenAmount,\n        uint256[] memory _orderedMinIncomingAssetAmounts,\n        bool _useUnderlyings\n    ) internal {\n        // Dynamically call the appropriate selector\n        (bool success, bytes memory returnData) = _pool.call(\n            __curveRemoveLiquidityEncodeCalldata(\n                _outgoingLpTokenAmount,\n                _orderedMinIncomingAssetAmounts,\n                _useUnderlyings\n            )\n        );\n        require(success, string(returnData));\n\n        // Wrap native asset\n        __curveLiquidityWrapNativeAssetBalance();\n    }\n\n    /// @dev Helper to remove liquidity from the pool and receive all value owed in one specified token\n    function __curveRemoveLiquidityOneCoin(\n        address _pool,\n        uint256 _outgoingLpTokenAmount,\n        int128 _incomingAssetPoolIndex,\n        uint256 _minIncomingAssetAmount,\n        bool _useUnderlyings\n    ) internal {\n        bytes memory callData;\n        if (_useUnderlyings) {\n            callData = abi.encodeWithSelector(\n                CURVE_REMOVE_LIQUIDITY_ONE_COIN_USE_UNDERLYINGS_SELECTOR,\n                _outgoingLpTokenAmount,\n                _incomingAssetPoolIndex,\n                _minIncomingAssetAmount,\n                true\n            );\n        } else {\n            callData = abi.encodeWithSelector(\n                CURVE_REMOVE_LIQUIDITY_ONE_COIN_SELECTOR,\n                _outgoingLpTokenAmount,\n                _incomingAssetPoolIndex,\n                _minIncomingAssetAmount\n            );\n        }\n\n        // Dynamically call the appropriate selector\n        (bool success, bytes memory returnData) = _pool.call(callData);\n        require(success, string(returnData));\n\n        // Wrap native asset\n        __curveLiquidityWrapNativeAssetBalance();\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Helper to encode calldata for a call to add liquidity on Curve\n    function __curveAddLiquidityEncodeCalldata(\n        uint256[] memory _orderedOutgoingAssetAmounts,\n        uint256 _minIncomingLpTokenAmount,\n        bool _useUnderlyings\n    ) private pure returns (bytes memory callData_) {\n        bytes memory finalEncodedArgOrEmpty;\n        if (_useUnderlyings) {\n            finalEncodedArgOrEmpty = abi.encode(true);\n        }\n\n        return\n            abi.encodePacked(\n                __curveAddLiquidityEncodeSelector(\n                    _orderedOutgoingAssetAmounts.length,\n                    _useUnderlyings\n                ),\n                abi.encodePacked(_orderedOutgoingAssetAmounts),\n                _minIncomingLpTokenAmount,\n                finalEncodedArgOrEmpty\n            );\n    }\n\n    /// @dev Helper to encode selector for a call to add liquidity on Curve\n    function __curveAddLiquidityEncodeSelector(uint256 _numberOfCoins, bool _useUnderlyings)\n        private\n        pure\n        returns (bytes4 selector_)\n    {\n        string memory finalArgOrEmpty;\n        if (_useUnderlyings) {\n            finalArgOrEmpty = \",bool\";\n        }\n\n        return\n            bytes4(\n                keccak256(\n                    abi.encodePacked(\n                        \"add_liquidity(uint256[\",\n                        _numberOfCoins.toString(),\n                        \"],\",\n                        \"uint256\",\n                        finalArgOrEmpty,\n                        \")\"\n                    )\n                )\n            );\n    }\n\n    /// @dev Helper to wrap the full native asset balance of the current contract\n    function __curveLiquidityWrapNativeAssetBalance() private {\n        uint256 nativeAssetBalance = payable(address(this)).balance;\n        if (nativeAssetBalance > 0) {\n            IWETH(payable(getCurveLiquidityWrappedNativeAsset())).deposit{\n                value: nativeAssetBalance\n            }();\n        }\n    }\n\n    /// @dev Helper to encode calldata for a call to remove liquidity from Curve\n    function __curveRemoveLiquidityEncodeCalldata(\n        uint256 _outgoingLpTokenAmount,\n        uint256[] memory _orderedMinIncomingAssetAmounts,\n        bool _useUnderlyings\n    ) private pure returns (bytes memory callData_) {\n        bytes memory finalEncodedArgOrEmpty;\n        if (_useUnderlyings) {\n            finalEncodedArgOrEmpty = abi.encode(true);\n        }\n\n        return\n            abi.encodePacked(\n                __curveRemoveLiquidityEncodeSelector(\n                    _orderedMinIncomingAssetAmounts.length,\n                    _useUnderlyings\n                ),\n                _outgoingLpTokenAmount,\n                abi.encodePacked(_orderedMinIncomingAssetAmounts),\n                finalEncodedArgOrEmpty\n            );\n    }\n\n    /// @dev Helper to encode selector for a call to remove liquidity on Curve\n    function __curveRemoveLiquidityEncodeSelector(uint256 _numberOfCoins, bool _useUnderlyings)\n        private\n        pure\n        returns (bytes4 selector_)\n    {\n        string memory finalArgOrEmpty;\n        if (_useUnderlyings) {\n            finalArgOrEmpty = \",bool\";\n        }\n\n        return\n            bytes4(\n                keccak256(\n                    abi.encodePacked(\n                        \"remove_liquidity(uint256,\",\n                        \"uint256[\",\n                        _numberOfCoins.toString(),\n                        \"]\",\n                        finalArgOrEmpty,\n                        \")\"\n                    )\n                )\n            );\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `CURVE_LIQUIDITY_WRAPPED_NATIVE_ASSET` variable\n    /// @return addressProvider_ The `CURVE_LIQUIDITY_WRAPPED_NATIVE_ASSET` variable value\n    function getCurveLiquidityWrappedNativeAsset() public view returns (address addressProvider_) {\n        return CURVE_LIQUIDITY_WRAPPED_NATIVE_ASSET;\n    }\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/utils/actions/StakingWrapperActionsMixin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../../../../../infrastructure/staking-wrappers/IStakingWrapper.sol\";\nimport \"../../../../../utils/AssetHelpers.sol\";\n\n/// @title StakingWrapperActionsMixin Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Mixin contract for interacting with IStakingWrapper implementations\nabstract contract StakingWrapperActionsMixin is AssetHelpers {\n    /// @dev Helper to claim rewards via a IStakingWrapper implementation\n    function __stakingWrapperClaimRewardsFor(address _wrapper, address _for) internal {\n        IStakingWrapper(_wrapper).claimRewardsFor(_for);\n    }\n\n    /// @dev Helper to stake via a IStakingWrapper implementation\n    function __stakingWrapperStake(\n        address _wrapper,\n        address _to,\n        uint256 _amount,\n        address _outgoingAsset\n    ) internal {\n        __approveAssetMaxAsNeeded(_outgoingAsset, _wrapper, _amount);\n        IStakingWrapper(_wrapper).depositTo(_to, _amount);\n    }\n\n    /// @dev Helper to unstake via a IStakingWrapper implementation\n    function __stakingWrapperUnstake(\n        address _wrapper,\n        address _from,\n        address _to,\n        uint256 _amount,\n        bool _claimRewards\n    ) internal {\n        IStakingWrapper(_wrapper).withdrawToOnBehalf(_from, _to, _amount, _claimRewards);\n    }\n}\n"
    },
    "contracts/release/extensions/integration-manager/integrations/utils/bases/CurveLiquidityAdapterBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.6.12;\n\nimport \"../../../../../interfaces/ICurveLiquidityPool.sol\";\nimport \"../actions/CurveLiquidityActionsMixin.sol\";\nimport \"../AdapterBase.sol\";\n\n/// @title CurveLiquidityAdapterBase Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Base adapter for liquidity provision in Curve pools that adhere to pool templates,\n/// as well as some old pools that have almost the same required interface (e.g., 3pool).\n/// Implementing contracts can allow staking via Curve gauges, Convex, etc.\nabstract contract CurveLiquidityAdapterBase is AdapterBase, CurveLiquidityActionsMixin {\n    enum RedeemType {Standard, OneCoin}\n\n    address private immutable CURVE_LIQUIDITY_NATIVE_ASSET_ADDRESS;\n\n    constructor(\n        address _integrationManager,\n        address _wrappedNativeAsset,\n        address _nativeAssetAddress\n    ) public AdapterBase(_integrationManager) CurveLiquidityActionsMixin(_wrappedNativeAsset) {\n        CURVE_LIQUIDITY_NATIVE_ASSET_ADDRESS = _nativeAssetAddress;\n    }\n\n    /// @dev Needed to unwrap and receive the native asset\n    receive() external payable {}\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Helper to return the wrappedNativeAsset if the input is the native asset\n    function __castWrappedIfNativeAsset(address _tokenOrNativeAsset)\n        internal\n        view\n        returns (address token_)\n    {\n        if (_tokenOrNativeAsset == CURVE_LIQUIDITY_NATIVE_ASSET_ADDRESS) {\n            return getCurveLiquidityWrappedNativeAsset();\n        }\n\n        return _tokenOrNativeAsset;\n    }\n\n    /// @dev Helper to correctly call the relevant redeem function based on RedeemType\n    function __curveRedeem(\n        address _pool,\n        uint256 _outgoingLpTokenAmount,\n        bool _useUnderlyings,\n        RedeemType _redeemType,\n        bytes memory _incomingAssetsData\n    ) internal {\n        if (_redeemType == RedeemType.OneCoin) {\n            (\n                uint256 incomingAssetPoolIndex,\n                uint256 minIncomingAssetAmount\n            ) = __decodeIncomingAssetsDataRedeemOneCoin(_incomingAssetsData);\n\n            __curveRemoveLiquidityOneCoin(\n                _pool,\n                _outgoingLpTokenAmount,\n                int128(incomingAssetPoolIndex),\n                minIncomingAssetAmount,\n                _useUnderlyings\n            );\n        } else {\n            __curveRemoveLiquidity(\n                _pool,\n                _outgoingLpTokenAmount,\n                __decodeIncomingAssetsDataRedeemStandard(_incomingAssetsData),\n                _useUnderlyings\n            );\n        }\n    }\n\n    /// @dev Helper function to parse spend assets for redeem() and unstakeAndRedeem() calls\n    function __parseIncomingAssetsForRedemptionCalls(\n        address _pool,\n        bool _useUnderlyings,\n        RedeemType _redeemType,\n        bytes memory _incomingAssetsData\n    )\n        internal\n        view\n        returns (address[] memory incomingAssets_, uint256[] memory minIncomingAssetAmounts_)\n    {\n        if (_redeemType == RedeemType.OneCoin) {\n            (\n                uint256 incomingAssetPoolIndex,\n                uint256 minIncomingAssetAmount\n            ) = __decodeIncomingAssetsDataRedeemOneCoin(_incomingAssetsData);\n\n            // No need to validate incomingAssetPoolIndex,\n            // as an out-of-bounds index will fail in the call to Curve\n            incomingAssets_ = new address[](1);\n            incomingAssets_[0] = __getPoolAsset(_pool, incomingAssetPoolIndex, _useUnderlyings);\n\n            minIncomingAssetAmounts_ = new uint256[](1);\n            minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\n        } else {\n            minIncomingAssetAmounts_ = __decodeIncomingAssetsDataRedeemStandard(\n                _incomingAssetsData\n            );\n\n            // No need to validate minIncomingAssetAmounts_.length,\n            // as an incorrect length will fail with the wrong n_tokens in the call to Curve\n            incomingAssets_ = new address[](minIncomingAssetAmounts_.length);\n            for (uint256 i; i < incomingAssets_.length; i++) {\n                incomingAssets_[i] = __getPoolAsset(_pool, i, _useUnderlyings);\n            }\n        }\n\n        return (incomingAssets_, minIncomingAssetAmounts_);\n    }\n\n    /// @dev Helper function to parse spend assets for lend() and lendAndStake() calls\n    function __parseSpendAssetsForLendingCalls(\n        address _pool,\n        uint256[] memory _orderedOutgoingAssetAmounts,\n        bool _useUnderlyings\n    ) internal view returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_) {\n        uint256 spendAssetsCount;\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\n                spendAssetsCount++;\n            }\n        }\n\n        spendAssets_ = new address[](spendAssetsCount);\n        spendAssetAmounts_ = new uint256[](spendAssetsCount);\n        uint256 spendAssetsIndex;\n        for (uint256 i; i < _orderedOutgoingAssetAmounts.length; i++) {\n            if (_orderedOutgoingAssetAmounts[i] > 0) {\n                spendAssets_[spendAssetsIndex] = __getPoolAsset(_pool, i, _useUnderlyings);\n                spendAssetAmounts_[spendAssetsIndex] = _orderedOutgoingAssetAmounts[i];\n                spendAssetsIndex++;\n\n                if (spendAssetsIndex == spendAssetsCount) {\n                    break;\n                }\n            }\n        }\n\n        return (spendAssets_, spendAssetAmounts_);\n    }\n\n    /// @dev Helper to get a pool asset at a given index\n    function __getPoolAsset(\n        address _pool,\n        uint256 _index,\n        bool _useUnderlying\n    ) internal view returns (address asset_) {\n        if (_useUnderlying) {\n            try ICurveLiquidityPool(_pool).underlying_coins(_index) returns (\n                address underlyingCoin\n            ) {\n                asset_ = underlyingCoin;\n            } catch {\n                asset_ = ICurveLiquidityPool(_pool).underlying_coins(int128(_index));\n            }\n        } else {\n            try ICurveLiquidityPool(_pool).coins(_index) returns (address coin) {\n                asset_ = coin;\n            } catch {\n                asset_ = ICurveLiquidityPool(_pool).coins(int128(_index));\n            }\n        }\n\n        return __castWrappedIfNativeAsset(asset_);\n    }\n\n    ///////////////////////\n    // ENCODED CALL ARGS //\n    ///////////////////////\n\n    // Some of these decodings are not relevant to inheriting contracts,\n    // and some parameters will be ignored, but this keeps the payloads\n    // consistent for all inheriting adapters.\n\n    /// @dev Helper to decode the encoded call arguments for claiming rewards\n    function __decodeClaimRewardsCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (address stakingToken_)\n    {\n        return abi.decode(_actionData, (address));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for lending and then staking\n    function __decodeLendAndStakeCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            uint256[] memory orderedOutgoingAssetAmounts_,\n            address incomingStakingToken_,\n            uint256 minIncomingStakingTokenAmount_,\n            bool useUnderlyings_\n        )\n    {\n        return abi.decode(_actionData, (address, uint256[], address, uint256, bool));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for lending\n    function __decodeLendCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            uint256[] memory orderedOutgoingAssetAmounts_,\n            uint256 minIncomingLpTokenAmount_,\n            bool useUnderlyings_\n        )\n    {\n        return abi.decode(_actionData, (address, uint256[], uint256, bool));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for redeeming\n    function __decodeRedeemCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            uint256 outgoingLpTokenAmount_,\n            bool useUnderlyings_,\n            RedeemType redeemType_,\n            bytes memory incomingAssetsData_\n        )\n    {\n        return abi.decode(_actionData, (address, uint256, bool, RedeemType, bytes));\n    }\n\n    /// @dev Helper to decode the encoded incoming assets arguments for RedeemType.OneCoin\n    function __decodeIncomingAssetsDataRedeemOneCoin(bytes memory _incomingAssetsData)\n        internal\n        pure\n        returns (uint256 incomingAssetPoolIndex_, uint256 minIncomingAssetAmount_)\n    {\n        return abi.decode(_incomingAssetsData, (uint256, uint256));\n    }\n\n    /// @dev Helper to decode the encoded incoming assets arguments for RedeemType.Standard\n    function __decodeIncomingAssetsDataRedeemStandard(bytes memory _incomingAssetsData)\n        internal\n        pure\n        returns (uint256[] memory orderedMinIncomingAssetAmounts_)\n    {\n        return abi.decode(_incomingAssetsData, (uint256[]));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for staking\n    function __decodeStakeCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            address incomingStakingToken_,\n            uint256 amount_\n        )\n    {\n        return abi.decode(_actionData, (address, address, uint256));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for unstaking and then redeeming\n    function __decodeUnstakeAndRedeemCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            address outgoingStakingToken_,\n            uint256 outgoingStakingTokenAmount_,\n            bool useUnderlyings_,\n            RedeemType redeemType_,\n            bytes memory incomingAssetsData_\n        )\n    {\n        return abi.decode(_actionData, (address, address, uint256, bool, RedeemType, bytes));\n    }\n\n    /// @dev Helper to decode the encoded call arguments for unstaking\n    function __decodeUnstakeCallArgs(bytes memory _actionData)\n        internal\n        pure\n        returns (\n            address pool_,\n            address outgoingStakingToken_,\n            uint256 amount_\n        )\n    {\n        return abi.decode(_actionData, (address, address, uint256));\n    }\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDerivativePriceFeed Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Simple interface for derivative price source oracle implementations\ninterface IDerivativePriceFeed {\n    function calcUnderlyingValues(address, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function isSupportedAsset(address) external view returns (bool);\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../../../interfaces/ICurveAddressProvider.sol\";\nimport \"../../../../interfaces/ICurveLiquidityPool.sol\";\nimport \"../../../../interfaces/ICurvePoolOwner.sol\";\nimport \"../../../../interfaces/ICurveRegistryMain.sol\";\nimport \"../../../../interfaces/ICurveRegistryMetapoolFactory.sol\";\nimport \"../../../../utils/FundDeployerOwnerMixin.sol\";\nimport \"../IDerivativePriceFeed.sol\";\n\n/// @title CurvePriceFeed Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Price feed for Curve pool tokens\ncontract CurvePriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\n    using SafeMath for uint256;\n\n    event CurvePoolOwnerSet(address poolOwner);\n\n    event DerivativeAdded(address indexed derivative, address indexed pool);\n\n    event DerivativeRemoved(address indexed derivative);\n\n    event InvariantProxyAssetForPoolSet(address indexed pool, address indexed invariantProxyAsset);\n\n    event PoolRemoved(address indexed pool);\n\n    event ValidatedVirtualPriceForPoolUpdated(address indexed pool, uint256 virtualPrice);\n\n    uint256 private constant ADDRESS_PROVIDER_METAPOOL_FACTORY_ID = 3;\n    uint256 private constant VIRTUAL_PRICE_DEVIATION_DIVISOR = 10000;\n    uint256 private constant VIRTUAL_PRICE_UNIT = 10**18;\n\n    ICurveAddressProvider private immutable ADDRESS_PROVIDER_CONTRACT;\n    uint256 private immutable VIRTUAL_PRICE_DEVIATION_THRESHOLD;\n\n    // We take one asset as representative of the pool's invariant, e.g., WETH for ETH-based pools.\n    // Caching invariantProxyAssetDecimals in a packed storage slot\n    // removes an additional external call and cold SLOAD operation during value lookups.\n    struct PoolInfo {\n        address invariantProxyAsset; // 20 bytes\n        uint8 invariantProxyAssetDecimals; // 1 byte\n        uint88 lastValidatedVirtualPrice; // 11 bytes (could safely be 8-10 bytes)\n    }\n\n    address private curvePoolOwner;\n\n    // Pool tokens and liquidity gauge tokens are treated the same for pricing purposes\n    mapping(address => address) private derivativeToPool;\n    mapping(address => PoolInfo) private poolToPoolInfo;\n\n    // Not necessary for this contract, but used by Curve liquidity adapters\n    mapping(address => address) private poolToLpToken;\n\n    constructor(\n        address _fundDeployer,\n        address _addressProvider,\n        address _poolOwner,\n        uint256 _virtualPriceDeviationThreshold\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\n        ADDRESS_PROVIDER_CONTRACT = ICurveAddressProvider(_addressProvider);\n        VIRTUAL_PRICE_DEVIATION_THRESHOLD = _virtualPriceDeviationThreshold;\n\n        __setCurvePoolOwner(_poolOwner);\n    }\n\n    /// @notice Converts a given amount of a derivative to its underlying asset values\n    /// @param _derivative The derivative to convert\n    /// @param _derivativeAmount The amount of the derivative to convert\n    /// @return underlyings_ The underlying assets for the _derivative\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\n        external\n        override\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\n    {\n        address pool = getPoolForDerivative(_derivative);\n        require(pool != address(0), \"calcUnderlyingValues: _derivative is not supported\");\n\n        PoolInfo memory poolInfo = getPoolInfo(pool);\n\n        uint256 virtualPrice = ICurveLiquidityPool(pool).get_virtual_price();\n\n        // Validate and update the cached lastValidatedVirtualPrice if:\n        /// 1. a pool requires virtual price validation, and\n        /// 2. the unvalidated `virtualPrice` deviates from the PoolInfo.lastValidatedVirtualPrice value\n        /// by more than the tolerated \"deviation threshold\" (e.g., 1%).\n        /// This is an optimization to save gas on validating non-reentrancy during the virtual price query,\n        /// since the virtual price increases relatively slowly as the pool accrues fees over time.\n        if (\n            poolInfo.lastValidatedVirtualPrice > 0 &&\n            __virtualPriceDiffExceedsThreshold(\n                virtualPrice,\n                uint256(poolInfo.lastValidatedVirtualPrice)\n            )\n        ) {\n            __updateValidatedVirtualPrice(pool, virtualPrice);\n        }\n\n        underlyings_ = new address[](1);\n        underlyings_[0] = poolInfo.invariantProxyAsset;\n\n        underlyingAmounts_ = new uint256[](1);\n        if (poolInfo.invariantProxyAssetDecimals == 18) {\n            underlyingAmounts_[0] = _derivativeAmount.mul(virtualPrice).div(VIRTUAL_PRICE_UNIT);\n        } else {\n            underlyingAmounts_[0] = _derivativeAmount\n                .mul(virtualPrice)\n                .mul(10**uint256(poolInfo.invariantProxyAssetDecimals))\n                .div(VIRTUAL_PRICE_UNIT)\n                .div(VIRTUAL_PRICE_UNIT);\n        }\n\n        return (underlyings_, underlyingAmounts_);\n    }\n\n    /// @notice Checks if an asset is supported by the price feed\n    /// @param _asset The asset to check\n    /// @return isSupported_ True if the asset is supported\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\n        return getPoolForDerivative(_asset) != address(0);\n    }\n\n    //////////////////////////\n    // DERIVATIVES REGISTRY //\n    //////////////////////////\n\n    // addPools() is the primary action to add validated lpTokens and gaugeTokens as derivatives.\n    // addGaugeTokens() can be used to add validated gauge tokens for an already-registered pool.\n    // addPoolsWithoutValidation() and addGaugeTokensWithoutValidation() can be used as overrides.\n    // It is possible to remove all pool data and derivatives (separately).\n    // It is possible to update the invariant proxy asset for any pool.\n    // It is possible to update whether the pool's virtual price is reenterable.\n\n    /// @notice Adds validated gaugeTokens to the price feed\n    /// @param _gaugeTokens The ordered gauge tokens\n    /// @param _pools The ordered pools corresponding to _gaugeTokens\n    /// @dev All params are corresponding, equal length arrays.\n    /// _pools must already have been added via an addPools~() function\n    function addGaugeTokens(address[] calldata _gaugeTokens, address[] calldata _pools)\n        external\n        onlyFundDeployerOwner\n    {\n        ICurveRegistryMain registryContract = __getRegistryMainContract();\n        ICurveRegistryMetapoolFactory factoryContract = __getRegistryMetapoolFactoryContract();\n\n        for (uint256 i; i < _gaugeTokens.length; i++) {\n            if (factoryContract.get_gauge(_pools[i]) != _gaugeTokens[i]) {\n                __validateGaugeMainRegistry(_gaugeTokens[i], _pools[i], registryContract);\n            }\n        }\n\n        __addGaugeTokens(_gaugeTokens, _pools);\n    }\n\n    /// @notice Adds unvalidated gaugeTokens to the price feed\n    /// @param _gaugeTokens The ordered gauge tokens\n    /// @param _pools The ordered pools corresponding to _gaugeTokens\n    /// @dev Should only be used if something is incorrectly failing in the registry validation,\n    /// or if gauge tokens exist outside of the registries supported by this price feed,\n    /// e.g., a wrapper for non-tokenized gauges.\n    /// All params are corresponding, equal length arrays.\n    /// _pools must already have been added via an addPools~() function.\n    function addGaugeTokensWithoutValidation(\n        address[] calldata _gaugeTokens,\n        address[] calldata _pools\n    ) external onlyFundDeployerOwner {\n        __addGaugeTokens(_gaugeTokens, _pools);\n    }\n\n    /// @notice Adds validated Curve pool info, lpTokens, and gaugeTokens to the price feed\n    /// @param _pools The ordered Curve pools\n    /// @param _invariantProxyAssets The ordered invariant proxy assets corresponding to _pools,\n    /// e.g., WETH for ETH-based pools\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    /// @param _lpTokens The ordered lpToken corresponding to _pools\n    /// @param _gaugeTokens The ordered gauge token corresponding to _pools\n    /// @dev All params are corresponding, equal length arrays.\n    /// address(0) can be used for any _gaugeTokens index to omit the gauge (e.g., no gauge token exists).\n    /// _lpTokens is not technically necessary since it is knowable from a Curve registry,\n    /// but it's better to use Curve's upgradable contracts as an input validation rather than fully-trusted.\n    function addPools(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) external onlyFundDeployerOwner {\n        ICurveRegistryMain registryContract = __getRegistryMainContract();\n        ICurveRegistryMetapoolFactory factoryContract = __getRegistryMetapoolFactoryContract();\n\n        for (uint256 i; i < _pools.length; i++) {\n            // Validate the lpToken and gauge token based on registry\n            if (_lpTokens[i] == registryContract.get_lp_token(_pools[i])) {\n                // Main registry\n\n                if (_gaugeTokens[i] != address(0)) {\n                    __validateGaugeMainRegistry(_gaugeTokens[i], _pools[i], registryContract);\n                }\n            } else if (_lpTokens[i] == _pools[i] && factoryContract.get_n_coins(_pools[i]) > 0) {\n                // Metapool factory registry\n                // lpToken and pool are the same address\n                // get_n_coins() is arbitrarily used to validate the pool is on this registry\n\n                if (_gaugeTokens[i] != address(0)) {\n                    __validateGaugeMetapoolFactoryRegistry(\n                        _gaugeTokens[i],\n                        _pools[i],\n                        factoryContract\n                    );\n                }\n            } else {\n                revert(\"addPools: Invalid inputs\");\n            }\n        }\n\n        __addPools(\n            _pools,\n            _invariantProxyAssets,\n            _reentrantVirtualPrices,\n            _lpTokens,\n            _gaugeTokens\n        );\n    }\n\n    /// @notice Adds unvalidated Curve pool info, lpTokens, and gaugeTokens to the price feed\n    /// @param _pools The ordered Curve pools\n    /// @param _invariantProxyAssets The ordered invariant proxy assets corresponding to _pools,\n    /// e.g., WETH for ETH-based pools\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    /// @param _lpTokens The ordered lpToken corresponding to _pools\n    /// @param _gaugeTokens The ordered gauge token corresponding to _pools\n    /// @dev Should only be used if something is incorrectly failing in the registry validation,\n    /// or if pools exist outside of the registries supported by this price feed.\n    /// All params are corresponding, equal length arrays.\n    /// address(0) can be used for any _gaugeTokens index to omit the gauge (e.g., no gauge token exists).\n    function addPoolsWithoutValidation(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) external onlyFundDeployerOwner {\n        __addPools(\n            _pools,\n            _invariantProxyAssets,\n            _reentrantVirtualPrices,\n            _lpTokens,\n            _gaugeTokens\n        );\n    }\n\n    /// @notice Removes derivatives from the price feed\n    /// @param _derivatives The derivatives to remove\n    /// @dev Unlikely to be needed, just in case of bad storage entry.\n    /// Can remove both lpToken and gaugeToken from derivatives list,\n    /// but does not remove lpToken from pool info cache.\n    function removeDerivatives(address[] calldata _derivatives) external onlyFundDeployerOwner {\n        for (uint256 i; i < _derivatives.length; i++) {\n            delete derivativeToPool[_derivatives[i]];\n\n            emit DerivativeRemoved(_derivatives[i]);\n        }\n    }\n\n    /// @notice Removes pools from the price feed\n    /// @param _pools The pools to remove\n    /// @dev Unlikely to be needed, just in case of bad storage entry.\n    /// Does not remove lpToken nor gauge tokens from derivatives list.\n    function removePools(address[] calldata _pools) external onlyFundDeployerOwner {\n        for (uint256 i; i < _pools.length; i++) {\n            delete poolToPoolInfo[_pools[i]];\n            delete poolToLpToken[_pools[i]];\n\n            emit PoolRemoved(_pools[i]);\n        }\n    }\n\n    /// @notice Sets the Curve pool owner\n    /// @param _nextPoolOwner The next pool owner value\n    function setCurvePoolOwner(address _nextPoolOwner) external onlyFundDeployerOwner {\n        __setCurvePoolOwner(_nextPoolOwner);\n    }\n\n    /// @notice Updates the PoolInfo for the given pools\n    /// @param _pools The ordered pools\n    /// @param _invariantProxyAssets The ordered invariant asset proxy assets\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    function updatePoolInfo(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices\n    ) external onlyFundDeployerOwner {\n        require(\n            _pools.length == _invariantProxyAssets.length &&\n                _pools.length == _reentrantVirtualPrices.length,\n            \"updatePoolInfo: Unequal arrays\"\n        );\n\n        for (uint256 i; i < _pools.length; i++) {\n            __setPoolInfo(_pools[i], _invariantProxyAssets[i], _reentrantVirtualPrices[i]);\n        }\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Helper to add a derivative to the price feed\n    function __addDerivative(address _derivative, address _pool) private {\n        require(\n            getPoolForDerivative(_derivative) == address(0),\n            \"__addDerivative: Already exists\"\n        );\n\n        // Assert that the assumption that all Curve pool tokens are 18 decimals\n        require(ERC20(_derivative).decimals() == 18, \"__addDerivative: Not 18-decimal\");\n\n        derivativeToPool[_derivative] = _pool;\n\n        emit DerivativeAdded(_derivative, _pool);\n    }\n\n    /// @dev Helper for common logic in addGauges~() functions\n    function __addGaugeTokens(address[] calldata _gaugeTokens, address[] calldata _pools) private {\n        require(_gaugeTokens.length == _pools.length, \"__addGaugeTokens: Unequal arrays\");\n\n        for (uint256 i; i < _gaugeTokens.length; i++) {\n            require(\n                getLpTokenForPool(_pools[i]) != address(0),\n                \"__addGaugeTokens: Pool not registered\"\n            );\n            // Not-yet-registered _gaugeTokens[i] tested in __addDerivative()\n\n            __addDerivative(_gaugeTokens[i], _pools[i]);\n        }\n    }\n\n    /// @dev Helper for common logic in addPools~() functions\n    function __addPools(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) private {\n        require(\n            _pools.length == _invariantProxyAssets.length &&\n                _pools.length == _reentrantVirtualPrices.length &&\n                _pools.length == _lpTokens.length &&\n                _pools.length == _gaugeTokens.length,\n            \"__addPools: Unequal arrays\"\n        );\n\n        for (uint256 i; i < _pools.length; i++) {\n            // Redundant for validated addPools()\n            require(_lpTokens[i] != address(0), \"__addPools: Empty lpToken\");\n            // Empty _pools[i] reverts during __validatePoolCompatibility\n            // Empty _invariantProxyAssets[i] reverts during __setPoolInfo\n\n            // Validate new pool's compatibility with price feed\n            require(getLpTokenForPool(_pools[i]) == address(0), \"__addPools: Already registered\");\n            __validatePoolCompatibility(_pools[i]);\n\n            // Register pool info\n            __setPoolInfo(_pools[i], _invariantProxyAssets[i], _reentrantVirtualPrices[i]);\n            poolToLpToken[_pools[i]] = _lpTokens[i];\n\n            // Add lpToken and gauge token as derivatives\n            __addDerivative(_lpTokens[i], _pools[i]);\n            if (_gaugeTokens[i] != address(0)) {\n                __addDerivative(_gaugeTokens[i], _pools[i]);\n            }\n        }\n    }\n\n    /// @dev Helper to get the main Curve registry contract\n    function __getRegistryMainContract() private view returns (ICurveRegistryMain contract_) {\n        return ICurveRegistryMain(ADDRESS_PROVIDER_CONTRACT.get_registry());\n    }\n\n    /// @dev Helper to get the Curve metapool factory registry contract\n    function __getRegistryMetapoolFactoryContract()\n        private\n        view\n        returns (ICurveRegistryMetapoolFactory contract_)\n    {\n        return\n            ICurveRegistryMetapoolFactory(\n                ADDRESS_PROVIDER_CONTRACT.get_address(ADDRESS_PROVIDER_METAPOOL_FACTORY_ID)\n            );\n    }\n\n    /// @dev Helper to call a known non-reenterable pool function\n    function __makeNonReentrantPoolCall(address _pool) private {\n        ICurvePoolOwner(getCurvePoolOwner()).withdraw_admin_fees(_pool);\n    }\n\n    /// @dev Helper to set the Curve pool owner\n    function __setCurvePoolOwner(address _nextPoolOwner) private {\n        curvePoolOwner = _nextPoolOwner;\n\n        emit CurvePoolOwnerSet(_nextPoolOwner);\n    }\n\n    /// @dev Helper to set the PoolInfo for a given pool\n    function __setPoolInfo(\n        address _pool,\n        address _invariantProxyAsset,\n        bool _reentrantVirtualPrice\n    ) private {\n        uint256 lastValidatedVirtualPrice;\n        if (_reentrantVirtualPrice) {\n            // Validate the virtual price by calling a non-reentrant pool function\n            __makeNonReentrantPoolCall(_pool);\n\n            lastValidatedVirtualPrice = ICurveLiquidityPool(_pool).get_virtual_price();\n\n            emit ValidatedVirtualPriceForPoolUpdated(_pool, lastValidatedVirtualPrice);\n        }\n\n        poolToPoolInfo[_pool] = PoolInfo({\n            invariantProxyAsset: _invariantProxyAsset,\n            invariantProxyAssetDecimals: ERC20(_invariantProxyAsset).decimals(),\n            lastValidatedVirtualPrice: uint88(lastValidatedVirtualPrice)\n        });\n\n        emit InvariantProxyAssetForPoolSet(_pool, _invariantProxyAsset);\n    }\n\n    /// @dev Helper to update the last validated virtual price for a given pool\n    function __updateValidatedVirtualPrice(address _pool, uint256 _virtualPrice) private {\n        // Validate the virtual price by calling a non-reentrant pool function\n        __makeNonReentrantPoolCall(_pool);\n\n        // _virtualPrice is now considered valid\n        poolToPoolInfo[_pool].lastValidatedVirtualPrice = uint88(_virtualPrice);\n\n        emit ValidatedVirtualPriceForPoolUpdated(_pool, _virtualPrice);\n    }\n\n    /// @dev Helper to validate a gauge on the main Curve registry\n    function __validateGaugeMainRegistry(\n        address _gauge,\n        address _pool,\n        ICurveRegistryMain _mainRegistryContract\n    ) private view {\n        (address[10] memory gauges, ) = _mainRegistryContract.get_gauges(_pool);\n        for (uint256 i; i < gauges.length; i++) {\n            if (_gauge == gauges[i]) {\n                return;\n            }\n        }\n\n        revert(\"__validateGaugeMainRegistry: Invalid gauge\");\n    }\n\n    /// @dev Helper to validate a gauge on the Curve metapool factory registry\n    function __validateGaugeMetapoolFactoryRegistry(\n        address _gauge,\n        address _pool,\n        ICurveRegistryMetapoolFactory _metapoolFactoryRegistryContract\n    ) private view {\n        require(\n            _gauge == _metapoolFactoryRegistryContract.get_gauge(_pool),\n            \"__validateGaugeMetapoolFactoryRegistry: Invalid gauge\"\n        );\n    }\n\n    /// @dev Helper to validate a pool's compatibility with the price feed.\n    /// Pool must implement expected get_virtual_price() function.\n    function __validatePoolCompatibility(address _pool) private view {\n        require(\n            ICurveLiquidityPool(_pool).get_virtual_price() > 0,\n            \"__validatePoolCompatibility: Incompatible\"\n        );\n    }\n\n    /// @dev Helper to check if the difference between lastValidatedVirtualPrice and the current virtual price\n    /// exceeds the allowed threshold before the current virtual price must be validated and stored\n    function __virtualPriceDiffExceedsThreshold(\n        uint256 _currentVirtualPrice,\n        uint256 _lastValidatedVirtualPrice\n    ) private view returns (bool exceedsThreshold_) {\n        // Uses the absolute delta between current and last validated virtual prices for the rare\n        // case where a virtual price might have decreased (e.g., rounding, slashing, yet unknown\n        // manipulation vector, etc)\n        uint256 absDiff;\n        if (_currentVirtualPrice > _lastValidatedVirtualPrice) {\n            absDiff = _currentVirtualPrice.sub(_lastValidatedVirtualPrice);\n        } else {\n            absDiff = _lastValidatedVirtualPrice.sub(_currentVirtualPrice);\n        }\n\n        return\n            absDiff >\n            _lastValidatedVirtualPrice.mul(VIRTUAL_PRICE_DEVIATION_THRESHOLD).div(\n                VIRTUAL_PRICE_DEVIATION_DIVISOR\n            );\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the Curve pool owner\n    /// @return poolOwner_ The Curve pool owner\n    function getCurvePoolOwner() public view returns (address poolOwner_) {\n        return curvePoolOwner;\n    }\n\n    /// @notice Gets the lpToken for a given pool\n    /// @param _pool The pool\n    /// @return lpToken_ The lpToken\n    function getLpTokenForPool(address _pool) public view returns (address lpToken_) {\n        return poolToLpToken[_pool];\n    }\n\n    /// @notice Gets the stored PoolInfo for a given pool\n    /// @param _pool The pool\n    /// @return poolInfo_ The PoolInfo\n    function getPoolInfo(address _pool) public view returns (PoolInfo memory poolInfo_) {\n        return poolToPoolInfo[_pool];\n    }\n\n    /// @notice Gets the pool for a given derivative\n    /// @param _derivative The derivative\n    /// @return pool_ The pool\n    function getPoolForDerivative(address _derivative) public view returns (address pool_) {\n        return derivativeToPool[_derivative];\n    }\n}\n"
    },
    "contracts/release/infrastructure/staking-wrappers/IStakingWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @title IStakingWrapper interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IStakingWrapper {\n    struct TotalHarvestData {\n        uint128 integral;\n        uint128 lastCheckpointBalance;\n    }\n\n    struct UserHarvestData {\n        uint128 integral;\n        uint128 claimableReward;\n    }\n\n    function claimRewardsFor(address _for)\n        external\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_);\n\n    function deposit(uint256 _amount) external;\n\n    function depositTo(address _to, uint256 _amount) external;\n\n    function withdraw(uint256 _amount, bool _claimRewards)\n        external\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_);\n\n    function withdrawTo(\n        address _to,\n        uint256 _amount,\n        bool _claimRewardsToHolder\n    ) external;\n\n    function withdrawToOnBehalf(\n        address _onBehalf,\n        address _to,\n        uint256 _amount,\n        bool _claimRewardsToHolder\n    ) external;\n\n    // STATE GETTERS\n\n    function getRewardTokenAtIndex(uint256 _index) external view returns (address rewardToken_);\n\n    function getRewardTokenCount() external view returns (uint256 count_);\n\n    function getRewardTokens() external view returns (address[] memory rewardTokens_);\n\n    function getTotalHarvestDataForRewardToken(address _rewardToken)\n        external\n        view\n        returns (TotalHarvestData memory totalHarvestData_);\n\n    function getUserHarvestDataForRewardToken(address _user, address _rewardToken)\n        external\n        view\n        returns (UserHarvestData memory userHarvestData_);\n\n    function isPaused() external view returns (bool isPaused_);\n}\n"
    },
    "contracts/release/infrastructure/staking-wrappers/StakingWrapperBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../../utils/AddressArrayLib.sol\";\nimport \"./IStakingWrapper.sol\";\n\n/// @title StakingWrapperBase Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A base contract for staking wrappers\n/// @dev Can be used as a base for both standard deployments and proxy targets.\n/// Draws on Convex's ConvexStakingWrapper implementation (https://github.com/convex-eth/platform/blob/main/contracts/contracts/wrappers/ConvexStakingWrapper.sol),\n/// which is based on Curve.fi gauge wrappers (https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers)\nabstract contract StakingWrapperBase is IStakingWrapper, ERC20, ReentrancyGuard {\n    using AddressArrayLib for address[];\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    event Deposited(address indexed from, address indexed to, uint256 amount);\n\n    event PauseToggled(bool isPaused);\n\n    event RewardsClaimed(\n        address caller,\n        address indexed user,\n        address[] rewardTokens,\n        uint256[] claimedAmounts\n    );\n\n    event RewardTokenAdded(address token);\n\n    event TotalHarvestIntegralUpdated(address indexed rewardToken, uint256 integral);\n\n    event TotalHarvestLastCheckpointBalanceUpdated(\n        address indexed rewardToken,\n        uint256 lastCheckpointBalance\n    );\n\n    event UserHarvestUpdated(\n        address indexed user,\n        address indexed rewardToken,\n        uint256 integral,\n        uint256 claimableReward\n    );\n\n    event Withdrawn(\n        address indexed caller,\n        address indexed from,\n        address indexed to,\n        uint256 amount\n    );\n\n    uint8 private constant DEFAULT_DECIMALS = 18;\n    uint256 private constant INTEGRAL_PRECISION = 1e18;\n    address internal immutable OWNER;\n\n    // Paused stops new deposits and checkpoints\n    bool private paused;\n    address[] private rewardTokens;\n    mapping(address => TotalHarvestData) private rewardTokenToTotalHarvestData;\n    mapping(address => mapping(address => UserHarvestData)) private rewardTokenToUserToHarvestData;\n\n    modifier onlyOwner() {\n        require(msg.sender == OWNER, \"Only owner callable\");\n        _;\n    }\n\n    constructor(\n        address _owner,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) public ERC20(_tokenName, _tokenSymbol) {\n        OWNER = _owner;\n    }\n\n    /// @notice Toggles pause for deposit and harvesting new rewards\n    /// @param _isPaused True if next state is paused, false if unpaused\n    function togglePause(bool _isPaused) external onlyOwner {\n        paused = _isPaused;\n\n        emit PauseToggled(_isPaused);\n    }\n\n    ////////////////////////////\n    // DEPOSITOR INTERACTIONS //\n    ////////////////////////////\n\n    // CLAIM REWARDS\n\n    /// @notice Claims all rewards for a given account\n    /// @param _for The account for which to claim rewards\n    /// @return rewardTokens_ The reward tokens\n    /// @return claimedAmounts_ The reward token amounts claimed\n    /// @dev Can be called off-chain to simulate the total harvestable rewards for a particular user\n    function claimRewardsFor(address _for)\n        external\n        override\n        nonReentrant\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\n    {\n        return __checkpointAndClaim(_for);\n    }\n\n    // DEPOSIT\n\n    /// @notice Deposits tokens to be staked, minting staking token to sender\n    /// @param _amount The amount of tokens to deposit\n    function deposit(uint256 _amount) external override {\n        __deposit(msg.sender, msg.sender, _amount);\n    }\n\n    /// @notice Deposits tokens to be staked, minting staking token to a specified account\n    /// @param _to The account to receive staking tokens\n    /// @param _amount The amount of tokens to deposit\n    function depositTo(address _to, uint256 _amount) external override {\n        __deposit(msg.sender, _to, _amount);\n    }\n\n    /// @dev Helper to deposit tokens to be staked\n    function __deposit(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) private nonReentrant {\n        require(!isPaused(), \"__deposit: Paused\");\n\n        // Checkpoint before minting\n        __checkpoint([_to, address(0)]);\n        _mint(_to, _amount);\n\n        __depositLogic(_from, _amount);\n\n        emit Deposited(_from, _to, _amount);\n    }\n\n    // WITHDRAWAL\n\n    /// @notice Withdraws staked tokens, returning tokens to the sender, and optionally claiming rewards\n    /// @param _amount The amount of tokens to withdraw\n    /// @param _claimRewards True if accrued rewards should be claimed\n    /// @return rewardTokens_ The reward tokens\n    /// @return claimedAmounts_ The reward token amounts claimed\n    /// @dev Setting `_claimRewards` to true will save gas over separate calls to withdraw + claim\n    function withdraw(uint256 _amount, bool _claimRewards)\n        external\n        override\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\n    {\n        return __withdraw(msg.sender, msg.sender, _amount, _claimRewards);\n    }\n\n    /// @notice Withdraws staked tokens, returning tokens to a specified account,\n    /// and optionally claims rewards to the staked token holder\n    /// @param _to The account to receive tokens\n    /// @param _amount The amount of tokens to withdraw\n    function withdrawTo(\n        address _to,\n        uint256 _amount,\n        bool _claimRewardsToHolder\n    ) external override {\n        __withdraw(msg.sender, _to, _amount, _claimRewardsToHolder);\n    }\n\n    /// @notice Withdraws staked tokens on behalf of AccountA, returning tokens to a specified AccountB,\n    /// and optionally claims rewards to the staked token holder\n    /// @param _onBehalf The account on behalf to withdraw\n    /// @param _to The account to receive tokens\n    /// @param _amount The amount of tokens to withdraw\n    /// @dev The caller must have an adequate ERC20.allowance() for _onBehalf\n    function withdrawToOnBehalf(\n        address _onBehalf,\n        address _to,\n        uint256 _amount,\n        bool _claimRewardsToHolder\n    ) external override {\n        // Validate and reduce sender approval\n        _approve(_onBehalf, msg.sender, allowance(_onBehalf, msg.sender).sub(_amount));\n\n        __withdraw(_onBehalf, _to, _amount, _claimRewardsToHolder);\n    }\n\n    /// @dev Helper to withdraw staked tokens\n    function __withdraw(\n        address _from,\n        address _to,\n        uint256 _amount,\n        bool _claimRewards\n    )\n        private\n        nonReentrant\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\n    {\n        // Checkpoint before burning\n        if (_claimRewards) {\n            (rewardTokens_, claimedAmounts_) = __checkpointAndClaim(_from);\n        } else {\n            __checkpoint([_from, address(0)]);\n        }\n\n        _burn(_from, _amount);\n\n        __withdrawLogic(_to, _amount);\n\n        emit Withdrawn(msg.sender, _from, _to, _amount);\n\n        return (rewardTokens_, claimedAmounts_);\n    }\n\n    /////////////\n    // REWARDS //\n    /////////////\n\n    // Rewards tokens are added by the inheriting contract. Rewards tokens should be added, but not removed.\n    // If new rewards tokens need to be added over time, that logic must be handled by the inheriting contract,\n    // and can make use of __harvestRewardsLogic() if necessary\n\n    // INTERNAL FUNCTIONS\n\n    /// @dev Helper to add new reward tokens. Silently ignores duplicates.\n    function __addRewardToken(address _rewardToken) internal {\n        if (!rewardTokens.contains(_rewardToken)) {\n            rewardTokens.push(_rewardToken);\n\n            emit RewardTokenAdded(_rewardToken);\n        }\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Helper to calculate an unaccounted for reward amount due to a user based on integral values\n    function __calcClaimableRewardForIntegralDiff(\n        address _account,\n        uint256 _totalHarvestIntegral,\n        uint256 _userHarvestIntegral\n    ) private view returns (uint256 claimableReward_) {\n        return\n            balanceOf(_account).mul(_totalHarvestIntegral.sub(_userHarvestIntegral)).div(\n                INTEGRAL_PRECISION\n            );\n    }\n\n    /// @dev Helper to calculate an unaccounted for integral amount based on checkpoint balance diff\n    function __calcIntegralForBalDiff(\n        uint256 _supply,\n        uint256 _currentBalance,\n        uint256 _lastCheckpointBalance\n    ) private pure returns (uint256 integral_) {\n        if (_supply > 0) {\n            uint256 balDiff = _currentBalance.sub(_lastCheckpointBalance);\n            if (balDiff > 0) {\n                return balDiff.mul(INTEGRAL_PRECISION).div(_supply);\n            }\n        }\n\n        return 0;\n    }\n\n    /// @dev Helper to checkpoint harvest data for specified accounts.\n    /// Harvests all rewards prior to checkpoint.\n    function __checkpoint(address[2] memory _accounts) private {\n        // If paused, continue to checkpoint, but don't attempt to get new rewards\n        if (!isPaused()) {\n            __harvestRewardsLogic();\n        }\n\n        uint256 supply = totalSupply();\n\n        uint256 rewardTokensLength = rewardTokens.length;\n        for (uint256 i; i < rewardTokensLength; i++) {\n            __updateHarvest(rewardTokens[i], _accounts, supply);\n        }\n    }\n\n    /// @dev Helper to checkpoint harvest data for specified accounts.\n    /// Harvests all rewards prior to checkpoint.\n    function __checkpointAndClaim(address _account)\n        private\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\n    {\n        // If paused, continue to checkpoint, but don't attempt to get new rewards\n        if (!isPaused()) {\n            __harvestRewardsLogic();\n        }\n\n        uint256 supply = totalSupply();\n\n        rewardTokens_ = rewardTokens;\n        claimedAmounts_ = new uint256[](rewardTokens_.length);\n        for (uint256 i; i < rewardTokens_.length; i++) {\n            claimedAmounts_[i] = __updateHarvestAndClaim(rewardTokens_[i], _account, supply);\n        }\n\n        emit RewardsClaimed(msg.sender, _account, rewardTokens_, claimedAmounts_);\n\n        return (rewardTokens_, claimedAmounts_);\n    }\n\n    /// @dev Helper to update harvest data\n    function __updateHarvest(\n        address _rewardToken,\n        address[2] memory _accounts,\n        uint256 _supply\n    ) private {\n        TotalHarvestData storage totalHarvestData = rewardTokenToTotalHarvestData[_rewardToken];\n\n        uint256 totalIntegral = totalHarvestData.integral;\n        uint256 bal = ERC20(_rewardToken).balanceOf(address(this));\n        uint256 integralToAdd = __calcIntegralForBalDiff(\n            _supply,\n            bal,\n            totalHarvestData.lastCheckpointBalance\n        );\n        if (integralToAdd > 0) {\n            totalIntegral = totalIntegral.add(integralToAdd);\n            totalHarvestData.integral = uint128(totalIntegral);\n            emit TotalHarvestIntegralUpdated(_rewardToken, totalIntegral);\n\n            totalHarvestData.lastCheckpointBalance = uint128(bal);\n            emit TotalHarvestLastCheckpointBalanceUpdated(_rewardToken, bal);\n        }\n\n        for (uint256 i; i < _accounts.length; i++) {\n            // skip address(0), passed in upon mint and burn\n            if (_accounts[i] == address(0)) continue;\n\n\n                UserHarvestData storage userHarvestData\n             = rewardTokenToUserToHarvestData[_rewardToken][_accounts[i]];\n\n            uint256 userIntegral = userHarvestData.integral;\n            if (userIntegral < totalIntegral) {\n                uint256 claimableReward = uint256(userHarvestData.claimableReward).add(\n                    __calcClaimableRewardForIntegralDiff(_accounts[i], totalIntegral, userIntegral)\n                );\n\n                userHarvestData.claimableReward = uint128(claimableReward);\n                userHarvestData.integral = uint128(totalIntegral);\n\n                emit UserHarvestUpdated(\n                    _accounts[i],\n                    _rewardToken,\n                    totalIntegral,\n                    claimableReward\n                );\n            }\n        }\n    }\n\n    /// @dev Helper to update harvest data and claim all rewards to holder\n    function __updateHarvestAndClaim(\n        address _rewardToken,\n        address _account,\n        uint256 _supply\n    ) private returns (uint256 claimedAmount_) {\n        TotalHarvestData storage totalHarvestData = rewardTokenToTotalHarvestData[_rewardToken];\n\n        uint256 totalIntegral = totalHarvestData.integral;\n        uint256 integralToAdd = __calcIntegralForBalDiff(\n            _supply,\n            ERC20(_rewardToken).balanceOf(address(this)),\n            totalHarvestData.lastCheckpointBalance\n        );\n        if (integralToAdd > 0) {\n            totalIntegral = totalIntegral.add(integralToAdd);\n            totalHarvestData.integral = uint128(totalIntegral);\n\n            emit TotalHarvestIntegralUpdated(_rewardToken, totalIntegral);\n        }\n\n\n            UserHarvestData storage userHarvestData\n         = rewardTokenToUserToHarvestData[_rewardToken][_account];\n\n        uint256 userIntegral = userHarvestData.integral;\n        claimedAmount_ = userHarvestData.claimableReward;\n        if (userIntegral < totalIntegral) {\n            userHarvestData.integral = uint128(totalIntegral);\n            claimedAmount_ = claimedAmount_.add(\n                __calcClaimableRewardForIntegralDiff(_account, totalIntegral, userIntegral)\n            );\n\n            emit UserHarvestUpdated(_account, _rewardToken, totalIntegral, claimedAmount_);\n        }\n\n        if (claimedAmount_ > 0) {\n            userHarvestData.claimableReward = 0;\n            ERC20(_rewardToken).safeTransfer(_account, claimedAmount_);\n\n            emit UserHarvestUpdated(_account, _rewardToken, totalIntegral, 0);\n        }\n\n        // Repeat balance lookup since the reward token could have irregular transfer behavior\n        uint256 finalBal = ERC20(_rewardToken).balanceOf(address(this));\n        if (finalBal < totalHarvestData.lastCheckpointBalance) {\n            totalHarvestData.lastCheckpointBalance = uint128(finalBal);\n\n            emit TotalHarvestLastCheckpointBalanceUpdated(_rewardToken, finalBal);\n        }\n\n        return claimedAmount_;\n    }\n\n    ////////////////////////////////\n    // REQUIRED VIRTUAL FUNCTIONS //\n    ////////////////////////////////\n\n    /// @dev Logic to be run during a deposit, specific to the integrated protocol.\n    /// Do not mint staking tokens, which already happens during __deposit().\n    function __depositLogic(address _onBehalf, uint256 _amount) internal virtual;\n\n    /// @dev Logic to be run during a checkpoint to harvest new rewards, specific to the integrated protocol.\n    /// Can also be used to add new rewards tokens dynamically.\n    /// Do not checkpoint, only harvest the rewards.\n    function __harvestRewardsLogic() internal virtual;\n\n    /// @dev Logic to be run during a withdrawal, specific to the integrated protocol.\n    /// Do not burn staking tokens, which already happens during __withdraw().\n    function __withdrawLogic(address _to, uint256 _amount) internal virtual;\n\n    /////////////////////\n    // ERC20 OVERRIDES //\n    /////////////////////\n\n    /// @notice Gets the token decimals\n    /// @return decimals_ The token decimals\n    /// @dev Implementing contracts should override to set different decimals\n    function decimals() public view virtual override returns (uint8 decimals_) {\n        return DEFAULT_DECIMALS;\n    }\n\n    /// @dev Overrides ERC20._transfer() in order to checkpoint sender and recipient pre-transfer rewards\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal override nonReentrant {\n        __checkpoint([_from, _to]);\n        super._transfer(_from, _to, _amount);\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the reward token at a particular index\n    /// @return rewardToken_ The reward token address\n    function getRewardTokenAtIndex(uint256 _index)\n        public\n        view\n        override\n        returns (address rewardToken_)\n    {\n        return rewardTokens[_index];\n    }\n\n    /// @notice Gets the count of reward tokens being harvested\n    /// @return count_ The count\n    function getRewardTokenCount() public view override returns (uint256 count_) {\n        return rewardTokens.length;\n    }\n\n    /// @notice Gets all reward tokens being harvested\n    /// @return rewardTokens_ The reward tokens\n    function getRewardTokens() public view override returns (address[] memory rewardTokens_) {\n        return rewardTokens;\n    }\n\n    /// @notice Gets the TotalHarvestData for a specified reward token\n    /// @param _rewardToken The reward token\n    /// @return totalHarvestData_ The TotalHarvestData\n    function getTotalHarvestDataForRewardToken(address _rewardToken)\n        public\n        view\n        override\n        returns (TotalHarvestData memory totalHarvestData_)\n    {\n        return rewardTokenToTotalHarvestData[_rewardToken];\n    }\n\n    /// @notice Gets the UserHarvestData for a specified account and reward token\n    /// @param _user The account\n    /// @param _rewardToken The reward token\n    /// @return userHarvestData_ The UserHarvestData\n    function getUserHarvestDataForRewardToken(address _user, address _rewardToken)\n        public\n        view\n        override\n        returns (UserHarvestData memory userHarvestData_)\n    {\n        return rewardTokenToUserToHarvestData[_rewardToken][_user];\n    }\n\n    /// @notice Checks if deposits and new reward harvesting are paused\n    /// @return isPaused_ True if paused\n    function isPaused() public view override returns (bool isPaused_) {\n        return paused;\n    }\n}\n"
    },
    "contracts/release/infrastructure/staking-wrappers/StakingWrapperLibBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"./StakingWrapperBase.sol\";\n\n/// @title StakingWrapperLibBase Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A staking wrapper base for proxy targets, extending StakingWrapperBase\nabstract contract StakingWrapperLibBase is StakingWrapperBase {\n    event TokenNameSet(string name);\n\n    event TokenSymbolSet(string symbol);\n\n    string private tokenName;\n    string private tokenSymbol;\n\n    /// @dev Helper function to set token name\n    function __setTokenName(string memory _name) internal {\n        tokenName = _name;\n\n        emit TokenNameSet(_name);\n    }\n\n    /// @dev Helper function to set token symbol\n    function __setTokenSymbol(string memory _symbol) internal {\n        tokenSymbol = _symbol;\n\n        emit TokenSymbolSet(_symbol);\n    }\n\n    /////////////////////\n    // ERC20 OVERRIDES //\n    /////////////////////\n\n    /// @notice Gets the token name\n    /// @return name_ The token name\n    /// @dev Overrides the constructor-set storage for use in proxies\n    function name() public view override returns (string memory name_) {\n        return tokenName;\n    }\n\n    /// @notice Gets the token symbol\n    /// @return symbol_ The token symbol\n    /// @dev Overrides the constructor-set storage for use in proxies\n    function symbol() public view override returns (string memory symbol_) {\n        return tokenSymbol;\n    }\n}\n"
    },
    "contracts/release/infrastructure/staking-wrappers/convex-curve-lp/ConvexCurveLpStakingWrapperFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../../../../persistent/dispatcher/IDispatcher.sol\";\nimport \"../../../utils/beacon-proxy/BeaconProxyFactory.sol\";\nimport \"./ConvexCurveLpStakingWrapperLib.sol\";\n\n/// @title ConvexCurveLpStakingWrapperFactory Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A contract factory for ConvexCurveLpStakingWrapper instances\ncontract ConvexCurveLpStakingWrapperFactory is BeaconProxyFactory {\n    event WrapperDeployed(uint256 indexed pid, address wrapperProxy, address curveLpToken);\n\n    IDispatcher private immutable DISPATCHER_CONTRACT;\n\n    mapping(uint256 => address) private pidToWrapper;\n    // Handy cache for interacting contracts\n    mapping(address => address) private wrapperToCurveLpToken;\n\n    modifier onlyOwner {\n        require(msg.sender == getOwner(), \"Only the owner can call this function\");\n        _;\n    }\n\n    constructor(\n        address _dispatcher,\n        address _convexBooster,\n        address _crvToken,\n        address _cvxToken\n    ) public BeaconProxyFactory(address(0)) {\n        DISPATCHER_CONTRACT = IDispatcher(_dispatcher);\n\n        __setCanonicalLib(\n            address(\n                new ConvexCurveLpStakingWrapperLib(\n                    address(this),\n                    _convexBooster,\n                    _crvToken,\n                    _cvxToken\n                )\n            )\n        );\n    }\n\n    /// @notice Deploys a staking wrapper for a given Convex pool\n    /// @param _pid The Convex Curve pool id\n    /// @return wrapperProxy_ The staking wrapper proxy contract address\n    function deploy(uint256 _pid) external returns (address wrapperProxy_) {\n        require(getWrapperForConvexPool(_pid) == address(0), \"deploy: Wrapper already exists\");\n\n        bytes memory constructData = abi.encodeWithSelector(\n            ConvexCurveLpStakingWrapperLib.init.selector,\n            _pid\n        );\n\n        wrapperProxy_ = deployProxy(constructData);\n\n        pidToWrapper[_pid] = wrapperProxy_;\n\n        address lpToken = ConvexCurveLpStakingWrapperLib(wrapperProxy_).getCurveLpToken();\n        wrapperToCurveLpToken[wrapperProxy_] = lpToken;\n\n        emit WrapperDeployed(_pid, wrapperProxy_, lpToken);\n\n        return wrapperProxy_;\n    }\n\n    /// @notice Pause deposits and harvesting new rewards for the given wrappers\n    /// @param _wrappers The wrappers to pause\n    function pauseWrappers(address[] calldata _wrappers) external onlyOwner {\n        for (uint256 i; i < _wrappers.length; i++) {\n            ConvexCurveLpStakingWrapperLib(_wrappers[i]).togglePause(true);\n        }\n    }\n\n    /// @notice Unpauses deposits and harvesting new rewards for the given wrappers\n    /// @param _wrappers The wrappers to unpause\n    function unpauseWrappers(address[] calldata _wrappers) external onlyOwner {\n        for (uint256 i; i < _wrappers.length; i++) {\n            ConvexCurveLpStakingWrapperLib(_wrappers[i]).togglePause(false);\n        }\n    }\n\n    ////////////////////////////////////\n    // BEACON PROXY FACTORY OVERRIDES //\n    ////////////////////////////////////\n\n    /// @notice Gets the contract owner\n    /// @return owner_ The contract owner\n    function getOwner() public view override returns (address owner_) {\n        return DISPATCHER_CONTRACT.getOwner();\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    // EXTERNAL FUNCTIONS\n\n    /// @notice Gets the Curve LP token address for a given wrapper\n    /// @param _wrapper The wrapper proxy address\n    /// @return lpToken_ The Curve LP token address\n    function getCurveLpTokenForWrapper(address _wrapper) external view returns (address lpToken_) {\n        return wrapperToCurveLpToken[_wrapper];\n    }\n\n    // PUBLIC FUNCTIONS\n\n    /// @notice Gets the wrapper address for a given Convex pool\n    /// @param _pid The Convex pool id\n    /// @return wrapper_ The wrapper proxy address\n    function getWrapperForConvexPool(uint256 _pid) public view returns (address wrapper_) {\n        return pidToWrapper[_pid];\n    }\n}\n"
    },
    "contracts/release/infrastructure/staking-wrappers/convex-curve-lp/ConvexCurveLpStakingWrapperLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../../../interfaces/IConvexBaseRewardPool.sol\";\nimport \"../../../interfaces/IConvexBooster.sol\";\nimport \"../../../interfaces/IConvexVirtualBalanceRewardPool.sol\";\nimport \"../StakingWrapperLibBase.sol\";\n\n/// @title ConvexCurveLpStakingWrapperLib Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A library contract for ConvexCurveLpStakingWrapper instances\ncontract ConvexCurveLpStakingWrapperLib is StakingWrapperLibBase {\n    IConvexBooster private immutable CONVEX_BOOSTER_CONTRACT;\n    address private immutable CRV_TOKEN;\n    address private immutable CVX_TOKEN;\n\n    address private convexPool;\n    uint256 private convexPoolId;\n    address private curveLPToken;\n\n    constructor(\n        address _owner,\n        address _convexBooster,\n        address _crvToken,\n        address _cvxToken\n    ) public StakingWrapperBase(_owner, \"\", \"\") {\n        CONVEX_BOOSTER_CONTRACT = IConvexBooster(_convexBooster);\n        CRV_TOKEN = _crvToken;\n        CVX_TOKEN = _cvxToken;\n    }\n\n    /// @notice Initializes the proxy\n    /// @param _pid The Convex pool id for which to use the proxy\n    function init(uint256 _pid) external {\n        // Can validate with any variable set here\n        require(getCurveLpToken() == address(0), \"init: Initialized\");\n\n        IConvexBooster.PoolInfo memory poolInfo = CONVEX_BOOSTER_CONTRACT.poolInfo(_pid);\n\n        // Set ERC20 info on proxy\n        __setTokenName(string(abi.encodePacked(\"Enzyme Staked: \", ERC20(poolInfo.token).name())));\n        __setTokenSymbol(string(abi.encodePacked(\"stk\", ERC20(poolInfo.token).symbol())));\n\n        curveLPToken = poolInfo.lptoken;\n        convexPool = poolInfo.crvRewards;\n        convexPoolId = _pid;\n\n        __addRewardToken(CRV_TOKEN);\n        __addRewardToken(CVX_TOKEN);\n        addExtraRewards();\n\n        setApprovals();\n    }\n\n    /// @notice Adds rewards tokens that have not yet been added to the wrapper\n    /// @dev Anybody can call, in case more pool tokens are added.\n    /// Is called prior to every new harvest.\n    function addExtraRewards() public {\n        IConvexBaseRewardPool convexPoolContract = IConvexBaseRewardPool(getConvexPool());\n        // Could probably exit early after validating that extraRewardsCount + 2 <= rewardsTokens.length,\n        // but this protects against a reward token being removed that still needs to be paid out\n        uint256 extraRewardsCount = convexPoolContract.extraRewardsLength();\n        for (uint256 i; i < extraRewardsCount; i++) {\n            // __addRewardToken silently ignores duplicates\n            __addRewardToken(\n                IConvexVirtualBalanceRewardPool(convexPoolContract.extraRewards(i)).rewardToken()\n            );\n        }\n    }\n\n    /// @notice Sets necessary ERC20 approvals, as-needed\n    function setApprovals() public {\n        ERC20(getCurveLpToken()).safeApprove(address(CONVEX_BOOSTER_CONTRACT), type(uint256).max);\n    }\n\n    ////////////////////////////////\n    // STAKING WRAPPER BASE LOGIC //\n    ////////////////////////////////\n\n    /// @dev Logic to be run during a deposit, specific to the integrated protocol.\n    /// Do not mint staking tokens, which already happens during __deposit().\n    function __depositLogic(address _from, uint256 _amount) internal override {\n        ERC20(getCurveLpToken()).safeTransferFrom(_from, address(this), _amount);\n        CONVEX_BOOSTER_CONTRACT.deposit(convexPoolId, _amount, true);\n    }\n\n    /// @dev Logic to be run during a checkpoint to harvest new rewards, specific to the integrated protocol.\n    /// Can also be used to add new rewards tokens dynamically.\n    /// Do not checkpoint, only harvest the rewards.\n    function __harvestRewardsLogic() internal override {\n        // It's probably overly-cautious to check rewards on every call,\n        // but even when the pool has 1 extra reward token (most have 0) it only adds ~10-15k gas units,\n        // so more convenient to always check than to monitor for rewards changes.\n        addExtraRewards();\n        IConvexBaseRewardPool(getConvexPool()).getReward();\n    }\n\n    /// @dev Logic to be run during a withdrawal, specific to the integrated protocol.\n    /// Do not burn staking tokens, which already happens during __withdraw().\n    function __withdrawLogic(address _to, uint256 _amount) internal override {\n        IConvexBaseRewardPool(getConvexPool()).withdrawAndUnwrap(_amount, false);\n        ERC20(getCurveLpToken()).safeTransfer(_to, _amount);\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the associated Convex reward pool address\n    /// @return convexPool_ The reward pool\n    function getConvexPool() public view returns (address convexPool_) {\n        return convexPool;\n    }\n\n    /// @notice Gets the associated Convex reward pool id (pid)\n    /// @return convexPoolId_ The pid\n    function getConvexPoolId() public view returns (uint256 convexPoolId_) {\n        return convexPoolId;\n    }\n\n    /// @notice Gets the associated Curve LP token\n    /// @return curveLPToken_ The Curve LP token\n    function getCurveLpToken() public view returns (address curveLPToken_) {\n        return curveLPToken;\n    }\n}\n"
    },
    "contracts/release/interfaces/IConvexBaseRewardPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IConvexBaseRewardPool Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IConvexBaseRewardPool {\n    function balanceOf(address) external view returns (uint256);\n\n    function extraRewards(uint256) external view returns (address);\n\n    function extraRewardsLength() external view returns (uint256);\n\n    function getReward() external returns (bool);\n\n    function withdraw(uint256, bool) external;\n\n    function withdrawAndUnwrap(uint256, bool) external returns (bool);\n}\n"
    },
    "contracts/release/interfaces/IConvexBooster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @title IConvexBooster Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IConvexBooster {\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address crvRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    function deposit(\n        uint256,\n        uint256,\n        bool\n    ) external returns (bool);\n\n    function poolInfo(uint256) external view returns (PoolInfo memory);\n}\n"
    },
    "contracts/release/interfaces/IConvexVirtualBalanceRewardPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IConvexVirtualBalanceRewardPool Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IConvexVirtualBalanceRewardPool {\n    function rewardToken() external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurveAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveAddressProvider interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurveAddressProvider {\n    function get_address(uint256) external view returns (address);\n\n    function get_registry() external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurveLiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveLiquidityPool interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurveLiquidityPool {\n    function coins(int128) external view returns (address);\n\n    function coins(uint256) external view returns (address);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function underlying_coins(int128) external view returns (address);\n\n    function underlying_coins(uint256) external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurvePoolOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurvePoolOwner interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurvePoolOwner {\n    function withdraw_admin_fees(address) external;\n}\n"
    },
    "contracts/release/interfaces/ICurveRegistryMain.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveRegistryMain interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Limited interface for the Curve Registry contract at ICurveAddressProvider.get_address(0)\ninterface ICurveRegistryMain {\n    function get_gauges(address) external view returns (address[10] memory, int128[10] memory);\n\n    function get_lp_token(address) external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurveRegistryMetapoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveRegistryMetapoolFactory interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Limited interface for the Curve Registry contract at ICurveAddressProvider.get_address(3)\ninterface ICurveRegistryMetapoolFactory {\n    function get_gauge(address) external view returns (address);\n\n    function get_n_coins(address) external view returns (uint256);\n}\n"
    },
    "contracts/release/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title WETH Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/release/utils/AddressArrayLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title AddressArray Library\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A library to extend the address array data type\nlibrary AddressArrayLib {\n    /////////////\n    // STORAGE //\n    /////////////\n\n    /// @dev Helper to remove an item from a storage array\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\n        internal\n        returns (bool removed_)\n    {\n        uint256 itemCount = _self.length;\n        for (uint256 i; i < itemCount; i++) {\n            if (_self[i] == _itemToRemove) {\n                if (i < itemCount - 1) {\n                    _self[i] = _self[itemCount - 1];\n                }\n                _self.pop();\n                removed_ = true;\n                break;\n            }\n        }\n\n        return removed_;\n    }\n\n    ////////////\n    // MEMORY //\n    ////////////\n\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\n    function addItem(address[] memory _self, address _itemToAdd)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        nextArray_ = new address[](_self.length + 1);\n        for (uint256 i; i < _self.length; i++) {\n            nextArray_[i] = _self[i];\n        }\n        nextArray_[_self.length] = _itemToAdd;\n\n        return nextArray_;\n    }\n\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        if (contains(_self, _itemToAdd)) {\n            return _self;\n        }\n\n        return addItem(_self, _itemToAdd);\n    }\n\n    /// @dev Helper to verify if an array contains a particular value\n    function contains(address[] memory _self, address _target)\n        internal\n        pure\n        returns (bool doesContain_)\n    {\n        for (uint256 i; i < _self.length; i++) {\n            if (_target == _self[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Helper to merge the unique items of a second array.\n    /// Does not consider uniqueness of either array, only relative uniqueness.\n    /// Preserves ordering.\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        uint256 newUniqueItemCount;\n        for (uint256 i; i < _arrayToMerge.length; i++) {\n            if (!contains(_self, _arrayToMerge[i])) {\n                newUniqueItemCount++;\n            }\n        }\n\n        if (newUniqueItemCount == 0) {\n            return _self;\n        }\n\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\n        for (uint256 i; i < _self.length; i++) {\n            nextArray_[i] = _self[i];\n        }\n        uint256 nextArrayIndex = _self.length;\n        for (uint256 i; i < _arrayToMerge.length; i++) {\n            if (!contains(_self, _arrayToMerge[i])) {\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\n                nextArrayIndex++;\n            }\n        }\n\n        return nextArray_;\n    }\n\n    /// @dev Helper to verify if array is a set of unique values.\n    /// Does not assert length > 0.\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\n        if (_self.length <= 1) {\n            return true;\n        }\n\n        uint256 arrayLength = _self.length;\n        for (uint256 i; i < arrayLength; i++) {\n            for (uint256 j = i + 1; j < arrayLength; j++) {\n                if (_self[i] == _self[j]) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\n    /// Does not assert uniqueness of either array.\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        if (_itemsToRemove.length == 0) {\n            return _self;\n        }\n\n        bool[] memory indexesToRemove = new bool[](_self.length);\n        uint256 remainingItemsCount = _self.length;\n        for (uint256 i; i < _self.length; i++) {\n            if (contains(_itemsToRemove, _self[i])) {\n                indexesToRemove[i] = true;\n                remainingItemsCount--;\n            }\n        }\n\n        if (remainingItemsCount == _self.length) {\n            nextArray_ = _self;\n        } else if (remainingItemsCount > 0) {\n            nextArray_ = new address[](remainingItemsCount);\n            uint256 nextArrayIndex;\n            for (uint256 i; i < _self.length; i++) {\n                if (!indexesToRemove[i]) {\n                    nextArray_[nextArrayIndex] = _self[i];\n                    nextArrayIndex++;\n                }\n            }\n        }\n\n        return nextArray_;\n    }\n}\n"
    },
    "contracts/release/utils/AssetHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/// @title AssetHelpers Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A util contract for common token actions\nabstract contract AssetHelpers {\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    /// @dev Helper to aggregate amounts of the same assets\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\n        internal\n        pure\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\n    {\n        if (_rawAssets.length == 0) {\n            return (aggregatedAssets_, aggregatedAmounts_);\n        }\n\n        uint256 aggregatedAssetCount = 1;\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\n            bool contains;\n            for (uint256 j; j < i; j++) {\n                if (_rawAssets[i] == _rawAssets[j]) {\n                    contains = true;\n                    break;\n                }\n            }\n            if (!contains) {\n                aggregatedAssetCount++;\n            }\n        }\n\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\n        uint256 aggregatedAssetIndex;\n        for (uint256 i; i < _rawAssets.length; i++) {\n            bool contains;\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\n                    contains = true;\n\n                    aggregatedAmounts_[j] += _rawAmounts[i];\n\n                    break;\n                }\n            }\n            if (!contains) {\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\n                aggregatedAssetIndex++;\n            }\n        }\n\n        return (aggregatedAssets_, aggregatedAmounts_);\n    }\n\n    /// @dev Helper to approve a target account with the max amount of an asset.\n    /// This is helpful for fully trusted contracts, such as adapters that\n    /// interact with external protocol like Uniswap, Compound, etc.\n    function __approveAssetMaxAsNeeded(\n        address _asset,\n        address _target,\n        uint256 _neededAmount\n    ) internal {\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\n        if (allowance < _neededAmount) {\n            if (allowance > 0) {\n                ERC20(_asset).safeApprove(_target, 0);\n            }\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\n        }\n    }\n\n    /// @dev Helper to transfer full asset balances from the current contract to a target\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\n        internal\n        returns (uint256[] memory amountsTransferred_)\n    {\n        amountsTransferred_ = new uint256[](_assets.length);\n        for (uint256 i; i < _assets.length; i++) {\n            ERC20 assetContract = ERC20(_assets[i]);\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\n            if (amountsTransferred_[i] > 0) {\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\n            }\n        }\n\n        return amountsTransferred_;\n    }\n}\n"
    },
    "contracts/release/utils/FundDeployerOwnerMixin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../core/fund-deployer/IFundDeployer.sol\";\n\n/// @title FundDeployerOwnerMixin Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\nabstract contract FundDeployerOwnerMixin {\n    address internal immutable FUND_DEPLOYER;\n\n    modifier onlyFundDeployerOwner() {\n        require(\n            msg.sender == getOwner(),\n            \"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\"\n        );\n        _;\n    }\n\n    constructor(address _fundDeployer) public {\n        FUND_DEPLOYER = _fundDeployer;\n    }\n\n    /// @notice Gets the owner of this contract\n    /// @return owner_ The owner\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\n    function getOwner() public view returns (address owner_) {\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `FUND_DEPLOYER` variable\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\n    function getFundDeployer() public view returns (address fundDeployer_) {\n        return FUND_DEPLOYER;\n    }\n}\n"
    },
    "contracts/release/utils/beacon-proxy/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"./IBeacon.sol\";\n\n/// @title BeaconProxy Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A proxy contract that uses the beacon pattern for instant upgrades\ncontract BeaconProxy {\n    address private immutable BEACON;\n\n    constructor(bytes memory _constructData, address _beacon) public {\n        BEACON = _beacon;\n\n        (bool success, bytes memory returnData) = IBeacon(_beacon).getCanonicalLib().delegatecall(\n            _constructData\n        );\n        require(success, string(returnData));\n    }\n\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        address contractLogic = IBeacon(BEACON).getCanonicalLib();\n        assembly {\n            calldatacopy(0x0, 0x0, calldatasize())\n            let success := delegatecall(\n                sub(gas(), 10000),\n                contractLogic,\n                0x0,\n                calldatasize(),\n                0,\n                0\n            )\n            let retSz := returndatasize()\n            returndatacopy(0, 0, retSz)\n            switch success\n                case 0 {\n                    revert(0, retSz)\n                }\n                default {\n                    return(0, retSz)\n                }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/release/utils/beacon-proxy/BeaconProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"./BeaconProxy.sol\";\nimport \"./IBeaconProxyFactory.sol\";\n\n/// @title BeaconProxyFactory Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Factory contract that deploys beacon proxies\nabstract contract BeaconProxyFactory is IBeaconProxyFactory {\n    event CanonicalLibSet(address nextCanonicalLib);\n\n    event ProxyDeployed(address indexed caller, address proxy, bytes constructData);\n\n    address private canonicalLib;\n\n    constructor(address _canonicalLib) public {\n        __setCanonicalLib(_canonicalLib);\n    }\n\n    /// @notice Deploys a new proxy instance\n    /// @param _constructData The constructor data with which to call `init()` on the deployed proxy\n    /// @return proxy_ The proxy address\n    function deployProxy(bytes memory _constructData) public override returns (address proxy_) {\n        proxy_ = address(new BeaconProxy(_constructData, address(this)));\n\n        emit ProxyDeployed(msg.sender, proxy_, _constructData);\n\n        return proxy_;\n    }\n\n    /// @notice Gets the canonical lib used by all proxies\n    /// @return canonicalLib_ The canonical lib\n    function getCanonicalLib() public view override returns (address canonicalLib_) {\n        return canonicalLib;\n    }\n\n    /// @notice Gets the contract owner\n    /// @return owner_ The contract owner\n    function getOwner() public view virtual returns (address owner_);\n\n    /// @notice Sets the next canonical lib used by all proxies\n    /// @param _nextCanonicalLib The next canonical lib\n    function setCanonicalLib(address _nextCanonicalLib) public override {\n        require(\n            msg.sender == getOwner(),\n            \"setCanonicalLib: Only the owner can call this function\"\n        );\n\n        __setCanonicalLib(_nextCanonicalLib);\n    }\n\n    /// @dev Helper to set the next canonical lib\n    function __setCanonicalLib(address _nextCanonicalLib) internal {\n        canonicalLib = _nextCanonicalLib;\n\n        emit CanonicalLibSet(_nextCanonicalLib);\n    }\n}\n"
    },
    "contracts/release/utils/beacon-proxy/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IBeacon interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IBeacon {\n    function getCanonicalLib() external view returns (address);\n}\n"
    },
    "contracts/release/utils/beacon-proxy/IBeaconProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"./IBeacon.sol\";\n\npragma solidity 0.6.12;\n\n/// @title IBeaconProxyFactory interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IBeaconProxyFactory is IBeacon {\n    function deployProxy(bytes memory _constructData) external returns (address proxy_);\n\n    function setCanonicalLib(address _canonicalLib) external;\n}\n"
    }
  }
}}