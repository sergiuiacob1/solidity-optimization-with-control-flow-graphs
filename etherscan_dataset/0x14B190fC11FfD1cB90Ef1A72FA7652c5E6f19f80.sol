{{
  "language": "Solidity",
  "sources": {
    "FairXYZDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// @ Fair.xyz dev\n\npragma solidity 0.8.7;\n\nimport \"ERC721xyz.sol\";\nimport \"Pausable.sol\";\nimport \"ECDSA.sol\";\nimport \"ReentrancyGuard.sol\";\n\ncontract FairXYZDeployer is ERC721xyz, ReentrancyGuard, Pausable{\n    \n    string private _name;\n    string private _symbol;\n\n    using ECDSA for bytes32;\n    \n    uint256 public maxTokens;\n    \n    uint256 internal nftPrice;\n\n    uint256 public royaltyPercentage; \n\n    string private baseURI;\n    string private pathURI;\n    string private preRevealURI;\n    string private _overrideURI;\n    bool public lockURI;\n\n    bool public mintReleased;\n\n    address public interfaceAddress;\n\n    bool public isBase;\n    address public owner;\n    bool public burnable;\n    uint256 public maxMintsPerWallet;\n\n    mapping(bytes32 => bool) private usedHashes;\n\n    mapping(address => uint256) public mintsPerWallet;\n\n    event OwnershipTransferred(address indexed prevOwner, address indexed newOwner);\n    event NewPriceSet(uint256 newSetPrice);\n    event NewMaxMintsPerWalletSet(uint256 newMaxMints);\n    event NewTokenRoyaltySet(uint256 newRoyalty);\n    event NewTokenURI(string newTokenURI);\n    event NewPathURI(string newPathURI);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ERROR\");\n        _;\n    }\n\n    constructor() payable ERC721xyz(_name, _symbol){\n        isBase = true;\n        _name = \"FairXYZ\";\n        _symbol = \"FairXYZ\";\n        _pause();\n    }\n \n    // Collection Name\n    function name() override public view returns (string memory) {\n        return _name;\n    }\n\n    // Collection ticker\n    function symbol() override public view returns (string memory) {\n        return _symbol;\n    }\n\n    // Signer address for minting\n    function viewSigner() public view returns(address){\n        address returnSigner = IFairXYZWallets(interfaceAddress).viewSigner(); \n        return(returnSigner);\n    }\n\n    // Fair.xyz wallet address\n    function viewWithdraw() public view returns(address){\n        address returnWithdraw = IFairXYZWallets(interfaceAddress).viewWithdraw(); \n        return(returnWithdraw);\n    }\n\n    // Initialize Creator contract\n    function initialize(uint256 maxTokens_, uint256 nftPrice_, string memory name_, string memory symbol_,\n                        bool burnable_, uint256 maxMintsPerWallet_, address interfaceAddress_,\n                        string[] memory URIs_, uint256 royaltyPercentage_) external {\n        \n        require( !isBase , \"This contract is not a base contract!\");\n        require( interfaceAddress_ != address(0), \"Cannot set to 0 address!\");\n        owner = tx.origin;\n        maxTokens = maxTokens_;\n        nftPrice = nftPrice_;\n        _name = name_;\n        _symbol = symbol_;\n        burnable = burnable_; \n        maxMintsPerWallet = maxMintsPerWallet_;\n        interfaceAddress = interfaceAddress_;\n        preRevealURI = URIs_[0];\n        baseURI = URIs_[1];\n        pathURI = URIs_[2];\n        isBase = true;\n        royaltyPercentage = royaltyPercentage_;\n    }\n\n    // Limit on NFT sale\n    modifier saleIsOpen{\n        require(viewMinted() < maxTokens, \"Sale end\");\n        _;\n    }\n\n    // Lock metadata forever\n    function lockURIforever() external onlyOwner {\n        lockURI = true;\n    }\n    \n    // View price\n    function price() external view returns (uint256) {\n        return nftPrice; \n    }\n\n    function hashVariableChanges(address sender, string memory newURI, string memory newPathURI, \n        uint256 newPrice, uint256 newMaxMintsPerWallet, uint256 newRoyaltyPercentage) private pure returns(bytes32) \n    {\n          bytes32 hash = keccak256(abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(sender, newURI, newPathURI, newPrice, newMaxMintsPerWallet, newRoyaltyPercentage)))\n          );    \n          return hash;\n    }\n     \n    // change variables in contract\n    function overrideVariables(bytes memory signature, string memory newURI, string memory newPathURI, \n        uint256 newPrice, uint256 newMaxMintsPerWallet, uint256 newRoyaltyPercentage)\n        onlyOwner\n        external\n    {\n        bytes32 messageHash = hashVariableChanges(msg.sender, newURI, newPathURI, \n                                                  newPrice, newMaxMintsPerWallet, newRoyaltyPercentage);\n        address signAdd = viewSigner();\n        require(messageHash.recover(signature) == signAdd, \"Unrecognizable Hash\");\n\n        if(!lockURI)\n        {\n            if (bytes(newPathURI).length != 0)       \n                pathURI = newPathURI;\n                emit NewPathURI(pathURI);\n\n            if(bytes(newURI).length != 0)\n            {\n                _overrideURI = newURI;\n                baseURI = \"\";\n                emit NewTokenURI(_overrideURI);\n            }\n        }\n\n        if(newPrice!=nftPrice)\n        {\n            nftPrice = newPrice;\n            emit NewPriceSet(nftPrice);\n        }\n\n        if(newMaxMintsPerWallet!=maxMintsPerWallet)\n        {\n            maxMintsPerWallet = newMaxMintsPerWallet;\n            emit NewMaxMintsPerWalletSet(maxMintsPerWallet);\n        }\n\n        if(newRoyaltyPercentage != royaltyPercentage)\n        {      \n            royaltyPercentage = newRoyaltyPercentage;\n            emit NewTokenRoyaltySet(royaltyPercentage);\n        }\n    }\n    \n    // return Base URI\n    function _baseURI() public view override returns (string memory) {\n        return baseURI;\n    }\n\n    // return Path URI\n    function _pathURI() public view override returns (string memory) {\n        if(bytes(_overrideURI).length == 0)\n        {\n            return IFairXYZWallets(interfaceAddress).viewPathURI(pathURI);\n        }\n        else\n        {\n            return _overrideURI;\n        }\n    }\n\n    // return pre-Reveal URI\n    function _preRevealURI() public view override returns (string memory) {\n        return preRevealURI;\n    }\n\n    // See remaining mints\n    function remainingMints(address minterAddress) public view returns(uint256) {\n        \n        if (maxMintsPerWallet == 0 ) {\n            revert(\"Collection with no mint limit\");\n        }\n            \n        uint256 mintsLeft = maxMintsPerWallet - mintsPerWallet[minterAddress];\n\n        return mintsLeft; \n    }\n    \n    // pause minting \n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    // unpause minting \n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // Burn token\n    function burn(uint256 tokenId) external returns(uint256)\n    {\n        require(burnable, \"This contract does not allow burning\");\n        require(msg.sender == ownerOf(tokenId), \"Burner is not the owner of token\");\n        _burn(tokenId);\n        return tokenId;\n    }\n\n    // Airdrop a token\n    function airdrop(address[] memory address_, uint256 tokenCount) onlyOwner external returns(uint256) \n    {\n        require(viewMinted() + address_.length * tokenCount <= maxTokens, \"This exceeds the maximum number of NFTs on sale!\");\n        for(uint256 i = 0; i < address_.length; ) {\n            _safeMint(address_[i], tokenCount);\n            ++i;\n        }\n        return viewMinted();\n    }\n\n    // override isApprovedForAll to allow for pre-approved operators (OpenSea and LooksRare)\n    function isApprovedForAll(address _owner, address operator) public view override(ERC721xyz) returns(bool)\n    {\n        return( IFairXYZWallets(interfaceAddress).viewPreapproved(operator) || super.isApprovedForAll(_owner, operator) );\n    }\n\n    function hashTransaction(address sender, uint256 qty, uint256 nonce, address address_) private pure returns(bytes32) \n    {\n          bytes32 hash = keccak256(abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n32\",\n            keccak256(abi.encodePacked(sender, qty, nonce, address_)))\n          );    \n          return hash;\n    }\n\n    // Mint a token    \n    function mint(bytes memory signature, uint256 nonce, uint256 numberOfTokens)\n        payable\n        external\n        whenNotPaused\n        saleIsOpen\n        returns (uint256)\n    {\n        bytes32 messageHash = hashTransaction(msg.sender, numberOfTokens, nonce, address(this));\n        address signAdd = viewSigner();\n        require(messageHash.recover(signature) == signAdd, \"Unrecognizable Hash\");\n        require(!usedHashes[messageHash], \"Reused Hash\");\n        require(msg.value  >= nftPrice * numberOfTokens, \"You have not sent the required amount of ETH\");\n        require(numberOfTokens <= 20, \"Token minting limit per transaction exceeded\");\n        require(block.number <= nonce  + 20, \"Time limit has passed\");\n        require(msg.sender == tx.origin, \"Cannot mint from contract\");\n\n        usedHashes[messageHash] = true;\n\n        uint256 origMintCount = numberOfTokens;\n\n        // If trying to mint more tokens than available -> reimburse for excess mints and allow for lower mint count\n        // to avoid a failed tx\n\n        if(maxMintsPerWallet > 0)\n        {\n            require(mintsPerWallet[msg.sender] < maxMintsPerWallet, \"Exceeds number of mints per wallet\");\n            \n            if(mintsPerWallet[msg.sender] + numberOfTokens > maxMintsPerWallet)\n            {\n                numberOfTokens = maxMintsPerWallet - mintsPerWallet[msg.sender];\n            }            \n        }\n \n        if( (viewMinted() + numberOfTokens > maxTokens) )\n        {\n            numberOfTokens = maxTokens - viewMinted();\n        }\n\n        uint256 reimbursement = origMintCount - numberOfTokens; \n\n        uint256 reimbursementPrice = reimbursement * nftPrice;\n\n        mintsPerWallet[msg.sender] += numberOfTokens;\n\n        _mint(msg.sender, numberOfTokens);\n        \n        // cap reimbursement at msg.value in case something goes wrong\n        if( 0 < reimbursementPrice && reimbursementPrice < msg.value)\n        {\n            (bool sent, ) = msg.sender.call{value: reimbursementPrice}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n        \n        return viewMinted();\n    }\n\n    // Release the mint, so no signature is required\n    function releaseMint() onlyOwner external\n    {\n        require(!mintReleased);\n        mintReleased = true;\n    }\n\n    // Mint a token without a signature, requires mintRelease    \n    function mintNoSignature(uint256 numberOfTokens)\n        payable\n        external\n        whenNotPaused\n        saleIsOpen\n        returns (uint256)\n    {\n        require(mintReleased, \"Please use the mint function to buy your token\");\n        require(msg.value  >= nftPrice * numberOfTokens, \"You have not sent the required amount of ETH\");\n        require(numberOfTokens <= 20, \"Token minting limit per transaction exceeded\");\n        require(msg.sender == tx.origin, \"Cannot mint from contract\");\n\n        uint256 origMintCount = numberOfTokens;\n\n        // If trying to mint more tokens than available -> reimburse for excess mints and allow for lower mint count\n        // to avoid a failed tx\n\n        if(maxMintsPerWallet > 0)\n        {\n            require(mintsPerWallet[msg.sender] < maxMintsPerWallet, \"Exceeds number of mints per wallet\");\n            \n            if(mintsPerWallet[msg.sender] + numberOfTokens > maxMintsPerWallet)\n            {\n                numberOfTokens = maxMintsPerWallet - mintsPerWallet[msg.sender];\n            }            \n        }\n \n        if( (viewMinted() + numberOfTokens > maxTokens) )\n        {\n            numberOfTokens = maxTokens - viewMinted();\n        }\n\n        uint256 reimbursement = origMintCount - numberOfTokens; \n\n        uint256 reimbursementPrice = reimbursement * nftPrice;\n\n        mintsPerWallet[msg.sender] += numberOfTokens;\n\n        _mint(msg.sender, numberOfTokens);\n        \n        // cap reimbursement at msg.value in case something goes wrong\n        if( 0 < reimbursementPrice && reimbursementPrice < msg.value)\n        {\n            (bool sent, ) = msg.sender.call{value: reimbursementPrice}(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n        \n        return viewMinted();\n    }\n    \n    // transfer ownership of the smart contract\n    function transferOwnership(address newOwner) onlyOwner external returns(address)\n    {\n        require(newOwner != address(0), \"Cannot set zero address as owner!\");\n        owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n        return(owner);\n    }\n\n    // Returns the royalty amount for a specific value\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address receiver, uint256 royaltyAmount)\n    {\n        return (owner, (value * royaltyPercentage) / 1000);\n    }\n\n    // only owner or Fair.xyz - withdraw contract balance to owner wallet. 6% primary sale fee to Fair.xyz\n    function withdraw()\n        public\n        payable\n    {\n        require(msg.sender == owner || msg.sender == viewWithdraw(), \"Not owner or Fair.XYZ!\");\n        require(msg.sender == tx.origin, \"Cannot withdraw from a contract\");\n        uint256 contractBalance = address(this).balance;\n\n        (bool sent, ) = viewWithdraw().call{value: contractBalance*3/50}(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        uint256 remainingContractBalance = address(this).balance;\n        payable(owner).transfer(remainingContractBalance);\n    }\n\n\n}"
    },
    "ERC721xyz.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// @ Fair.xyz dev\n\npragma solidity 0.8.7;\n\nimport \"IERC721.sol\";\nimport \"IERC721Receiver.sol\";\nimport \"IERC721Metadata.sol\";\nimport \"Address.sol\";\nimport \"Context.sol\";\nimport \"Strings.sol\";\nimport \"ERC165.sol\";\n\ninterface IFairXYZWallets {\n    function viewSigner() view external returns(address);\n    function viewWithdraw() view external returns(address);\n    function viewPreapproved(address address_) view external returns(bool);\n    function viewPathURI(string memory pathURI_) view external returns(string memory);\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, with modifications by the Fair.xyz team, thus setting the ERC721xyz standard\n */\ncontract ERC721xyz is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Token mint count\n    uint256 internal _mintedTokens;\n\n    // Token burnt count\n    uint256 internal _burntTokens;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping from token ID to original owner address\n    mapping(uint256 => address) private _origOwners;\n\n    // Burnt tokens\n    mapping(uint256 => bool) private _burnedTokens;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Returns number of minted Tokens\n     */\n    function viewMinted() public view virtual returns(uint256) {\n        return _mintedTokens;\n    }\n\n    // return all tokens\n    function totalSupply() public view virtual returns(uint256) {\n        return _mintedTokens - _burntTokens;\n    }\n\n    /**\n     * @dev Mints a batch of `tokenIds` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     *\n     * Emits {Transfer} events.\n     */\n    function _mint(address to, uint256 numberOfTokens) internal virtual {\n\n        require(to != address(0), \"ERC721: mint to the zero address\");\n\n        uint256 orig_count = _mintedTokens;\n  \n        _mintedTokens += numberOfTokens;\n\n        _beforeTokenTransfer(address(0), to, _mintedTokens);\n\n        _balances[to] += numberOfTokens;\n        \n        _origOwners[_mintedTokens] = to;\n\n        uint256 loop_ = orig_count + numberOfTokens + 1; \n\n        for (uint i = orig_count + 1; i < loop_ ; ) {\n                emit Transfer(address(0), to, i);\n                ++i;\n            }        \n\n        _afterTokenTransfer(address(0), to, _mintedTokens);\n    }\n\n    /**\n     * @dev Returns owner of token ID.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n\n        require(_exists(tokenId), \"ERC721xyz: Query for non existent token!\");\n        \n        uint256 counter = tokenId;\n        \n        if(_owners[tokenId] == address(0))\n        {\n            while (true) {\n                        \n                        address firstOwner = _origOwners[counter];\n                        if (firstOwner != address(0)) {\n                            return firstOwner;\n                        }\n                        ++counter;\n            }\n        } else {\n            return _owners[tokenId];\n        }\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Combines path URI, base URI and pre-reveal URI for the full metadata journey on Fair.xyz\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory pathURI = _pathURI();\n        string memory baseURI = _baseURI();\n        string memory preRevealURI = _preRevealURI();\n        \n        if (bytes(pathURI).length == 0)\n        {\n            return preRevealURI; \n        }\n        else\n        {\n            return string(abi.encodePacked(pathURI, baseURI, tokenId.toString()));\n        }\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If the pathURI is set, the resulting URI for each\n     * token will be the concatenation of the `baseURI`, the `pathURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() public view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev FairXYZ - URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI`, the `pathURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _pathURI() public view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev FairXYZ - URI to be shown during pre-reveal of a collection\n     */\n    function _preRevealURI() public view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721xyz.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n\n        if(_burnedTokens[tokenId]) return false;\n\n        return (0 < tokenId && tokenId <= _mintedTokens);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721xyz.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenCount) internal virtual {\n        _safeMint(to, tokenCount, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenCount,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenCount);\n        require(\n            _checkOnERC721Received(address(0), to, _mintedTokens, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        require(_exists(tokenId), \"ERC721xyz: Query for nonexistent token!\");\n        address owner = ERC721xyz.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        _burnedTokens[tokenId] = true;\n        _burntTokens += 1;\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721xyz.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721xyz.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}"
    },
    "IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "FairXYZDeployer.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}