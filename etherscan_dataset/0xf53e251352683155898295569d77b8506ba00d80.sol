{{
  "language": "Solidity",
  "sources": {
    "./contracts/metagov/BalancerGaugeStaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"../pcv/PCVDeposit.sol\";\nimport \"./utils/LiquidityGaugeManager.sol\";\nimport \"../external/balancer/IBalancerMinter.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Deposit that can stake in Balancer gauges\n/// @author Fei Protocol\ncontract BalancerGaugeStaker is PCVDeposit, LiquidityGaugeManager {\n    using SafeERC20 for IERC20;\n\n    event BalancerMinterChanged(address indexed oldMinter, address indexed newMinter);\n\n    address private constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\n\n    address public balancerMinter;\n\n    /// @notice Balancer gauge staker\n    /// @param _core Fei Core for reference\n    constructor(\n        address _core,\n        address _gaugeController,\n        address _balancerMinter\n    ) CoreRef(_core) LiquidityGaugeManager(_gaugeController) {\n        balancerMinter = _balancerMinter;\n    }\n\n    function initialize(\n        address _core,\n        address _gaugeController,\n        address _balancerMinter\n    ) external {\n        require(gaugeController == address(0), \"BalancerGaugeStaker: initialized\");\n        CoreRef._initialize(_core);\n        gaugeController = _gaugeController;\n        balancerMinter = _balancerMinter;\n    }\n\n    /// @notice Set the balancer minter used to mint BAL\n    /// @param newMinter the new minter address\n    function setBalancerMinter(address newMinter) public onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN) {\n        address currentMinter = balancerMinter; // cache to save 1 sload\n        require(currentMinter != newMinter, \"BalancerGaugeStaker: same minter\");\n\n        emit BalancerMinterChanged(currentMinter, newMinter);\n        balancerMinter = newMinter;\n    }\n\n    /// @notice returns total balance of PCV in the Deposit\n    function balance() public view override returns (uint256) {\n        return IERC20(BAL).balanceOf(address(this));\n    }\n\n    /// @notice gets the token address in which this deposit returns its balance\n    function balanceReportedIn() public view virtual override returns (address) {\n        return BAL;\n    }\n\n    /// @notice gets the resistant token balance and protocol owned fei of this deposit\n    function resistantBalanceAndFei() public view virtual override returns (uint256, uint256) {\n        return (balance(), 0);\n    }\n\n    /// @notice noop\n    function deposit() external override {}\n\n    /// @notice withdraw BAL held to another address\n    /// the BAL rewards accrue on this PCVDeposit when Gauge rewards are claimed.\n    function withdraw(address to, uint256 amount) public override onlyPCVController whenNotPaused {\n        IERC20(BAL).safeTransfer(to, amount);\n        emit Withdrawal(msg.sender, to, amount);\n    }\n\n    /// @notice Mint everything which belongs to this contract in the given gauge\n    /// @param token whose gauge should be claimed\n    function mintGaugeRewards(address token) external whenNotPaused returns (uint256) {\n        // fetch gauge address from internal mapping to avoid this permissionless\n        // call to mint on any arbitrary gauge.\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"BalancerGaugeStaker: token has no gauge configured\");\n\n        // emit the Deposit event because accounting is performed in BAL\n        // and that is what is claimed from the minter.\n        uint256 minted = IBalancerMinter(balancerMinter).mint(gaugeAddress);\n        emit Deposit(msg.sender, minted);\n\n        return minted;\n    }\n}\n"
    },
    "./contracts/pcv/PCVDeposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"../refs/CoreRef.sol\";\nimport \"./IPCVDeposit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title abstract contract for withdrawing ERC-20 tokens using a PCV Controller\n/// @author Fei Protocol\nabstract contract PCVDeposit is IPCVDeposit, CoreRef {\n    using SafeERC20 for IERC20;\n\n    /// @notice withdraw ERC20 from the contract\n    /// @param token address of the ERC20 to send\n    /// @param to address destination of the ERC20\n    /// @param amount quantity of ERC20 to send\n    function withdrawERC20(\n        address token,\n        address to,\n        uint256 amount\n    ) public virtual override onlyPCVController {\n        _withdrawERC20(token, to, amount);\n    }\n\n    function _withdrawERC20(\n        address token,\n        address to,\n        uint256 amount\n    ) internal {\n        IERC20(token).safeTransfer(to, amount);\n        emit WithdrawERC20(msg.sender, token, to, amount);\n    }\n\n    /// @notice withdraw ETH from the contract\n    /// @param to address to send ETH\n    /// @param amountOut amount of ETH to send\n    function withdrawETH(address payable to, uint256 amountOut) external virtual override onlyPCVController {\n        Address.sendValue(to, amountOut);\n        emit WithdrawETH(msg.sender, to, amountOut);\n    }\n\n    function balance() public view virtual override returns (uint256);\n\n    function balanceReportedIn() public view virtual override returns (address);\n\n    function resistantBalanceAndFei() public view virtual override returns (uint256, uint256) {\n        uint256 tokenBalance = balance();\n        return (tokenBalance, balanceReportedIn() == address(fei()) ? tokenBalance : 0);\n    }\n}\n"
    },
    "./contracts/refs/CoreRef.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"./ICoreRef.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n/// @title A Reference to Core\n/// @author Fei Protocol\n/// @notice defines some modifiers and utilities around interacting with Core\nabstract contract CoreRef is ICoreRef, Pausable {\n    ICore private immutable _core;\n    IFei private immutable _fei;\n    IERC20 private immutable _tribe;\n\n    /// @notice a role used with a subset of governor permissions for this contract only\n    bytes32 public override CONTRACT_ADMIN_ROLE;\n\n    constructor(address coreAddress) {\n        _core = ICore(coreAddress);\n\n        _fei = ICore(coreAddress).fei();\n        _tribe = ICore(coreAddress).tribe();\n\n        _setContractAdminRole(ICore(coreAddress).GOVERN_ROLE());\n    }\n\n    function _initialize(address) internal {} // no-op for backward compatibility\n\n    modifier ifMinterSelf() {\n        if (_core.isMinter(address(this))) {\n            _;\n        }\n    }\n\n    modifier onlyMinter() {\n        require(_core.isMinter(msg.sender), \"CoreRef: Caller is not a minter\");\n        _;\n    }\n\n    modifier onlyBurner() {\n        require(_core.isBurner(msg.sender), \"CoreRef: Caller is not a burner\");\n        _;\n    }\n\n    modifier onlyPCVController() {\n        require(_core.isPCVController(msg.sender), \"CoreRef: Caller is not a PCV controller\");\n        _;\n    }\n\n    modifier onlyGovernorOrAdmin() {\n        require(\n            _core.isGovernor(msg.sender) || isContractAdmin(msg.sender),\n            \"CoreRef: Caller is not a governor or contract admin\"\n        );\n        _;\n    }\n\n    modifier onlyGovernor() {\n        require(_core.isGovernor(msg.sender), \"CoreRef: Caller is not a governor\");\n        _;\n    }\n\n    modifier onlyGuardianOrGovernor() {\n        require(\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\n            \"CoreRef: Caller is not a guardian or governor\"\n        );\n        _;\n    }\n\n    modifier isGovernorOrGuardianOrAdmin() {\n        require(\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender) || isContractAdmin(msg.sender),\n            \"CoreRef: Caller is not governor or guardian or admin\"\n        );\n        _;\n    }\n\n    // Named onlyTribeRole to prevent collision with OZ onlyRole modifier\n    modifier onlyTribeRole(bytes32 role) {\n        require(_core.hasRole(role, msg.sender), \"UNAUTHORIZED\");\n        _;\n    }\n\n    // Modifiers to allow any combination of roles\n    modifier hasAnyOfTwoRoles(bytes32 role1, bytes32 role2) {\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender), \"UNAUTHORIZED\");\n        _;\n    }\n\n    modifier hasAnyOfThreeRoles(\n        bytes32 role1,\n        bytes32 role2,\n        bytes32 role3\n    ) {\n        require(\n            _core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender),\n            \"UNAUTHORIZED\"\n        );\n        _;\n    }\n\n    modifier hasAnyOfFourRoles(\n        bytes32 role1,\n        bytes32 role2,\n        bytes32 role3,\n        bytes32 role4\n    ) {\n        require(\n            _core.hasRole(role1, msg.sender) ||\n                _core.hasRole(role2, msg.sender) ||\n                _core.hasRole(role3, msg.sender) ||\n                _core.hasRole(role4, msg.sender),\n            \"UNAUTHORIZED\"\n        );\n        _;\n    }\n\n    modifier hasAnyOfFiveRoles(\n        bytes32 role1,\n        bytes32 role2,\n        bytes32 role3,\n        bytes32 role4,\n        bytes32 role5\n    ) {\n        require(\n            _core.hasRole(role1, msg.sender) ||\n                _core.hasRole(role2, msg.sender) ||\n                _core.hasRole(role3, msg.sender) ||\n                _core.hasRole(role4, msg.sender) ||\n                _core.hasRole(role5, msg.sender),\n            \"UNAUTHORIZED\"\n        );\n        _;\n    }\n\n    modifier hasAnyOfSixRoles(\n        bytes32 role1,\n        bytes32 role2,\n        bytes32 role3,\n        bytes32 role4,\n        bytes32 role5,\n        bytes32 role6\n    ) {\n        require(\n            _core.hasRole(role1, msg.sender) ||\n                _core.hasRole(role2, msg.sender) ||\n                _core.hasRole(role3, msg.sender) ||\n                _core.hasRole(role4, msg.sender) ||\n                _core.hasRole(role5, msg.sender) ||\n                _core.hasRole(role6, msg.sender),\n            \"UNAUTHORIZED\"\n        );\n        _;\n    }\n\n    modifier onlyFei() {\n        require(msg.sender == address(_fei), \"CoreRef: Caller is not FEI\");\n        _;\n    }\n\n    /// @notice sets a new admin role for this contract\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\n        _setContractAdminRole(newContractAdminRole);\n    }\n\n    /// @notice returns whether a given address has the admin role for this contract\n    function isContractAdmin(address _admin) public view override returns (bool) {\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\n    }\n\n    /// @notice set pausable methods to paused\n    function pause() public override onlyGuardianOrGovernor {\n        _pause();\n    }\n\n    /// @notice set pausable methods to unpaused\n    function unpause() public override onlyGuardianOrGovernor {\n        _unpause();\n    }\n\n    /// @notice address of the Core contract referenced\n    /// @return ICore implementation address\n    function core() public view override returns (ICore) {\n        return _core;\n    }\n\n    /// @notice address of the Fei contract referenced by Core\n    /// @return IFei implementation address\n    function fei() public view override returns (IFei) {\n        return _fei;\n    }\n\n    /// @notice address of the Tribe contract referenced by Core\n    /// @return IERC20 implementation address\n    function tribe() public view override returns (IERC20) {\n        return _tribe;\n    }\n\n    /// @notice fei balance of contract\n    /// @return fei amount held\n    function feiBalance() public view override returns (uint256) {\n        return _fei.balanceOf(address(this));\n    }\n\n    /// @notice tribe balance of contract\n    /// @return tribe amount held\n    function tribeBalance() public view override returns (uint256) {\n        return _tribe.balanceOf(address(this));\n    }\n\n    function _burnFeiHeld() internal {\n        _fei.burn(feiBalance());\n    }\n\n    function _mintFei(address to, uint256 amount) internal virtual {\n        if (amount != 0) {\n            _fei.mint(to, amount);\n        }\n    }\n\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\n    }\n}\n"
    },
    "./contracts/refs/ICoreRef.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"../core/ICore.sol\";\n\n/// @title CoreRef interface\n/// @author Fei Protocol\ninterface ICoreRef {\n    // ----------- Events -----------\n\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\n\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\n\n    // ----------- Governor only state changing api -----------\n\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\n\n    // ----------- Governor or Guardian only state changing api -----------\n\n    function pause() external;\n\n    function unpause() external;\n\n    // ----------- Getters -----------\n\n    function core() external view returns (ICore);\n\n    function fei() external view returns (IFei);\n\n    function tribe() external view returns (IERC20);\n\n    function feiBalance() external view returns (uint256);\n\n    function tribeBalance() external view returns (uint256);\n\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\n\n    function isContractAdmin(address admin) external view returns (bool);\n}\n"
    },
    "./contracts/core/ICore.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"./IPermissions.sol\";\nimport \"../fei/IFei.sol\";\n\n/// @title Core Interface\n/// @author Fei Protocol\ninterface ICore is IPermissions {\n    // ----------- Events -----------\n\n    event FeiUpdate(address indexed _fei);\n    event TribeUpdate(address indexed _tribe);\n    event GenesisGroupUpdate(address indexed _genesisGroup);\n    event TribeAllocation(address indexed _to, uint256 _amount);\n    event GenesisPeriodComplete(uint256 _timestamp);\n\n    // ----------- Governor only state changing api -----------\n\n    function init() external;\n\n    // ----------- Governor only state changing api -----------\n\n    function setFei(address token) external;\n\n    function setTribe(address token) external;\n\n    function allocateTribe(address to, uint256 amount) external;\n\n    // ----------- Getters -----------\n\n    function fei() external view returns (IFei);\n\n    function tribe() external view returns (IERC20);\n}\n"
    },
    "./contracts/core/IPermissions.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./IPermissionsRead.sol\";\n\n/// @title Permissions interface\n/// @author Fei Protocol\ninterface IPermissions is IAccessControl, IPermissionsRead {\n    // ----------- Governor only state changing api -----------\n\n    function createRole(bytes32 role, bytes32 adminRole) external;\n\n    function grantMinter(address minter) external;\n\n    function grantBurner(address burner) external;\n\n    function grantPCVController(address pcvController) external;\n\n    function grantGovernor(address governor) external;\n\n    function grantGuardian(address guardian) external;\n\n    function revokeMinter(address minter) external;\n\n    function revokeBurner(address burner) external;\n\n    function revokePCVController(address pcvController) external;\n\n    function revokeGovernor(address governor) external;\n\n    function revokeGuardian(address guardian) external;\n\n    // ----------- Revoker only state changing api -----------\n\n    function revokeOverride(bytes32 role, address account) external;\n\n    // ----------- Getters -----------\n\n    function GUARDIAN_ROLE() external view returns (bytes32);\n\n    function GOVERN_ROLE() external view returns (bytes32);\n\n    function BURNER_ROLE() external view returns (bytes32);\n\n    function MINTER_ROLE() external view returns (bytes32);\n\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\n}\n"
    },
    "./contracts/core/IPermissionsRead.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\n/// @title Permissions Read interface\n/// @author Fei Protocol\ninterface IPermissionsRead {\n    // ----------- Getters -----------\n\n    function isBurner(address _address) external view returns (bool);\n\n    function isMinter(address _address) external view returns (bool);\n\n    function isGovernor(address _address) external view returns (bool);\n\n    function isGuardian(address _address) external view returns (bool);\n\n    function isPCVController(address _address) external view returns (bool);\n}\n"
    },
    "./contracts/fei/IFei.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title FEI stablecoin interface\n/// @author Fei Protocol\ninterface IFei is IERC20 {\n    // ----------- Events -----------\n\n    event Minting(address indexed _to, address indexed _minter, uint256 _amount);\n\n    event Burning(address indexed _to, address indexed _burner, uint256 _amount);\n\n    event IncentiveContractUpdate(address indexed _incentivized, address indexed _incentiveContract);\n\n    // ----------- State changing api -----------\n\n    function burn(uint256 amount) external;\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    // ----------- Burner only state changing api -----------\n\n    function burnFrom(address account, uint256 amount) external;\n\n    // ----------- Minter only state changing api -----------\n\n    function mint(address account, uint256 amount) external;\n\n    // ----------- Governor only state changing api -----------\n\n    function setIncentiveContract(address account, address incentive) external;\n\n    // ----------- Getters -----------\n\n    function incentiveContract(address account) external view returns (address);\n}\n"
    },
    "./contracts/pcv/IPCVDeposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport \"./IPCVDepositBalances.sol\";\n\n/// @title a PCV Deposit interface\n/// @author Fei Protocol\ninterface IPCVDeposit is IPCVDepositBalances {\n    // ----------- Events -----------\n    event Deposit(address indexed _from, uint256 _amount);\n\n    event Withdrawal(address indexed _caller, address indexed _to, uint256 _amount);\n\n    event WithdrawERC20(address indexed _caller, address indexed _token, address indexed _to, uint256 _amount);\n\n    event WithdrawETH(address indexed _caller, address indexed _to, uint256 _amount);\n\n    // ----------- State changing api -----------\n\n    function deposit() external;\n\n    // ----------- PCV Controller only state changing api -----------\n\n    function withdraw(address to, uint256 amount) external;\n\n    function withdrawERC20(\n        address token,\n        address to,\n        uint256 amount\n    ) external;\n\n    function withdrawETH(address payable to, uint256 amount) external;\n}\n"
    },
    "./contracts/pcv/IPCVDepositBalances.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\n/// @title a PCV Deposit interface for only balance getters\n/// @author Fei Protocol\ninterface IPCVDepositBalances {\n    // ----------- Getters -----------\n\n    /// @notice gets the effective balance of \"balanceReportedIn\" token if the deposit were fully withdrawn\n    function balance() external view returns (uint256);\n\n    /// @notice gets the token address in which this deposit returns its balance\n    function balanceReportedIn() external view returns (address);\n\n    /// @notice gets the resistant token balance and protocol owned fei of this deposit\n    function resistantBalanceAndFei() external view returns (uint256, uint256);\n}\n"
    },
    "./contracts/metagov/utils/LiquidityGaugeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.0;\n\nimport \"../../refs/CoreRef.sol\";\nimport \"../../core/TribeRoles.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILiquidityGauge {\n    function deposit(uint256 value) external;\n\n    function withdraw(uint256 value, bool claim_rewards) external;\n\n    function claim_rewards() external;\n\n    function balanceOf(address) external view returns (uint256);\n\n    // curve & balancer use lp_token()\n    function lp_token() external view returns (address);\n\n    // angle use staking_token()\n    function staking_token() external view returns (address);\n\n    function reward_tokens(uint256 i) external view returns (address token);\n\n    function reward_count() external view returns (uint256 nTokens);\n}\n\ninterface ILiquidityGaugeController {\n    function vote_for_gauge_weights(address gauge_addr, uint256 user_weight) external;\n\n    function last_user_vote(address user, address gauge) external view returns (uint256);\n\n    function vote_user_power(address user) external view returns (uint256);\n\n    function gauge_types(address gauge) external view returns (int128);\n}\n\n/// @title Liquidity gauge manager, used to stake tokens in liquidity gauges.\n/// @author Fei Protocol\nabstract contract LiquidityGaugeManager is CoreRef {\n    // Events\n    event GaugeControllerChanged(address indexed oldController, address indexed newController);\n    event GaugeSetForToken(address indexed token, address indexed gauge);\n    event GaugeVote(address indexed gauge, uint256 amount);\n    event GaugeStake(address indexed gauge, uint256 amount);\n    event GaugeUnstake(address indexed gauge, uint256 amount);\n    event GaugeRewardsClaimed(address indexed gauge, address indexed token, uint256 amount);\n\n    /// @notice address of the gauge controller used for voting\n    address public gaugeController;\n\n    /// @notice mapping of token staked to gauge address\n    mapping(address => address) public tokenToGauge;\n\n    constructor(address _gaugeController) {\n        gaugeController = _gaugeController;\n    }\n\n    /// @notice Set the gauge controller used for gauge weight voting\n    /// @param _gaugeController the gauge controller address\n    function setGaugeController(address _gaugeController) public onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN) {\n        require(gaugeController != _gaugeController, \"LiquidityGaugeManager: same controller\");\n\n        address oldController = gaugeController;\n        gaugeController = _gaugeController;\n\n        emit GaugeControllerChanged(oldController, gaugeController);\n    }\n\n    /// @notice returns the token address to be staked in the given gauge\n    function _tokenStakedInGauge(address gaugeAddress) internal view virtual returns (address) {\n        return ILiquidityGauge(gaugeAddress).lp_token();\n    }\n\n    /// @notice Set gauge for a given token.\n    /// @param token the token address to stake in gauge\n    /// @param gaugeAddress the address of the gauge where to stake token\n    function setTokenToGauge(address token, address gaugeAddress)\n        public\n        onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN)\n    {\n        require(_tokenStakedInGauge(gaugeAddress) == token, \"LiquidityGaugeManager: wrong gauge for token\");\n        require(\n            ILiquidityGaugeController(gaugeController).gauge_types(gaugeAddress) >= 0,\n            \"LiquidityGaugeManager: wrong gauge address\"\n        );\n        tokenToGauge[token] = gaugeAddress;\n\n        emit GaugeSetForToken(token, gaugeAddress);\n    }\n\n    /// @notice Vote for a gauge's weight\n    /// @param token the address of the token to vote for\n    /// @param gaugeWeight the weight of gaugeAddress in basis points [0, 10_000]\n    function voteForGaugeWeight(address token, uint256 gaugeWeight)\n        public\n        whenNotPaused\n        onlyTribeRole(TribeRoles.METAGOVERNANCE_VOTE_ADMIN)\n    {\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"LiquidityGaugeManager: token has no gauge configured\");\n        ILiquidityGaugeController(gaugeController).vote_for_gauge_weights(gaugeAddress, gaugeWeight);\n\n        emit GaugeVote(gaugeAddress, gaugeWeight);\n    }\n\n    /// @notice Stake tokens in a gauge\n    /// @param token the address of the token to stake in the gauge\n    /// @param amount the amount of tokens to stake in the gauge\n    function stakeInGauge(address token, uint256 amount)\n        public\n        whenNotPaused\n        onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN)\n    {\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"LiquidityGaugeManager: token has no gauge configured\");\n        IERC20(token).approve(gaugeAddress, amount);\n        ILiquidityGauge(gaugeAddress).deposit(amount);\n\n        emit GaugeStake(gaugeAddress, amount);\n    }\n\n    /// @notice Stake all tokens held in a gauge\n    /// @param token the address of the token to stake in the gauge\n    function stakeAllInGauge(address token) public whenNotPaused onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN) {\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"LiquidityGaugeManager: token has no gauge configured\");\n        uint256 amount = IERC20(token).balanceOf(address(this));\n        IERC20(token).approve(gaugeAddress, amount);\n        ILiquidityGauge(gaugeAddress).deposit(amount);\n\n        emit GaugeStake(gaugeAddress, amount);\n    }\n\n    /// @notice Unstake tokens from a gauge\n    /// @param token the address of the token to unstake from the gauge\n    /// @param amount the amount of tokens to unstake from the gauge\n    function unstakeFromGauge(address token, uint256 amount)\n        public\n        whenNotPaused\n        onlyTribeRole(TribeRoles.METAGOVERNANCE_GAUGE_ADMIN)\n    {\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"LiquidityGaugeManager: token has no gauge configured\");\n        ILiquidityGauge(gaugeAddress).withdraw(amount, false);\n\n        emit GaugeUnstake(gaugeAddress, amount);\n    }\n\n    /// @notice Claim rewards associated to a gauge where this contract stakes\n    /// tokens.\n    function claimGaugeRewards(address token) public whenNotPaused {\n        address gaugeAddress = tokenToGauge[token];\n        require(gaugeAddress != address(0), \"LiquidityGaugeManager: token has no gauge configured\");\n\n        uint256 nTokens = ILiquidityGauge(gaugeAddress).reward_count();\n        address[] memory tokens = new address[](nTokens);\n        uint256[] memory amounts = new uint256[](nTokens);\n\n        for (uint256 i = 0; i < nTokens; i++) {\n            tokens[i] = ILiquidityGauge(gaugeAddress).reward_tokens(i);\n            amounts[i] = IERC20(tokens[i]).balanceOf(address(this));\n        }\n\n        ILiquidityGauge(gaugeAddress).claim_rewards();\n\n        for (uint256 i = 0; i < nTokens; i++) {\n            amounts[i] = IERC20(tokens[i]).balanceOf(address(this)) - amounts[i];\n\n            emit GaugeRewardsClaimed(gaugeAddress, tokens[i], amounts[i]);\n        }\n    }\n}\n"
    },
    "./contracts/core/TribeRoles.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\n/**\n @title Tribe DAO ACL Roles\n @notice Holds a complete list of all roles which can be held by contracts inside Tribe DAO.\n         Roles are broken up into 3 categories:\n         * Major Roles - the most powerful roles in the Tribe DAO which should be carefully managed.\n         * Admin Roles - roles with management capability over critical functionality. Should only be held by automated or optimistic mechanisms\n         * Minor Roles - operational roles. May be held or managed by shorter optimistic timelocks or trusted multisigs.\n */\nlibrary TribeRoles {\n    /*///////////////////////////////////////////////////////////////\n                                 Major Roles\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice the ultimate role of Tribe. Controls all other roles and protocol functionality.\n    bytes32 internal constant GOVERNOR = keccak256(\"GOVERN_ROLE\");\n\n    /// @notice the protector role of Tribe. Admin of pause, veto, revoke, and minor roles\n    bytes32 internal constant GUARDIAN = keccak256(\"GUARDIAN_ROLE\");\n\n    /// @notice the role which can arbitrarily move PCV in any size from any contract\n    bytes32 internal constant PCV_CONTROLLER = keccak256(\"PCV_CONTROLLER_ROLE\");\n\n    /// @notice can mint FEI arbitrarily\n    bytes32 internal constant MINTER = keccak256(\"MINTER_ROLE\");\n\n    /// @notice Manages lower level - Admin and Minor - roles. Able to grant and revoke these\n    bytes32 internal constant ROLE_ADMIN = keccak256(\"ROLE_ADMIN\");\n\n    /*///////////////////////////////////////////////////////////////\n                                 Admin Roles\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice has access to all admin functionality on pods\n    bytes32 internal constant POD_ADMIN = keccak256(\"POD_ADMIN\");\n\n    /// @notice capable of granting and revoking other TribeRoles from having veto power over a pod\n    bytes32 internal constant POD_VETO_ADMIN = keccak256(\"POD_VETO_ADMIN\");\n\n    /// @notice can manage the majority of Tribe protocol parameters\n    bytes32 internal constant PARAMETER_ADMIN = keccak256(\"PARAMETER_ADMIN\");\n\n    /// @notice manages the Collateralization Oracle as well as other protocol oracles.\n    bytes32 internal constant ORACLE_ADMIN = keccak256(\"ORACLE_ADMIN_ROLE\");\n\n    /// @notice manages TribalChief incentives and related functionality.\n    bytes32 internal constant TRIBAL_CHIEF_ADMIN = keccak256(\"TRIBAL_CHIEF_ADMIN_ROLE\");\n\n    /// @notice admin of the Tokemak PCV deposits\n    bytes32 internal constant TOKEMAK_DEPOSIT_ADMIN_ROLE = keccak256(\"TOKEMAK_DEPOSIT_ADMIN_ROLE\");\n\n    /// @notice admin of PCVGuardian\n    bytes32 internal constant PCV_GUARDIAN_ADMIN = keccak256(\"PCV_GUARDIAN_ADMIN_ROLE\");\n\n    /// @notice admin of the Fuse protocol\n    bytes32 internal constant FUSE_ADMIN = keccak256(\"FUSE_ADMIN\");\n\n    /// @notice admin of minting Fei for specific scoped contracts\n    bytes32 internal constant FEI_MINT_ADMIN = keccak256(\"FEI_MINT_ADMIN\");\n\n    /// @notice capable of admin functionality on PCVDeposits\n    bytes32 internal constant PCV_MINOR_PARAM_ROLE = keccak256(\"PCV_MINOR_PARAM_ROLE\");\n\n    /// @notice capable of setting FEI Minters within global rate limits and caps\n    bytes32 internal constant RATE_LIMITED_MINTER_ADMIN = keccak256(\"RATE_LIMITED_MINTER_ADMIN\");\n\n    /// @notice manages meta-governance actions, like voting & delegating.\n    /// Also used to vote for gauge weights & similar liquid governance things.\n    bytes32 internal constant METAGOVERNANCE_VOTE_ADMIN = keccak256(\"METAGOVERNANCE_VOTE_ADMIN\");\n\n    /// @notice allows to manage locking of vote-escrowed tokens, and staking/unstaking\n    /// governance tokens from a pre-defined contract in order to eventually allow voting.\n    /// Examples: ANGLE <> veANGLE, AAVE <> stkAAVE, CVX <> vlCVX, CRV > cvxCRV.\n    bytes32 internal constant METAGOVERNANCE_TOKEN_STAKING = keccak256(\"METAGOVERNANCE_TOKEN_STAKING\");\n\n    /// @notice manages whitelisting of gauges where the protocol's tokens can be staked\n    bytes32 internal constant METAGOVERNANCE_GAUGE_ADMIN = keccak256(\"METAGOVERNANCE_GAUGE_ADMIN\");\n\n    /// @notice capable of performing swaps on Balancer LBP Swapper\n    bytes32 internal constant SWAP_ADMIN_ROLE = keccak256(\"SWAP_ADMIN_ROLE\");\n\n    /// @notice capable of setting properties on Balancer BasePool utility wrapper\n    bytes32 internal constant BALANCER_MANAGER_ADMIN_ROLE = keccak256(\"BALANCER_MANAGER_ADMIN_ROLE\");\n\n    /*///////////////////////////////////////////////////////////////\n                                 Minor Roles\n    //////////////////////////////////////////////////////////////*/\n    bytes32 internal constant POD_METADATA_REGISTER_ROLE = keccak256(\"POD_METADATA_REGISTER_ROLE\");\n\n    /// @notice capable of engaging with Votium for voting incentives.\n    bytes32 internal constant VOTIUM_ADMIN_ROLE = keccak256(\"VOTIUM_ADMIN_ROLE\");\n\n    /// @notice capable of adding an address to multi rate limited\n    bytes32 internal constant ADD_MINTER_ROLE = keccak256(\"ADD_MINTER_ROLE\");\n\n    /// @notice capable of changing PCV Deposit and Global Rate Limited Minter in the PSM\n    bytes32 internal constant PSM_ADMIN_ROLE = keccak256(\"PSM_ADMIN_ROLE\");\n\n    /// @notice capable of moving PCV between safe addresses on the PCVGuardian\n    bytes32 internal constant PCV_SAFE_MOVER_ROLE = keccak256(\"PCV_SAFE_MOVER_ROLE\");\n}\n"
    },
    "./contracts/external/balancer/IBalancerMinter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// See https://etherscan.io/address/0x239e55F427D44C3cc793f49bFB507ebe76638a2b\n\npragma solidity ^0.8.4;\n\ninterface IBalancerMinter {\n    event Minted(address indexed recipient, address gauge, uint256 minted);\n\n    /**\n     * @notice Returns the address of the Balancer Governance Token\n     */\n    function getBalancerToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the Balancer Token Admin contract\n     */\n    function getBalancerTokenAdmin() external view returns (address);\n\n    /**\n     * @notice Returns the address of the Gauge Controller\n     */\n    function getGaugeController() external view returns (address);\n\n    /**\n     * @notice Mint everything which belongs to `msg.sender` and send to them\n     * @param gauge `LiquidityGauge` address to get mintable amount from\n     */\n    function mint(address gauge) external returns (uint256);\n\n    /**\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\n     * @param gauges List of `LiquidityGauge` addresses\n     */\n    function mintMany(address[] calldata gauges) external returns (uint256);\n\n    /**\n     * @notice Mint tokens for `user`\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\n     * @param gauge `LiquidityGauge` address to get mintable amount from\n     * @param user Address to mint to\n     */\n    function mintFor(address gauge, address user) external returns (uint256);\n\n    /**\n     * @notice Mint tokens for `user` across multiple gauges\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\n     * @param gauges List of `LiquidityGauge` addresses\n     * @param user Address to mint to\n     */\n    function mintManyFor(address[] calldata gauges, address user) external returns (uint256);\n\n    /**\n     * @notice The total number of tokens minted for `user` from `gauge`\n     */\n    function minted(address user, address gauge) external view returns (uint256);\n\n    /**\n     * @notice Whether `minter` is approved to mint tokens for `user`\n     */\n    function getMinterApproval(address minter, address user) external view returns (bool);\n\n    /**\n     * @notice Set whether `minter` is approved to mint tokens on your behalf\n     */\n    function setMinterApproval(address minter, bool approval) external;\n\n    /**\n     * @notice Set whether `minter` is approved to mint tokens on behalf of `user`, who has signed a message authorizing\n     * them.\n     */\n    function setMinterApprovalWithSignature(\n        address minter,\n        bool approval,\n        address user,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    // The below functions are near-duplicates of functions available above.\n    // They are included for ABI compatibility with snake_casing as used in vyper contracts.\n    // solhint-disable func-name-mixedcase\n\n    /**\n     * @notice Whether `minter` is approved to mint tokens for `user`\n     */\n    function allowed_to_mint_for(address minter, address user) external view returns (bool);\n\n    /**\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\n     * @dev This function is not recommended as `mintMany()` is more flexible and gas efficient\n     * @param gauges List of `LiquidityGauge` addresses\n     */\n    function mint_many(address[8] calldata gauges) external;\n\n    /**\n     * @notice Mint tokens for `user`\n     * @dev Only possible when `msg.sender` has been approved by `user` to mint on their behalf\n     * @param gauge `LiquidityGauge` address to get mintable amount from\n     * @param user Address to mint to\n     */\n    function mint_for(address gauge, address user) external;\n\n    /**\n     * @notice Toggle whether `minter` is approved to mint tokens for `user`\n     */\n    function toggle_approve_mint(address minter) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}