{{
  "language": "Solidity",
  "sources": {
    "UniswapSwapRouter02ACL.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IV3SwapRouter {\n\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n}\n\n// for cobo safe module v0.3.0\ncontract SwapRouter02AccessControl {\n\n    address public safeAddress;\n    address public safeModule;\n\n    bytes32 private _checkedRole;\n\n    mapping(address => bool) _tokenWhitelist;\n\n    constructor(address _safeAddress, address _safeModule) {\n        require(_safeAddress != address(0), \"invalid safe address\");\n        require(_safeModule!= address(0), \"invalid module address\");\n        safeAddress = _safeAddress;\n        safeModule = _safeModule;\n        // WETH\n        _tokenWhitelist[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = true;\n        // BIT\n        _tokenWhitelist[0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5] = true;\n    }\n\n    modifier onlySelf() {\n        require(address(this) == msg.sender, \"Caller is not inner\");\n        _;\n    }\n\n    modifier onlyModule() {\n        require(safeModule == msg.sender, \"Caller is not the module\");\n        _;\n    }\n\n    function check(bytes32 _role, bytes calldata data) external onlyModule returns (bool) {\n        _checkedRole = _role;\n        (bool success,) = address(this).staticcall(data);\n        return success;\n    }\n\n    fallback() external {}\n\n    // ACL methods\n\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to) external view onlySelf {\n        require(path.length >= 2, \"Invalid Path\");\n        require(_tokenWhitelist[path[0]], \"Token is not allowed\");\n        require(_tokenWhitelist[path[path.length - 1]], \"Token is not allowed\");\n        require(to == safeAddress, \"To address is not allowed\");\n    }\n            \n\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to) external view onlySelf {\n        require(path.length >= 2, \"Invalid Path\");\n        require(_tokenWhitelist[path[0]], \"Token is not allowed\");\n        require(_tokenWhitelist[path[path.length - 1]], \"Token is not allowed\");\n        require(to == safeAddress, \"To address is not allowed\");\n    }\n\n    function exactInputSingle(IV3SwapRouter.ExactInputSingleParams calldata params) external view onlySelf {\n        require(_tokenWhitelist[params.tokenIn], \"Token is not allowed\");\n        require(_tokenWhitelist[params.tokenOut], \"Token is not allowed\");\n        require(params.recipient == safeAddress, \"Recipient is not allowed\");\n    }\n\n    function exactOutputSingle(IV3SwapRouter.ExactOutputSingleParams calldata params) external view onlySelf {\n        require(_tokenWhitelist[params.tokenIn], \"Token is not allowed\");\n        require(_tokenWhitelist[params.tokenOut], \"Token is not allowed\");\n        require(params.recipient == safeAddress, \"Recipient is not allowed\");\n    }\n            \n}\n\n// for cobo safe module v0.4.0\ncontract SwapRouter02WithValueAccessControl {\n\n    address public safeAddress;\n    address public safeModule;\n\n    bytes32 private _checkedRole;\n    uint256 private _checkedValue;\n\n    mapping(address => bool) _tokenWhitelist;\n\n    constructor(address _safeAddress, address _safeModule) {\n        require(_safeAddress != address(0), \"invalid safe address\");\n        require(_safeModule!= address(0), \"invalid module address\");\n        safeAddress = _safeAddress;\n        safeModule = _safeModule;\n        // WETH\n        _tokenWhitelist[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] = true;\n        // BIT\n        _tokenWhitelist[0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5] = true;\n    }\n\n    modifier onlySelf() {\n        require(address(this) == msg.sender, \"Caller is not inner\");\n        _;\n    }\n\n    modifier onlyModule() {\n        require(safeModule == msg.sender, \"Caller is not the module\");\n        _;\n    }\n\n    function check(bytes32 _role, uint256 _value, bytes calldata data) external onlyModule returns (bool) {\n        _checkedRole = _role;\n        _checkedValue = _value;\n        (bool success,) = address(this).staticcall(data);\n        return success;\n    }\n\n    fallback() external {\n        require(_checkedValue == 0, \"invalid value\");\n    }\n\n    // ACL methods\n\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to) external view onlySelf {\n        require(_checkedValue == 0, \"Invalid value\");\n        require(path.length >= 2, \"Invalid Path\");\n        require(_tokenWhitelist[path[0]], \"Token is not allowed\");\n        require(_tokenWhitelist[path[path.length - 1]], \"Token is not allowed\");\n        require(to == safeAddress, \"To address is not allowed\");\n    }\n\n\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to) external view onlySelf {\n        require(_checkedValue == 0, \"Invalid value\");\n        require(path.length >= 2, \"Invalid Path\");\n        require(_tokenWhitelist[path[0]], \"Token is not allowed\");\n        require(_tokenWhitelist[path[path.length - 1]], \"Token is not allowed\");\n        require(to == safeAddress, \"To address is not allowed\");\n    }\n\n    function exactInputSingle(IV3SwapRouter.ExactInputSingleParams calldata params) external view onlySelf {\n        require(_checkedValue == 0, \"Invalid value\");\n        require(_tokenWhitelist[params.tokenIn], \"Token is not allowed\");\n        require(_tokenWhitelist[params.tokenOut], \"Token is not allowed\");\n        require(params.recipient == safeAddress, \"Recipient is not allowed\");\n    }\n\n    function exactOutputSingle(IV3SwapRouter.ExactOutputSingleParams calldata params) external view onlySelf {\n        require(_checkedValue == 0, \"Invalid value\");\n        require(_tokenWhitelist[params.tokenIn], \"Token is not allowed\");\n        require(_tokenWhitelist[params.tokenOut], \"Token is not allowed\");\n        require(params.recipient == safeAddress, \"Recipient is not allowed\");\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "UniswapSwapRouter02ACL.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}