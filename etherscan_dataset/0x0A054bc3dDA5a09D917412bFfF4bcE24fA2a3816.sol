{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@0xdievardump/niftyforge/contracts/INiftyForge721Slim.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport './NFT/IERC721Slim.sol';\n\n/// @title INiftyForge721Slim\n/// @author Simon Fremaux (@dievardump)\ninterface INiftyForge721Slim is IERC721Slim {\n    /// @notice this is the constructor of the contract, called at the time of creation\n    ///         Although it uses what are called upgradeable contracts, this is only to\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\n    /// @param name_ name of the contract (see ERC721)\n    /// @param symbol_ symbol of the contract (see ERC721)\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \"\"\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \"\"\n    /// @param owner_ Address to whom transfer ownership\n    /// @param minter_ The address that has the right to mint on this contract\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \"contract wide royalties\"\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_,\n        string memory baseURI_,\n        address owner_,\n        address minter_,\n        address contractRoyaltiesRecipient,\n        uint256 contractRoyaltiesValue\n    ) external;\n\n    /// @notice getter for the version of the implementation\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\n    /// erc: 00 => ERC721 | 01 => ERC1155\n    /// type: 00 => full | 01 => slim\n    /// version: 00, 01, 02, 03...\n    function version() external view returns (bytes3);\n\n    /// @notice the module/address that can mint on this contract (if address(0) then owner())\n    function minter() external view returns (address);\n\n    /// @notice how many tokens exists\n    function totalSupply() external view returns (uint256);\n\n    /// @notice how many tokens have been minted\n    function minted() external view returns (uint256);\n\n    /// @notice maximum tokens that can be created on this contract\n    function maxSupply() external view returns (uint256);\n\n    /// @notice Mint one token to `to`\n    /// @param to the recipient\n    /// @return tokenId the tokenId minted\n    function mint(address to) external returns (uint256 tokenId);\n\n    /// @notice Mint one token to `to` and transfers to `transferTo`\n    /// @param to the first recipient\n    /// @param transferTo the end recipient\n    /// @return tokenId the tokenId minted\n    function mint(address to, address transferTo)\n        external\n        returns (uint256 tokenId);\n\n    /// @notice Mint `count` tokens to `to`\n    /// @param to array of address of recipients\n    /// @return startId and endId\n    function mintBatch(address to, uint256 count)\n        external\n        returns (uint256 startId, uint256 endId);\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/Modules/INFModuleTokenURI.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface INFModuleTokenURI {\n    function tokenURI(address registry, uint256 tokenId)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface INFModuleWithRoyalties {\n    /// @notice Return royalties (recipient, basisPoint) for tokenId\n    /// @dev Contrary to EIP2981, modules are expected to return basisPoint for second parameters\n    ///      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\n    /// @param registry registry to check id of\n    /// @param tokenId token to check\n    /// @return recipient and basisPoint for this tokenId\n    function royaltyInfo(address registry, uint256 tokenId)\n        external\n        view\n        returns (address recipient, uint256 basisPoint);\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/Modules/NFBaseModuleSlim.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\n/// @title NFBaseModuleSlim\n/// @author Simon Fremaux (@dievardump)\ncontract NFBaseModuleSlim is ERC165 {\n    event NewContractURI(string contractURI);\n\n    string private _contractURI;\n\n    constructor(string memory contractURI_) {\n        _setContractURI(contractURI_);\n    }\n\n    function contractURI() external view virtual returns (string memory) {\n        return _contractURI;\n    }\n\n    function _setContractURI(string memory contractURI_) internal {\n        _contractURI = contractURI_;\n        emit NewContractURI(contractURI_);\n    }\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/NFT/ERC721/IERC721WithRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\n\n/// @dev This is a contract used for royalties on various platforms\n/// @author Simon Fremaux (@dievardump)\ninterface IERC721WithRoyalties is\n    IERC2981Royalties,\n    IRaribleSecondarySales,\n    IFoundationSecondarySales\n{\n\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/NFT/IERC721Slim.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\nimport './ERC721/IERC721WithRoyalties.sol';\n\n/// @title ERC721Slim\n/// @dev This is a \"slim\" version of an ERC721 for NiftyForge\n///      Slim ERC721 do not have all the bells and whistle that the ERC721Full have\n///      Slim is made for series (like PFPs or Generative series)\n///      The mint starts from 1 and ups\n///      Not even the owner can mint directly on this collection.\n///      It has to be the module passed as initialization\n/// @author Simon Fremaux (@dievardump)\ninterface IERC721Slim is IERC721Upgradeable, IERC721WithRoyalties {\n    function baseURI() external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    // receive() external payable {}\n\n    /// @notice This is a generic function that allows this contract's owner to withdraw\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\n    ///         this contract has no payable nor receive function so it should not get any nativ token\n    ///         but this could save some ERC20, 721 or 1155\n    /// @param token the token to withdraw from. address(0) means native chain token\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\n    function withdraw(\n        address token,\n        uint256 amount,\n        uint256 tokenId\n    ) external;\n\n    /// @notice Helper to know if an address can do the action an Editor can\n    /// @param account the address to check\n    function canEdit(address account) external view returns (bool);\n\n    /// @notice Allows to get approved using a permit and transfer in the same call\n    /// @dev this supposes that the permit is for msg.sender\n    /// @param from current owner\n    /// @param to recipient\n    /// @param tokenId the token id\n    /// @param _data optional data to add\n    /// @param deadline the deadline for the permit to be used\n    /// @param signature of permit\n    function safeTransferFromWithPermit(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data,\n        uint256 deadline,\n        bytes memory signature\n    ) external;\n\n    /// @notice Set the base token URI\n    /// @dev only an editor can do that (account or module)\n    /// @param baseURI_ the new base token uri used in tokenURI()\n    function setBaseURI(string memory baseURI_) external;\n\n    /// @notice Allows to change the default royalties recipient\n    /// @dev an editor can call this\n    /// @param recipient new default royalties recipient\n    function setDefaultRoyaltiesRecipient(address recipient) external;\n\n    /// @notice Helper for the owner of the contract to set the new contract URI\n    /// @dev needs to be owner\n    /// @param contractURI_ new contract URI\n    function setContractURI(string memory contractURI_) external;\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address _receiver, uint256 _royaltyAmount);\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/NFT/Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFoundationSecondarySales {\n    /// @notice returns a list of royalties recipients and the amount\n    /// @param tokenId the token Id to check for\n    /// @return all the recipients and their basis points, for tokenId\n    function getFees(uint256 tokenId)\n        external\n        view\n        returns (address payable[] memory, uint256[] memory);\n}\n"
    },
    "@0xdievardump/niftyforge/contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IRaribleSecondarySales {\n    /// @notice returns a list of royalties recipients\n    /// @param tokenId the token Id to check for\n    /// @return all the recipients for tokenId\n    function getFeeRecipients(uint256 tokenId)\n        external\n        view\n        returns (address payable[] memory);\n\n    /// @notice returns a list of royalties amounts\n    /// @param tokenId the token Id to check for\n    /// @return all the amounts for tokenId\n    function getFeeBps(uint256 tokenId)\n        external\n        view\n        returns (uint256[] memory);\n}\n"
    },
    "@0xsequence/sstore2/contracts/SSTORE2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./utils/Bytecode.sol\";\n\n/**\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\n  @author Agustin Aguilar <aa@horizon.io>\n\n  Readme: https://github.com/0xsequence/sstore2#readme\n*/\nlibrary SSTORE2 {\n  error WriteError();\n\n  /**\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\n    @dev The pointer is a contract address with `_data` as code\n    @param _data to be written\n    @return pointer Pointer to the written `_data`\n  */\n  function write(bytes memory _data) internal returns (address pointer) {\n    // Append 00 to _data so contract can't be called\n    // Build init code\n    bytes memory code = Bytecode.creationCodeFor(\n      abi.encodePacked(\n        hex'00',\n        _data\n      )\n    );\n\n    // Deploy contract using create\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\n\n    // Address MUST be non-zero\n    if (pointer == address(0)) revert WriteError();\n  }\n\n  /**\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \n    @dev The function is intended for reading pointers generated by `write`\n    @param _pointer to be read\n    @return data read from `_pointer` contract\n  */\n  function read(address _pointer) internal view returns (bytes memory) {\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\n  }\n\n  /**\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \n    @dev The function is intended for reading pointers generated by `write`\n    @param _pointer to be read\n    @param _start number of bytes to skip\n    @return data read from `_pointer` contract\n  */\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\n  }\n\n  /**\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \n    @dev The function is intended for reading pointers generated by `write`\n    @param _pointer to be read\n    @param _start number of bytes to skip\n    @param _end index before which to end extraction\n    @return data read from `_pointer` contract\n  */\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\n  }\n}\n"
    },
    "@0xsequence/sstore2/contracts/utils/Bytecode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nlibrary Bytecode {\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\n\n  /**\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\n    @param _code The returning value of the resulting `creationCode`\n    @return creationCode (constructor) for new contract\n  */\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\n    /*\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\n      0x01    0x80         0x80        DUP1                size size\n      0x02    0x60         0x600e      PUSH1 14            14 size size\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\n      0x04    0x39         0x39        CODECOPY            size\n      0x05    0x60         0x6000      PUSH1 00            0 size\n      0x06    0xf3         0xf3        RETURN\n      <CODE>\n    */\n\n    return abi.encodePacked(\n      hex\"63\",\n      uint32(_code.length),\n      hex\"80_60_0E_60_00_39_60_00_F3\",\n      _code\n    );\n  }\n\n  /**\n    @notice Returns the size of the code on a given address\n    @param _addr Address that may or may not contain code\n    @return size of the code on the given `_addr`\n  */\n  function codeSize(address _addr) internal view returns (uint256 size) {\n    assembly { size := extcodesize(_addr) }\n  }\n\n  /**\n    @notice Returns the code of a given address\n    @dev It will fail if `_end < _start`\n    @param _addr Address that may or may not contain code\n    @param _start number of bytes of code to skip on read\n    @param _end index before which to end extraction\n    @return oCode read from `_addr` deployed bytecode\n\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\n  */\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\n    uint256 csize = codeSize(_addr);\n    if (csize == 0) return bytes(\"\");\n\n    if (_start > csize) return bytes(\"\");\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \n\n    unchecked {\n      uint256 reqSize = _end - _start;\n      uint256 maxSize = csize - _start;\n\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\n\n      assembly {\n        // allocate output byte array - this could also be done without assembly\n        // by using o_code = new bytes(size)\n        oCode := mload(0x40)\n        // new \"memory end\" including padding\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        // store length in memory\n        mstore(oCode, size)\n        // actually retrieve the code, this needs assembly\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Smartbags.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\nimport '@0xdievardump/niftyforge/contracts/Modules/NFBaseModuleSlim.sol';\nimport '@0xdievardump/niftyforge/contracts/Modules/INFModuleTokenURI.sol';\nimport '@0xdievardump/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol';\nimport '@0xdievardump/niftyforge/contracts/INiftyForge721Slim.sol';\n\nimport '@0xsequence/sstore2/contracts/SSTORE2.sol';\n\nimport './utils/Base64.sol';\nimport './SmartbagsUtils.sol';\n\ninterface IRenderer {\n    function render(\n        address contractAddress,\n        string memory tokenNumber,\n        string memory name,\n        SmartbagsUtils.Color memory color,\n        bytes memory texture,\n        bytes memory fonts\n    ) external pure returns (string memory);\n}\n\ninterface IBagOpener {\n    function open(\n        uint256 tokenId,\n        address owner,\n        address operator,\n        address contractAddress\n    ) external;\n\n    function render(uint256 tokenId, address contractAddress)\n        external\n        view\n        returns (string memory);\n}\n\n/// @title Smartbags\n/// @author @dievardump\ncontract Smartbags is\n    Ownable,\n    NFBaseModuleSlim,\n    INFModuleTokenURI,\n    INFModuleWithRoyalties,\n    ReentrancyGuard\n{\n    using Strings for uint256;\n    using SafeERC20 for IERC20;\n\n    event BagsOpened(address operator, uint256[] tokenIds);\n\n    error ShopIsClosed();\n    error NoCanDo();\n    error AlreadyMinted();\n    error OutOfJpegs();\n\n    error TooEarly();\n    error AlreadyOpened();\n\n    error ContractLocked();\n    error NotAuthorized();\n\n    error NotMinted();\n    error OnlyContracts();\n\n    error OnlyAsh();\n\n    error WrongValue(uint256 expected, uint256 received);\n\n    struct Payment {\n        address token;\n        uint96 unitPrice;\n    }\n\n    /// @notice the contract to open the bags\n    address public bagOpener;\n\n    /// @notice if public can start  minting bags\n    bool public collectActive;\n\n    /// @notice contains pointers to where the files are saved\n    /// 0 => first half of texture\n    /// 1 => second half of texture\n    /// 2 => fonts\n    // Given my thoughts on saving files like this on-chain, you can consider this\n    // as me officially selling my Soul to Nahiko.\n    mapping(uint256 => address) public files;\n\n    /// @notice if updates to this contract (renderer etc...) are locked or not.\n    bool public locked;\n\n    /// @notice contract on which nfts are created\n    address public nftContract;\n\n    /// @notice if the bag has been opened.\n    mapping(uint256 => bool) public openedBags;\n\n    /// @notice the payment token.\n    Payment public payment;\n\n    /// @notice allows to update the base renderer (just for the image)\n    address public renderer;\n\n    /// @notice token contract for each NFT\n    mapping(uint256 => address) public tokenToContract;\n\n    /// @notice token id for each contract minted\n    mapping(address => uint256) public contractToToken;\n\n    constructor(\n        address renderer_,\n        string memory moduleURI,\n        Payment memory payment_,\n        bool activateCollect,\n        address owner_\n    ) NFBaseModuleSlim(moduleURI) {\n        renderer = renderer_;\n\n        payment = payment_;\n\n        collectActive = activateCollect;\n\n        if (owner_ != address(0)) {\n            transferOwnership(owner_);\n        }\n    }\n\n    ////////////////////////////////////////////////////\n    ///// Module                                      //\n    ////////////////////////////////////////////////////\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(INFModuleTokenURI).interfaceId ||\n            interfaceId == type(INFModuleWithRoyalties).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc\tINFModuleTokenURI\n    function tokenURI(address, uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        address contractAddress = tokenToContract[tokenId];\n        if (address(0) == contractAddress) revert NotMinted();\n\n        // if bag is opened, rendering not managed here.\n        return\n            openedBags[tokenId]\n                ? IBagOpener(bagOpener).render(tokenId, contractAddress)\n                : _render(tokenId, contractAddress);\n    }\n\n    /// @inheritdoc\tINFModuleWithRoyalties\n    function royaltyInfo(address, uint256)\n        public\n        view\n        override\n        returns (address receiver, uint256 basisPoint)\n    {\n        return (owner(), 420);\n    }\n\n    ////////////////////////////////////////////////////\n    ///// Getters / Views                             //\n    ////////////////////////////////////////////////////\n\n    /// @notice returns the json for the bag with some metadata\n    /// @param contractAddress the contract address\n    /// @param tokenNumber the token number (4 characters string)\n    /// @return uri the data uri for the nft\n    /// @return name the name of the contract\n    /// @return color the color of the bag\n    /// @return minted if the contract has already been minted or not\n    function renderWithData(address contractAddress, string memory tokenNumber)\n        public\n        view\n        returns (\n            string memory uri,\n            string memory name,\n            SmartbagsUtils.Color memory color,\n            bool minted\n        )\n    {\n        // if the contract is minted\n        minted = isMinted(contractAddress);\n\n        // get color from contract address\n        color = SmartbagsUtils.getColor(contractAddress);\n\n        // get contract name\n        name = SmartbagsUtils.getName(contractAddress);\n\n        // and the json.\n        uri = IRenderer(renderer).render(\n            contractAddress,\n            tokenNumber,\n            name,\n            color,\n            abi.encodePacked(SSTORE2.read(files[0]), SSTORE2.read(files[1])),\n            SSTORE2.read(files[2])\n        );\n    }\n\n    /// @notice Helper to know if a contract has been minted\n    /// @return if the contract has been minted\n    function isMinted(address contractAddress) public view returns (bool) {\n        // some contracts are sacred.\n        if (\n            contractAddress ==\n            address(0x21BEf5412E69cDcDA1B258c0E7C0b9db589083C3)\n        ) {\n            return true;\n        }\n\n        // we are forced to use both values because we start tokenIds at 0\n        // therefore contractToToken will always return 0 for unminted contracts\n        // I really feel like I can't say no to Nahiko.\n        uint256 tokenId = contractToToken[contractAddress];\n        address tokenContract = tokenToContract[tokenId];\n\n        return tokenContract == contractAddress;\n    }\n\n    ////////////////////////////////////////////////////\n    ///// Collectors                                  //\n    ////////////////////////////////////////////////////\n\n    /// @notice allows to collect a smartbag\n    /// @param contractAddress the smart contract address to bag\n    function collect(address contractAddress) public nonReentrant {\n        if (!collectActive) {\n            revert ShopIsClosed();\n        }\n\n        _proceedPayment(1);\n        _collect(contractAddress);\n    }\n\n    /// @notice allows to collect several smartbags\n    /// @param contractAddresses the smart contract addresses to bag\n    function collectBatch(address[] calldata contractAddresses)\n        public\n        nonReentrant\n    {\n        if (!collectActive) {\n            revert ShopIsClosed();\n        }\n\n        uint256 length = contractAddresses.length;\n        _proceedPayment(length);\n        for (uint256 i; i < length; i++) {\n            _collect(contractAddresses[i]);\n        }\n    }\n\n    /// @notice Allows holders to open their bag(s)\n    /// @param tokenIds the list of token ids to open\n    function openBags(uint256[] calldata tokenIds) external {\n        address bagOpener_ = bagOpener;\n\n        if (address(0) == bagOpener_) {\n            revert TooEarly();\n        }\n\n        uint256 tokenId;\n        address ownerOf;\n        uint256 length = tokenIds.length;\n        address nftContract_ = nftContract;\n        for (uint256 i; i < length; i++) {\n            tokenId = tokenIds[i];\n\n            if (openedBags[tokenId]) {\n                revert AlreadyOpened();\n            }\n\n            // owner or approvedForAll only\n            ownerOf = IERC721(nftContract_).ownerOf(tokenId);\n            if (\n                msg.sender != ownerOf &&\n                !IERC721(nftContract_).isApprovedForAll(ownerOf, msg.sender)\n            ) {\n                revert NotAuthorized();\n            }\n\n            openedBags[tokenId] = true;\n\n            IBagOpener(bagOpener_).open(\n                tokenId,\n                ownerOf,\n                msg.sender,\n                tokenToContract[tokenId]\n            );\n        }\n\n        emit BagsOpened(msg.sender, tokenIds);\n    }\n\n    ////////////////////////////////////////////////////\n    ///// Contract Owner                              //\n    ////////////////////////////////////////////////////\n\n    /// @notice withdraws \"token\", just in case.\n    function withdraw(address token) external onlyOwner {\n        IERC20(token).safeTransfer(\n            msg.sender,\n            IERC20(token).balanceOf(address(this))\n        );\n    }\n\n    /// @notice locks changes in contract uri, renderer etc...\n    function lock() external onlyOwner {\n        locked = true;\n    }\n\n    /// @notice sets contract uri\n    /// @param newURI the new uri\n    function setContractURI(string memory newURI) external onlyOwner {\n        if (locked) revert ContractLocked();\n        _setContractURI(newURI);\n    }\n\n    /// @notice Allows owner to change the renderer (in case there is some error in the current)\n    ///         only works if the contract hasn't been locked for changes\n    /// @param newRenderer the new renderer address\n    function setRenderer(address newRenderer) external onlyOwner {\n        if (locked) revert ContractLocked();\n        renderer = newRenderer;\n    }\n\n    /// @notice Allows owner to set the nftContract\n    /// @param newNFTContract the new renderer address\n    function setNFTContract(address newNFTContract) external onlyOwner {\n        if (locked) revert ContractLocked();\n        nftContract = newNFTContract;\n    }\n\n    /// @notice Allows owner to set the payment method\n    /// @param newPayment the new payment method\n    function setPayment(Payment calldata newPayment) external onlyOwner {\n        if (locked) revert ContractLocked();\n        payment = newPayment;\n    }\n\n    /// @notice Allows owner to set the payment method\n    /// @param bagOpener_ the bag opener contract\n    function allowOpening(address bagOpener_) external onlyOwner {\n        if (locked) revert ContractLocked();\n        bagOpener = bagOpener_;\n    }\n\n    /// @notice Allows owner to open / close minting\n    /// @param activateCollect the new state\n    function setCollectActive(bool activateCollect) external onlyOwner {\n        collectActive = activateCollect;\n    }\n\n    /// @notice saves a file\n    function saveFile(uint256 index, string calldata fileContent)\n        external\n        onlyOwner\n    {\n        files[index] = SSTORE2.write(bytes(fileContent));\n    }\n\n    ////////////////////////////////////////////////////\n    ///// Internal                                    //\n    ////////////////////////////////////////////////////\n\n    /// @dev returns the json for the bag\n    /// @param tokenId the token id for this bag\n    /// @param contractAddress the contract address\n    /// @return uri the data uri for the nft\n    function _render(uint256 tokenId, address contractAddress)\n        internal\n        view\n        returns (string memory uri)\n    {\n        (uri, , , ) = renderWithData(\n            contractAddress,\n            SmartbagsUtils.tokenNumber(tokenId)\n        );\n    }\n\n    /// @dev proceeds the payment for `pieces` items\n    function _proceedPayment(uint256 pieces) internal {\n        Payment memory _payment = payment;\n        if (address(0) == _payment.token) {\n            if (msg.value != uint256(_payment.unitPrice) * pieces) {\n                revert WrongValue({\n                    expected: _payment.unitPrice,\n                    received: msg.value\n                });\n            }\n        } else {\n            if (msg.value != 0) revert OnlyAsh();\n            IERC20(_payment.token).safeTransferFrom(\n                msg.sender,\n                owner(),\n                uint256(_payment.unitPrice) * pieces\n            );\n        }\n    }\n\n    function _collect(address contractAddress) internal {\n        if (\n            contractAddress ==\n            address(0x21BEf5412E69cDcDA1B258c0E7C0b9db589083C3)\n        ) {\n            revert NoCanDo();\n        }\n        if (!Address.isContract(contractAddress)) revert OnlyContracts();\n        if (isMinted(contractAddress)) revert AlreadyMinted();\n\n        _mint(contractAddress);\n    }\n\n    function _mint(address contractAddress) internal {\n        uint256 tokenId = INiftyForge721Slim(nftContract).mint(msg.sender);\n        tokenToContract[tokenId] = contractAddress;\n        contractToToken[contractAddress] = tokenId;\n    }\n}\n"
    },
    "contracts/SmartbagsUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\nlibrary SmartbagsUtils {\n    using Strings for uint256;\n\n    struct Color {\n        string name;\n        string color;\n    }\n\n    function getColor(address contractAddress)\n        internal\n        pure\n        returns (Color memory)\n    {\n        uint256 colorSeed = uint256(uint160(contractAddress));\n\n        return\n            [\n                Color({color: '#fc6f03', name: 'orange'}),\n                Color({color: '#ff0000', name: 'red'}),\n                Color({color: '#ffb700', name: 'gold'}),\n                Color({color: '#ffe600', name: 'yellow'}),\n                Color({color: '#fbff00', name: 'light green'}),\n                Color({color: '#a6ff00', name: 'green'}),\n                Color({color: '#dee060', name: 'pastel green'}),\n                Color({color: '#f28b85', name: 'salmon'}),\n                Color({color: '#48b007', name: 'forest green'}),\n                Color({color: '#00ff55', name: 'turquoise green'}),\n                Color({color: '#b4ff05', name: 'flashy Green'}),\n                Color({color: '#61c984', name: 'alguae'}),\n                Color({color: '#00ff99', name: 'turquoise'}),\n                Color({color: '#00ffc3', name: 'flashy blue'}),\n                Color({color: '#00fff2', name: 'light blue'}),\n                Color({color: '#009c94', name: 'aqua blue'}),\n                Color({color: '#0363ff', name: 'deep blue'}),\n                Color({color: '#3636c2', name: 'blurple'}),\n                Color({color: '#5d00ff', name: 'purple'}),\n                Color({color: '#ff4ff9', name: 'pink'}),\n                Color({color: '#fc0065', name: 'redPink'}),\n                Color({color: '#ffffff', name: 'white'}),\n                Color({color: '#c95136', name: 'copper'}),\n                Color({color: '#c5c8c9', name: 'silver'})\n            ][colorSeed % 24];\n    }\n\n    function getName(address contractAddress)\n        internal\n        view\n        returns (string memory)\n    {\n        // get name from contract if possible\n        try IERC721Metadata(contractAddress).name() returns (\n            string memory name\n        ) {\n            // uppercase the name, and remove any non AZ09 characters\n            bytes memory strBytes = bytes(name);\n            bytes memory sanitized = new bytes(strBytes.length);\n            uint8 charCode;\n            bytes1 char;\n            for (uint256 i; i < strBytes.length; i++) {\n                char = strBytes[i];\n                charCode = uint8(char);\n\n                if (\n                    // ! \" # $ %\n                    (charCode >= 33 && charCode <= 37) ||\n                    // ' ( ) * + - . /\n                    (charCode >= 39 && charCode <= 47) ||\n                    // 0-9\n                    (charCode >= 48 && charCode <= 57) ||\n                    // A - Z\n                    (charCode >= 65 && charCode <= 90)\n                ) {\n                    sanitized[i] = char;\n                } else if (charCode >= 97 && charCode <= 122) {\n                    // if a-z, use uppercase\n                    sanitized[i] = bytes1(charCode - 32);\n                } else {\n                    // for all others, use a space\n                    sanitized[i] = 0x32;\n                }\n            }\n\n            if (sanitized.length > 0) {\n                return string(sanitized);\n            }\n        } catch Error(string memory) {} catch (bytes memory) {}\n        return uint256(uint160(contractAddress)).toHexString(20);\n    }\n\n    function tokenNumber(uint256 tokenId)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory tokenStr = bytes(tokenId.toString());\n        bytes memory fixedTokenStr = new bytes(4);\n        fixedTokenStr[0] = 0x30;\n        fixedTokenStr[1] = 0x30;\n        fixedTokenStr[2] = 0x30;\n        fixedTokenStr[3] = 0x30;\n\n        uint256 it;\n        for (uint256 i = tokenStr.length; i > 0; i--) {\n            fixedTokenStr[3 - it] = tokenStr[i - 1];\n            it++;\n        }\n\n        return string(fixedTokenStr);\n    }\n\n    function renderContract(address _addr, uint256 length)\n        internal\n        view\n        returns (bytes memory)\n    {\n        // get contract full size\n        uint256 maxSize;\n        assembly {\n            maxSize := extcodesize(_addr)\n        }\n\n        uint256 offset = maxSize > length\n            ? (maxSize - length) % uint256(uint160(_addr))\n            : 0;\n\n        bytes memory code = getContractBytecode(\n            _addr,\n            offset,\n            maxSize < length ? maxSize : length\n        );\n\n        if (maxSize < length) {\n            uint256 toFill = length - maxSize;\n            uint256 length = toFill / 2;\n\n            bytes memory filler = new bytes(length);\n            for (uint256 i; i < length; i++) {\n                filler[i] = 0xff;\n            }\n\n            return abi.encodePacked(filler, code, filler);\n        }\n\n        return code;\n    }\n\n    function getContractBytecode(\n        address _addr,\n        uint256 start,\n        uint256 length\n    ) internal view returns (bytes memory o_code) {\n        assembly {\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            o_code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(\n                0x40,\n                add(o_code, and(add(add(length, 0x20), 0x1f), not(0x1f)))\n            )\n            // store length in memory\n            mstore(o_code, length)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(_addr, add(o_code, 0x20), start, length)\n        }\n    }\n}\n"
    },
    "contracts/utils/Base64.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\n\n/// modified to add some utility functions\nlibrary Base64 {\n    string internal constant TABLE =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n\n    function toB64JSON(bytes memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    encode(toEncode)\n                )\n            );\n    }\n\n    function toB64JSON(string memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return toB64JSON(bytes(toEncode));\n    }\n\n    function toB64SVG(bytes memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked('data:image/svg+xml;base64,', encode(toEncode))\n            );\n    }\n\n    function toB64SVG(string memory toEncode)\n        internal\n        pure\n        returns (string memory)\n    {\n        return toB64SVG(bytes(toEncode));\n    }\n}\n"
    }
  }
}}