{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Madworldnft.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"./extensions/Signature.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libs/Address.sol\";\nimport \"./libs/SafeERC20.sol\";\n\ncontract NftStaking is\n    IERC721Receiver,\n    AccessControlUpgradeable,\n    Signature,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n    uint256 public constant LOWER_TIER = 0;\n    uint256 public constant HIGHER_TIER = 1;\n\n    struct NftCollection {\n        IERC721 nft;\n        IERC721 nftBoost;\n    }\n\n    struct Pool {\n        NftCollection nftCollection;\n        uint256 boostAPR;\n        IERC20 stakingToken;\n        IERC20 rewardToken;\n        string name;\n        uint256 totalStaked;\n        uint256 totalPoolSize;\n        ApyStruct[] apyStruct;\n        uint256 unstakeFee;\n        uint256 unstakeFeeDuration;\n        address feeReceiverAddress;\n        uint256 startJoinTime;\n        uint256 endJoinTime;\n    }\n\n    struct AdditionalPoolInfo {\n        uint256 totalHigherTierCardsPerUser;\n        uint256 totalLowerTierCardsPerUser;\n        mapping(address => uint256) userBoostApr;\n        mapping(address => uint256) userLastStakeTime;\n        mapping(address => uint256[]) higherTierCardsStaked;\n        mapping(address => uint256[]) lowerTierCardsStaked;\n        mapping(address => uint256) boostCardsStaked;\n        mapping(address => uint256) tokensStaked;\n        mapping(address => uint256) lastUserClaim;\n        mapping(address => uint256) userApy;\n        mapping(uint256 => uint256) higherTierCards;\n        mapping(uint256 => uint256) lowerTierCards;\n    }\n\n    uint256 public poolLength;\n    mapping(uint256 => Pool) public pools;\n    mapping(uint256 => AdditionalPoolInfo) public additionalPoolInfos;\n\n    struct ApyStruct {\n        uint256 amount;\n        uint256 apy;\n    }\n\n    event AddedPool(uint256 poolId, string name, uint256 uid);\n\n    event UpdatedPool(uint256 poolId, string name);\n\n    event SetSigner(address signer);\n\n    event SetApyStruct(ApyStruct[] apyStruct);\n\n    event Staked(\n        address userAddress,\n        uint256 poolId,\n        uint256[] ids,\n        uint256[] prices,\n        uint256 tokenAmount\n    );\n    event BoostStaked(\n        address userAddress,\n        uint256 poolId,\n        uint256 ids,\n        uint256 prices,\n        uint256 boostId,\n        uint256 tokenAmount\n    );\n    event Withdrawn(\n        address userAddress,\n        uint256 poolId,\n        uint256[] ids,\n        uint256[] prices,\n        uint256 tokenAmount,\n        uint256 fee\n    );\n    event BoostWithdrawn(uint256 poolId, uint256 boostId);\n    event RewardClaimed(\n        address userAddress,\n        uint256 poolId,\n        uint256 requiredRewardAmount,\n        uint256 rewardAmount\n    );\n\n    modifier updateState(uint256 _poolId, address _userAddress) {\n        _updateUser(_poolId, _userAddress);\n        _;\n    }\n\n    /**\n     * @notice Validate pool by pool ID\n     * @param _poolId id of the pool\n     */\n    modifier validatePoolById(uint256 _poolId) {\n        require(_poolId < poolLength, \"MADworld: Pool are not exist\");\n        _;\n    }\n\n    function __Madworld_init() external initializer {\n        __AccessControl_init();\n\n        _setRoleAdmin(ADMIN, ADMIN);\n        _setupRole(ADMIN, msg.sender);\n    }\n\n    function getUserCardsStaked(uint256 _poolId, address _userAddress)\n        external\n        view\n        validatePoolById(_poolId)\n        returns (\n            uint256[] memory,\n            uint256[] memory,\n            uint256\n        )\n    {\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n        return (\n            additionalPoolInfo.higherTierCardsStaked[_userAddress],\n            additionalPoolInfo.lowerTierCardsStaked[_userAddress],\n            additionalPoolInfo.boostCardsStaked[_userAddress]\n        );\n    }\n\n    function getPoolData(uint256 _poolId)\n        external\n        view\n        validatePoolById(_poolId)\n        returns (\n            uint256 _totalStaked,\n            uint256 _poolSize,\n            uint256 _remaining,\n            uint256 _roiMin,\n            uint256 _roiMax\n        )\n    {\n        Pool storage poolInfo = pools[_poolId];\n\n        _totalStaked = poolInfo.totalStaked;\n        _poolSize = poolInfo.totalPoolSize;\n        _remaining = poolInfo.totalPoolSize - poolInfo.totalStaked;\n\n        if (poolInfo.apyStruct.length > 0) {\n            _roiMin = poolInfo.apyStruct[0].apy;\n            _roiMax = poolInfo.apyStruct[poolInfo.apyStruct.length - 1].apy;\n        }\n    }\n\n    function getPoolData2(uint256 _poolId, address _userAddress)\n        external\n        view\n        validatePoolById(_poolId)\n        returns (\n            uint256 _earnedReward,\n            uint256 _roi,\n            uint256 _stakedNft,\n            uint256 _userStakedTokens\n        )\n    {\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        _roi = getTotalApy(_poolId, _userAddress);\n        _stakedNft =\n            additionalPoolInfo.higherTierCardsStaked[_userAddress].length +\n            additionalPoolInfo.lowerTierCardsStaked[_userAddress].length;\n        if (additionalPoolInfo.boostCardsStaked[_userAddress] > 0) {\n            _stakedNft += 1;\n        }\n        _userStakedTokens = additionalPoolInfo.tokensStaked[_userAddress];\n        _earnedReward = getReward(_poolId, _userAddress);\n    }\n\n    function updateUsers(uint256 _poolId, address[] calldata _userAddresses)\n        external\n        nonReentrant\n    {\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\n            _updateUser(_poolId, _userAddresses[i]);\n        }\n    }\n\n    function update(uint256 _poolId) external nonReentrant {\n        _updateUser(_poolId, msg.sender);\n    }\n\n    function _updateUser(uint256 _poolId, address _userAddress)\n        private\n        validatePoolById(_poolId)\n    {\n        require(\n            _userAddress != address(0),\n            \"MADworld: _userAddress can not be zero address\"\n        );\n        Pool storage poolInfo = pools[_poolId];\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        uint256 reward = getReward(_poolId, _userAddress);\n        uint256 balance = poolInfo.rewardToken.balanceOf(address(this));\n\n        uint256 userReward = reward < balance ? reward : balance;\n        additionalPoolInfo.lastUserClaim[_userAddress] = block.timestamp;\n\n        if (userReward > 0) {\n            poolInfo.rewardToken.safeTransfer(_userAddress, userReward);\n            emit RewardClaimed(_userAddress, _poolId, reward, userReward);\n        }\n    }\n\n    function addPool(\n        string memory _name,\n        uint256 _uid,\n        ApyStruct[] memory listApy,\n        IERC721[2] memory _nft,\n        uint256 _boostAPR,\n        IERC20 _stakingToken,\n        IERC20 _rewardToken,\n        uint256 _totalPoolSize,\n        uint256 _totalHigherTierCardsPerUser,\n        uint256 _totalLowerTierCardsPerUser,\n        uint256 _startJoinTime,\n        uint256 _endJoinTime\n    ) external onlyRole(ADMIN) {\n        require(\n            _endJoinTime >= block.timestamp && _endJoinTime > _startJoinTime,\n            \"MADworld: invalid end join time\"\n        );\n\n        require(\n            address(_nft[0]) != address(0),\n            \"MADworld: nft can not be zero address\"\n        );\n\n        require(\n            address(_stakingToken) != address(0),\n            \"MADworld: _stakingToken can not be zero address\"\n        );\n\n        require(\n            address(_rewardToken) != address(0),\n            \"MADworld: _rewardToken can not be zero address\"\n        );\n\n        Pool storage newPool = pools[poolLength++];\n        AdditionalPoolInfo storage addidtionalNewPoolInfo = additionalPoolInfos[\n            poolLength - 1\n        ];\n\n        {\n            newPool.name = _name;\n            newPool.nftCollection = NftCollection(_nft[0], _nft[1]);\n            newPool.boostAPR = _boostAPR;\n            newPool.stakingToken = _stakingToken;\n            newPool.rewardToken = _rewardToken;\n\n            newPool.totalPoolSize = _totalPoolSize;\n\n            newPool.unstakeFeeDuration = 7 days;\n            newPool.unstakeFee = 0.02e18; //2%\n            newPool.feeReceiverAddress = msg.sender; // need to be changed\n\n            addidtionalNewPoolInfo\n                .totalHigherTierCardsPerUser = _totalHigherTierCardsPerUser;\n            addidtionalNewPoolInfo\n                .totalLowerTierCardsPerUser = _totalLowerTierCardsPerUser;\n\n            newPool.startJoinTime = _startJoinTime;\n            newPool.endJoinTime = _endJoinTime;\n        }\n        _setApyStruct(poolLength - 1, listApy);\n\n        uint256 uid = _uid;\n        emit AddedPool(poolLength - 1, newPool.name, uid);\n    }\n\n    function updatePool(uint256 _poolId, string memory _name)\n        external\n        onlyRole(ADMIN)\n        validatePoolById(_poolId)\n    {\n        Pool storage pool = pools[_poolId];\n        pool.name = _name;\n\n        emit UpdatedPool(_poolId, _name);\n    }\n\n    function getReward(uint256 _poolId, address _userAddress)\n        public\n        view\n        validatePoolById(_poolId)\n        returns (uint256)\n    {\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        return\n            ((block.timestamp -\n                additionalPoolInfo.lastUserClaim[_userAddress]) *\n                (additionalPoolInfo.tokensStaked[_userAddress] *\n                    getTotalApy(_poolId, _userAddress))) /\n            1e18 /\n            365 days;\n    }\n\n    struct StakeCardPayload {\n        address _user;\n        uint256[] _ids;\n        uint256[] _prices;\n        uint256[] _tiers; // 0 - lower, 1 - higher\n        bytes _signature;\n    }\n\n    struct StakeCardWithBoostPayload {\n        address _user;\n        uint256 _ids;\n        uint256 _prices;\n        uint256 _tiers; // 0 - lower, 1 - higher\n        uint256 _boostId;\n        bytes _signature;\n    }\n\n    function stakeCardsWithBoost(\n        uint256 _poolId,\n        StakeCardWithBoostPayload memory _payload\n    )\n        external\n        nonReentrant\n        validatePoolById(_poolId)\n        updateState(_poolId, msg.sender)\n    {\n        require(\n            _payload._user != address(0),\n            \"MADworld: _payload._user can not be zero address\"\n        );\n\n        require(msg.sender == _payload._user, \"MADworld: invalid user\");\n\n        Pool storage poolInfo = pools[_poolId];\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        require(\n            additionalPoolInfo.userBoostApr[msg.sender] == 0 &&\n                additionalPoolInfo.boostCardsStaked[msg.sender] == 0,\n            \"MADworld: already staked boost nft\"\n        );\n\n        require(\n            block.timestamp >= poolInfo.startJoinTime,\n            \"MADworld: pool is not started yet\"\n        );\n\n        require(\n            block.timestamp <= poolInfo.endJoinTime,\n            \"MADworld: pool is already closed\"\n        );\n\n        bytes32 msgHash = getBoostCardsMessageHash(\n            _poolId,\n            _payload._user,\n            _payload._ids,\n            _payload._prices,\n            _payload._tiers,\n            _payload._boostId\n        );\n\n        require(\n            _verifyStakeCardsSignature(msgHash, _payload._signature),\n            \"MADworld: invalid signature\"\n        );\n\n        if (_payload._tiers == HIGHER_TIER) {\n            require(\n                additionalPoolInfo.higherTierCardsStaked[msg.sender].length <\n                    additionalPoolInfo.totalHigherTierCardsPerUser,\n                \"MADworld: exceed higher tier staking limit\"\n            );\n            additionalPoolInfo.higherTierCardsStaked[msg.sender].push(\n                _payload._ids\n            );\n            additionalPoolInfo.higherTierCards[_payload._ids] = _payload\n                ._prices;\n        } else if (_payload._tiers == LOWER_TIER) {\n            require(\n                additionalPoolInfo.lowerTierCardsStaked[msg.sender].length <\n                    additionalPoolInfo.totalLowerTierCardsPerUser,\n                \"MADworld: exceed lower tier staking limit\"\n            );\n            additionalPoolInfo.lowerTierCardsStaked[msg.sender].push(\n                _payload._ids\n            );\n            additionalPoolInfo.lowerTierCards[_payload._ids] = _payload._prices;\n        } else {\n            revert(\"MADworld: invalid tier\");\n        }\n\n        uint256 totalPrice = _payload._prices;\n\n        poolInfo.nftCollection.nft.safeTransferFrom(\n            msg.sender,\n            address(this),\n            _payload._ids,\n            \"0x\"\n        );\n\n        additionalPoolInfo.boostCardsStaked[msg.sender] = _payload._boostId;\n\n        poolInfo.nftCollection.nftBoost.safeTransferFrom(\n            msg.sender,\n            address(this),\n            _payload._boostId,\n            \"0x\"\n        );\n\n        poolInfo.stakingToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            totalPrice\n        );\n\n        additionalPoolInfo.tokensStaked[msg.sender] += totalPrice;\n        poolInfo.totalStaked += totalPrice;\n\n        require(\n            additionalPoolInfo.tokensStaked[msg.sender] >=\n                poolInfo.apyStruct[0].amount,\n            \"MADworld: total stake less than minimum\"\n        );\n        require(\n            poolInfo.totalStaked <= poolInfo.totalPoolSize,\n            \"MADworld: exceed pool limit\"\n        );\n\n        additionalPoolInfo.userBoostApr[msg.sender] = poolInfo.boostAPR;\n        additionalPoolInfo.userLastStakeTime[msg.sender] = block.timestamp;\n\n        emit BoostStaked(\n            msg.sender,\n            _poolId,\n            _payload._ids,\n            _payload._prices,\n            _payload._boostId,\n            totalPrice\n        );\n    }\n\n    function stakeCards(uint256 _poolId, StakeCardPayload memory _payload)\n        external\n        nonReentrant\n        validatePoolById(_poolId)\n        updateState(_poolId, msg.sender)\n    {\n        require(\n            _payload._user != address(0),\n            \"MADworld: _payload._user can not be zero address\"\n        );\n\n        require(msg.sender == _payload._user, \"MADworld: invalid user\");\n\n        Pool storage poolInfo = pools[_poolId];\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        require(\n            block.timestamp >= poolInfo.startJoinTime,\n            \"MADworld: pool is not started yet\"\n        );\n\n        require(\n            block.timestamp <= poolInfo.endJoinTime,\n            \"MADworld: pool is already closed\"\n        );\n\n        bytes32 msgHash = getMessageHash(\n            _poolId,\n            _payload._user,\n            _payload._ids,\n            _payload._prices,\n            _payload._tiers\n        );\n\n        require(\n            _verifyStakeCardsSignature(msgHash, _payload._signature),\n            \"MADworld: invalid signature\"\n        );\n\n        uint256 totalPrice;\n\n        for (uint256 i = 0; i < _payload._ids.length; i++) {\n            if (_payload._tiers[i] == HIGHER_TIER) {\n                require(\n                    additionalPoolInfo\n                        .higherTierCardsStaked[msg.sender]\n                        .length <\n                        additionalPoolInfo.totalHigherTierCardsPerUser,\n                    \"MADworld: exceed higher tier staking limit\"\n                );\n                additionalPoolInfo.higherTierCardsStaked[msg.sender].push(\n                    _payload._ids[i]\n                );\n                additionalPoolInfo.higherTierCards[_payload._ids[i]] = _payload\n                    ._prices[i];\n            } else if (_payload._tiers[i] == LOWER_TIER) {\n                require(\n                    additionalPoolInfo.lowerTierCardsStaked[msg.sender].length <\n                        additionalPoolInfo.totalLowerTierCardsPerUser,\n                    \"MADworld: exceed lower tier staking limit\"\n                );\n                additionalPoolInfo.lowerTierCardsStaked[msg.sender].push(\n                    _payload._ids[i]\n                );\n                additionalPoolInfo.lowerTierCards[_payload._ids[i]] = _payload\n                    ._prices[i];\n            } else {\n                revert(\"MADworld: invalid tier\");\n            }\n\n            poolInfo.nftCollection.nft.safeTransferFrom(\n                msg.sender,\n                address(this),\n                _payload._ids[i],\n                \"0x\"\n            );\n            totalPrice += _payload._prices[i];\n        }\n\n        poolInfo.stakingToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            totalPrice\n        );\n        additionalPoolInfo.tokensStaked[msg.sender] += totalPrice;\n        poolInfo.totalStaked += totalPrice;\n\n        require(\n            additionalPoolInfo.tokensStaked[msg.sender] >=\n                poolInfo.apyStruct[0].amount,\n            \"MADworld: total stake less than minimum\"\n        );\n        require(\n            poolInfo.totalStaked <= poolInfo.totalPoolSize,\n            \"MADworld: exceed pool limit\"\n        );\n\n        additionalPoolInfo.userLastStakeTime[msg.sender] = block.timestamp;\n\n        emit Staked(\n            msg.sender,\n            _poolId,\n            _payload._ids,\n            _payload._prices,\n            totalPrice\n        );\n    }\n\n    // solhint-disable-next-line\n    function withdraw(\n        uint256 _poolId,\n        uint256 _boostId,\n        uint256[] calldata _ids\n    )\n        external\n        nonReentrant\n        validatePoolById(_poolId)\n        updateState(_poolId, msg.sender)\n    {\n        Pool storage poolInfo = pools[_poolId];\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n\n        uint256 totalPrice;\n        uint256[] memory _prices = new uint256[](_ids.length);\n\n        if (_boostId > 0) {\n            require(\n                additionalPoolInfo.boostCardsStaked[msg.sender] == _boostId,\n                \"MADworld: invalid boost nft id input\"\n            );\n\n            poolInfo.nftCollection.nftBoost.safeTransferFrom(\n                address(this),\n                msg.sender,\n                _boostId,\n                \"0x\"\n            );\n\n            additionalPoolInfo.boostCardsStaked[msg.sender] = 0;\n            additionalPoolInfo.userBoostApr[msg.sender] = 0;\n\n            emit BoostWithdrawn(_poolId, _boostId);\n        }\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            require(_ids[i] != 0, \"MADworld: invalid input\");\n\n            uint256 price;\n\n            bool found;\n\n            for (\n                uint256 j = 0;\n                j < additionalPoolInfo.higherTierCardsStaked[msg.sender].length;\n                j++\n            ) {\n                if (\n                    additionalPoolInfo.higherTierCardsStaked[msg.sender][j] ==\n                    _ids[i]\n                ) {\n                    found = true;\n                    price = additionalPoolInfo.higherTierCards[_ids[i]];\n                    _prices[i] = additionalPoolInfo.higherTierCards[_ids[i]];\n                    additionalPoolInfo.higherTierCardsStaked[msg.sender][j] = 0;\n                    break;\n                }\n            }\n\n            if (!found) {\n                for (\n                    uint256 j = 0;\n                    j <\n                    additionalPoolInfo.lowerTierCardsStaked[msg.sender].length;\n                    j++\n                ) {\n                    if (\n                        additionalPoolInfo.lowerTierCardsStaked[msg.sender][\n                            j\n                        ] == _ids[i]\n                    ) {\n                        found = true;\n                        price = additionalPoolInfo.lowerTierCards[_ids[i]];\n                        _prices[i] = additionalPoolInfo.lowerTierCards[_ids[i]];\n                        additionalPoolInfo.lowerTierCardsStaked[msg.sender][\n                                j\n                            ] = 0;\n                        break;\n                    }\n                }\n            }\n\n            require(found, \"MADworld: token is not staked\");\n\n            poolInfo.nftCollection.nft.safeTransferFrom(\n                address(this),\n                msg.sender,\n                _ids[i],\n                \"0x\"\n            );\n            totalPrice += price;\n        }\n\n        additionalPoolInfo.tokensStaked[msg.sender] -= totalPrice;\n        poolInfo.totalStaked -= totalPrice;\n\n        uint256 _fee;\n        if (\n            block.timestamp <\n            additionalPoolInfo.userLastStakeTime[msg.sender] +\n                (poolInfo.unstakeFeeDuration) &&\n            poolInfo.rewardToken.balanceOf(address(this)) > 0\n        ) //You do not pay unstaking fee when staking event is over\n        {\n            //charge fee\n            _fee = (totalPrice * (poolInfo.unstakeFee)) / 1e18;\n            poolInfo.stakingToken.safeTransfer(\n                poolInfo.feeReceiverAddress,\n                _fee\n            );\n        }\n\n        uint256[] memory _higherTierCardsStaked = additionalPoolInfo\n            .higherTierCardsStaked[msg.sender];\n        uint256[] memory _lowerTierCardsStaked = additionalPoolInfo\n            .lowerTierCardsStaked[msg.sender];\n\n        additionalPoolInfo.higherTierCardsStaked[msg.sender] = new uint256[](0);\n        additionalPoolInfo.lowerTierCardsStaked[msg.sender] = new uint256[](0);\n\n        for (uint256 i = 0; i < _higherTierCardsStaked.length; i++) {\n            if (_higherTierCardsStaked[i] > 0) {\n                additionalPoolInfo.higherTierCardsStaked[msg.sender].push(\n                    _higherTierCardsStaked[i]\n                );\n            }\n        }\n\n        for (uint256 i = 0; i < _lowerTierCardsStaked.length; i++) {\n            if (_lowerTierCardsStaked[i] > 0) {\n                additionalPoolInfo.lowerTierCardsStaked[msg.sender].push(\n                    _lowerTierCardsStaked[i]\n                );\n            }\n        }\n\n        {\n            uint256 balance = poolInfo.stakingToken.balanceOf(address(this));\n\n            require(\n                balance >= totalPrice - _fee,\n                \"MADworld: contract insufficient balance\"\n            );\n        }\n\n        poolInfo.stakingToken.safeTransfer(msg.sender, totalPrice - _fee);\n\n        emit Withdrawn(msg.sender, _poolId, _ids, _prices, totalPrice, _fee);\n    }\n\n    function setSigner(address _signer) external override onlyRole(ADMIN) {\n        signer = _signer;\n\n        emit SetSigner(_signer);\n    }\n\n    function _setApyStruct(uint256 _poolId, ApyStruct[] memory listApy)\n        private\n        validatePoolById(_poolId)\n        onlyRole(ADMIN)\n    {\n        Pool storage poolInfo = pools[_poolId];\n\n        uint256 len = listApy.length;\n\n        for (uint256 i = 0; i < len; i++) {\n            require(listApy[i].amount > 0, \"MADworld: invalid APY amount\");\n            require(listApy[i].apy > 0, \"MADworld: invalid APY value\");\n\n            poolInfo.apyStruct.push(\n                ApyStruct({ amount: listApy[i].amount, apy: listApy[i].apy })\n            );\n        }\n\n        emit SetApyStruct(poolInfo.apyStruct);\n    }\n\n    function getApyByStake(uint256 _poolId, uint256 _amount)\n        public\n        view\n        validatePoolById(_poolId)\n        returns (uint256)\n    {\n        Pool storage poolInfo = pools[_poolId];\n\n        if (\n            poolInfo.apyStruct.length == 0 ||\n            _amount < poolInfo.apyStruct[0].amount\n        ) {\n            return 0;\n        }\n\n        for (uint256 i = 0; i < poolInfo.apyStruct.length; i++) {\n            if (_amount <= poolInfo.apyStruct[i].amount) {\n                return poolInfo.apyStruct[i].apy;\n            }\n        }\n\n        return poolInfo.apyStruct[poolInfo.apyStruct.length - 1].apy;\n    }\n\n    function getTotalApy(uint256 _poolId, address _userAddress)\n        public\n        view\n        validatePoolById(_poolId)\n        returns (uint256)\n    {\n        AdditionalPoolInfo storage additionalPoolInfo = additionalPoolInfos[\n            _poolId\n        ];\n        uint256 baseAPY = getApyByStake(\n            _poolId,\n            additionalPoolInfo.tokensStaked[_userAddress]\n        );\n        uint256 boostedApy = additionalPoolInfo.userBoostApr[_userAddress];\n        return (baseAPY * (1e18 + boostedApy)) / 1e18;\n    }\n\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        bytes calldata _data\n    ) external override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/extensions/Signature.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// Signature Verification\n/// @title RedKite Whitelists - Implement off-chain whitelist and on-chain verification\n/// @author CuongTran <cuong.tran@sotatek.com>\n\ncontract Signature {\n    // Using Openzeppelin ECDSA cryptography library\n    address public signer;\n\n    function setSigner(address _signer) external virtual {\n        signer = _signer;\n    }\n\n    function getMessageHash(\n        uint256 _poolId,\n        address _user,\n        uint256[] memory _ids,\n        uint256[] memory _prices,\n        uint256[] memory _tiers\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _poolId,\n                    _user,\n                    _ids,\n                    _prices,\n                    _tiers\n                )\n            );\n    }\n\n    function getBoostCardsMessageHash(\n        uint256 _poolId,\n        address _user,\n        uint256 _ids,\n        uint256 _prices,\n        uint256 _tiers,\n        uint256 _boostId\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _poolId,\n                    _user,\n                    _ids,\n                    _prices,\n                    _tiers,\n                    _boostId\n                )\n            );\n    }\n\n    // Verify signature function\n    function _verifyStakeCardsSignature(\n        bytes32 _msgHash,\n        bytes memory signature\n    ) public view returns (bool) {\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(_msgHash);\n\n        return getSignerAddress(ethSignedMessageHash, signature) == signer;\n    }\n\n    function getSignerAddress(bytes32 _messageHash, bytes memory _signature)\n        public\n        pure\n        returns (address)\n    {\n        return ECDSA.recover(_messageHash, _signature);\n    }\n\n    // Split signature to r, s, v\n    function splitSignature(bytes memory _signature)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(_signature.length == 65, \"invalid signature length\");\n\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := byte(0, mload(add(_signature, 96)))\n        }\n    }\n\n    function getEthSignedMessageHash(bytes32 _messageHash)\n        public\n        pure\n        returns (bytes32)\n    {\n        return ECDSA.toEthSignedMessageHash(_messageHash);\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/libs/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(\n            data\n        );\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libs/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\nimport \"./SafeMath.sol\";\nimport \"../interfaces/IERC20.sol\";\n\nlibrary SafeERC20 {\n    using Address for address;\n    using SafeMath for uint256;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "contracts/libs/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b)\n        internal\n        pure\n        returns (bool, uint256)\n    {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    }
  }
}}