{"Context.sol":{"content":"pragma solidity ^0.8.10;\n\n// SPDX-License-Identifier: MIT\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    \n    function _msgValue() internal view virtual returns (uint256) {\n        return msg.value;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"},"EthForwarder.sol":{"content":"pragma solidity ^0.8.13;\n\n// SPDX-License-Identifier: Apache-2.0\n\nimport \"./Ownable.sol\";\n\ncontract EthForwarder is Ownable {\n\n    struct ForwardData {\n        address receivingAddress;\n        uint256 sharePercentage;\n    }\n\n    ForwardData[] private distributionInfo;\n\n    function configure(ForwardData[] memory distribution) external onlyOwner {\n        delete distributionInfo;\n        \n        uint256 totalShares = 0;\n        for (uint i = 0; i \u003c distribution.length; ++i) {\n            ForwardData memory data = distribution[i];\n            totalShares += data.sharePercentage;\n            distributionInfo.push(ForwardData(data.receivingAddress, data.sharePercentage));\n        }\n        require(totalShares == 1000, \"total shares must equal 100%\");\n    }\n\n    function distribute() external onlyOwner {\n        require(distributionInfo.length \u003e 0, \"no forward addresses found\");\n\n        // forward ETH\n        uint256 contractBalance = address(this).balance;\n        for (uint i = 0; i \u003c distributionInfo.length; ++i) {\n            ForwardData memory data = distributionInfo[i];\n            payable(address(data.receivingAddress)).transfer(contractBalance * data.sharePercentage / 1000);\n        }\n    }\n\n    receive() external payable {\n    }\n}"},"Ownable.sol":{"content":"pragma solidity ^0.8.10;\n\n// SPDX-License-Identifier: MIT\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"}}