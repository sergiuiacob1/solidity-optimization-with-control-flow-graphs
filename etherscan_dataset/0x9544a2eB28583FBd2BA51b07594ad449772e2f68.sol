{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721.sol\";\r\nimport \"./IERC721Receiver.sol\";\r\nimport \"./IERC721Metadata.sol\";\r\nimport \"./IERC721Enumerable.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Strings.sol\";\r\nimport \"./ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\ncontract ERC721A is\r\n  Context,\r\n  ERC165,\r\n  IERC721,\r\n  IERC721Metadata,\r\n  IERC721Enumerable\r\n{\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  struct TokenOwnership {\r\n    address addr;\r\n    uint64 startTimestamp;\r\n  }\r\n\r\n  struct AddressData {\r\n    uint128 balance;\r\n    uint128 numberMinted;\r\n  }\r\n\r\n  uint256 private currentIndex = 0;\r\n\r\n  uint256 internal immutable collectionSize;\r\n  uint256 internal immutable maxBatchSize;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n  mapping(uint256 =\u003e TokenOwnership) private _ownerships;\r\n\r\n  // Mapping owner address to address data\r\n  mapping(address =\u003e AddressData) private _addressData;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 =\u003e address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n  /**\r\n   * @dev\r\n   * `maxBatchSize` refers to how much a minter can mint at a time.\r\n   * `collectionSize_` refers to how many tokens are in the collection.\r\n   */\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 maxBatchSize_,\r\n    uint256 collectionSize_\r\n  ) {\r\n    require(\r\n      collectionSize_ \u003e 0,\r\n      \"ERC721A: collection must have a nonzero supply\"\r\n    );\r\n    require(maxBatchSize_ \u003e 0, \"ERC721A: max batch size must be nonzero\");\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    maxBatchSize = maxBatchSize_;\r\n    collectionSize = collectionSize_;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return currentIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenByIndex}.\r\n   */\r\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n    require(index \u003c totalSupply(), \"ERC721A: global index out of bounds\");\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n   * It may also degrade with extremely large collection sizes (e.g \u003e\u003e 10000), test for your use case.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(index \u003c balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n    uint256 numMintedSoFar = totalSupply();\r\n    uint256 tokenIdsIdx = 0;\r\n    address currOwnershipAddr = address(0);\r\n    for (uint256 i = 0; i \u003c numMintedSoFar; i++) {\r\n      TokenOwnership memory ownership = _ownerships[i];\r\n      if (ownership.addr != address(0)) {\r\n        currOwnershipAddr = ownership.addr;\r\n      }\r\n      if (currOwnershipAddr == owner) {\r\n        if (tokenIdsIdx == index) {\r\n          return i;\r\n        }\r\n        tokenIdsIdx++;\r\n      }\r\n    }\r\n    revert(\"ERC721A: unable to get token of owner by index\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n    return uint256(_addressData[owner].balance);\r\n  }\r\n\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    require(\r\n      owner != address(0),\r\n      \"ERC721A: number minted query for the zero address\"\r\n    );\r\n    return uint256(_addressData[owner].numberMinted);\r\n  }\r\n\r\n  function ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n\r\n    uint256 lowestTokenToCheck;\r\n    if (tokenId \u003e= maxBatchSize) {\r\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n    }\r\n\r\n    for (uint256 curr = tokenId; curr \u003e= lowestTokenToCheck; curr--) {\r\n      TokenOwnership memory ownership = _ownerships[curr];\r\n      if (ownership.addr != address(0)) {\r\n        return ownership;\r\n      }\r\n    }\r\n\r\n    revert(\"ERC721A: unable to determine the owner of token\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return ownershipOf(tokenId).addr;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length \u003e 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public override {\r\n    address owner = ERC721A.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721A: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId, owner);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view override returns (address) {\r\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) public override {\r\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `tokenId` exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (`_mint`),\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return tokenId \u003c currentIndex;\r\n  }\r\n\r\n  function _safeMint(address to, uint256 quantity) internal {\r\n    _safeMint(to, quantity, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - there must be `quantity` tokens remaining unminted in the total collection.\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` cannot be larger than the max batch size.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bytes memory _data\r\n  ) internal {\r\n    uint256 startTokenId = currentIndex;\r\n    require(to != address(0), \"ERC721A: mint to the zero address\");\r\n    require(totalSupply() + quantity \u003c= collectionSize,\"ERC721A: collection size exceeded\");\r\n    // We know if the first token in the batch doesn\u0027t exist, the other ones don\u0027t as well, because of serial ordering.\r\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n    require(quantity \u003c= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    AddressData memory addressData = _addressData[to];\r\n    _addressData[to] = AddressData(\r\n      addressData.balance + uint128(quantity),\r\n      addressData.numberMinted + uint128(quantity)\r\n    );\r\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    uint256 updatedIndex = startTokenId;\r\n\r\n    for (uint256 i = 0; i \u003c quantity; i++) {\r\n      emit Transfer(address(0), to, updatedIndex);\r\n      require(\r\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n      );\r\n      \r\n      updatedIndex++;\r\n      \r\n    }\r\n\r\n    currentIndex = updatedIndex;\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) private {\r\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n      getApproved(tokenId) == _msgSender() ||\r\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n    require(\r\n      isApprovedOrOwner,\r\n      \"ERC721A: transfer caller is not owner nor approved\"\r\n    );\r\n\r\n    require(\r\n      prevOwnership.addr == from,\r\n      \"ERC721A: transfer from incorrect owner\"\r\n    );\r\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n    _addressData[from].balance -= 1;\r\n    _addressData[to].balance += 1;\r\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n    uint256 nextTokenId = tokenId + 1;\r\n    if (_ownerships[nextTokenId].addr == address(0)) {\r\n      if (_exists(nextTokenId)) {\r\n        _ownerships[nextTokenId] = TokenOwnership(\r\n          prevOwnership.addr,\r\n          prevOwnership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `to` to operate on `tokenId`\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(\r\n    address to,\r\n    uint256 tokenId,\r\n    address owner\r\n  ) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n  /**\r\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n   */\r\n  function _setOwnersExplicit(uint256 quantity) internal {\r\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n    require(quantity \u003e 0, \"quantity must be nonzero\");\r\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n    if (endIndex \u003e collectionSize - 1) {\r\n      endIndex = collectionSize - 1;\r\n    }\r\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n    for (uint256 i = oldNextOwnerToSet; i \u003c= endIndex; i++) {\r\n      if (_ownerships[i].addr == address(0)) {\r\n        TokenOwnership memory ownership = ownershipOf(i);\r\n        _ownerships[i] = TokenOwnership(\r\n          ownership.addr,\r\n          ownership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n    nextOwnerToExplicitlySet = endIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n   * minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n}"},"IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``\u0027s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs \u0026 pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i \u003c proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash \u003c= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"MutantHamsters.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@       @@@@@@@@@@@@@@@@@@@@@@@@@@@        (@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@          @@@@@@@@              #@@@   *@.   @@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@            @@@#                         @    @@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@     @@@@@@@@,                             @  @@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@     @@                                     @ *@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@      @                                      @@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@    @                 @@\u0026                     @@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@ ,@             \u0026@@@@@@@.@@        @@@@@@@@@   @@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@            @@@@@@@@@@@@\u0026@@     @@@@@@@@@@@*    *@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@              @@@@@@@@@@@@@ @    @@@@@@@@@@@@(   @  @@@@@@@@@@@@\r\n        @@@@@@@@@@@@                    @@@@@@@@@@@.      @@@@@@@@@@@     @@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@  @@                    @@@@@               @@@       @@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@                    @@@@@@   #@@@@@@@   @@@@*       @@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@                    @@@,      %@@@@@ @   @@@@@         @@@@@@@@@@@\r\n        @@@@@@@@@@@@@                     @@@@                  \u0026%@(       % @@@@@@@@@@@\r\n        @@@@@@@@@@@.   ,                    (                              @@@@@@@@@@@@@\r\n        @@@@@@@@@@@@  @@                                                   @@@@@@@@@@@@@\r\n        @@@@@@@@@@@@  @@@                                                 @@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@        @@                                    @@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@\u0026   @@@                                  @@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@    @@@@     @@@                @  @@   @@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@(   @@@@@#   @@@@@  %@@ @@      @@@@@   @@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     @@@@@@@@@@@@    /@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n*/\r\n\r\n/// @creator:         Mutant Hamsters\r\n/// @author:          BGOuk\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./Strings.sol\";\r\nimport \"./MerkleProof.sol\";\r\nimport \"ERC721A.sol\";\r\nimport \"./MutantHamstersYield.sol\";\r\n\r\n\r\ncontract MutantHamsters is MutantHamstersYield {\r\n    using Strings for uint256;\r\n\r\n    string baseURI;\r\n    uint256 public constant _maxSupply = 3333;\r\n    uint256 public constant _maxMint = 3323;\r\n    uint256 public constant _maxMintAmountPerAddressPublic = 5;\r\n    uint256 public constant _maxMintAmountPerAddressWL = 3;\r\n    uint256 public constant _WLCost = 0.04 ether;\r\n    uint256 public constant _PublicCost = 0.06 ether;\r\n    bool public _mintOpened;\r\n    uint256 public publicSaleAfter;\r\n    bytes32 public immutable _WLroot;\r\n\r\n    constructor(\r\n        string memory initialBaseURI,\r\n        bytes32 WLroot\r\n    ) ERC721A(\"Mutant Hamsters\", \"MH\",_maxMintAmountPerAddressPublic,_maxSupply) {\r\n        baseURI = initialBaseURI;\r\n        _WLroot = WLroot;\r\n        \r\n    }\r\n\r\n    // internal\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function publicMint(uint256 mintAmount) public payable{\r\n        require(_mintOpened, \"Minting now allowed yet\");\r\n        require(mintAmount \u003e 0,\"The quantity cannot be a negative number\");\r\n        uint256 price = 0;\r\n\r\n        \r\n            require(_numberMinted(msg.sender) + mintAmount \u003c= _maxMintAmountPerAddressPublic,\"Maximum mint amount exceeded\");\r\n                \r\n            price = _PublicCost * mintAmount;\r\n        \r\n        require(msg.value \u003e= price,\"Not Enough ETH\");\r\n        \r\n        require((_maxMint - totalSupply()) - mintAmount \u003e= 0,\"Not Enough Mintable Token\");\r\n\r\n        _safeMint(msg.sender,mintAmount);\r\n        yieldToken.updateRewardOnMint(msg.sender);\r\n\r\n    }\r\n\r\n    function presaleMint(uint256 mintAmount,bytes32[] memory proof) public payable{\r\n        require(_mintOpened, \"Minting now allowed yet\");\r\n        require(mintAmount \u003e 0,\"The quantity cannot be a negative number\");\r\n        uint256 mintedToken = _numberMinted(msg.sender);\r\n        bool presale = true;\r\n        uint256 price = 0;\r\n\r\n        if(block.timestamp \u003e publicSaleAfter) presale = false;\r\n\r\n        \r\n        if(presale \u0026\u0026 _verify(msg.sender,proof,_WLroot)){\r\n            price = getPresaleCost(mintAmount,_WLCost,msg.sender);\r\n        }\r\n        else revert(\"Pre-Sale is over\");\r\n\r\n        require(mintedToken + mintAmount \u003c= (_maxMintAmountPerAddressPublic),\"Maximum mint amount exceeded\");\r\n        \r\n\r\n        require(msg.value \u003e= price,\"Not Enough ETH\");\r\n        \r\n        require((_maxMint - totalSupply()) - mintAmount \u003e= 0,\"Not Enough Mintable Token\");\r\n\r\n        _safeMint(msg.sender,mintAmount);\r\n        yieldToken.updateRewardOnMint(msg.sender);\r\n\r\n\r\n\r\n    }\r\n\r\n    function getPresaleCost(uint256 mintAmount,uint256 roleCost,address sender) public view returns(uint256 price) {\r\n        uint256 mintedToken = _numberMinted(sender);\r\n\r\n        require(mintAmount\u003e0,\"Mint amount cannot be zero\");\r\n        require((_maxMintAmountPerAddressPublic - mintedToken) \u003e= mintAmount ,\"Maximum mint amount exceeded\");\r\n\r\n        if ((_maxMintAmountPerAddressWL - mintedToken) \u003c 1 ) \r\n        { \r\n            price = mintAmount*_PublicCost;\r\n\r\n        } else {\r\n\r\n            uint256 remainingPresaleCount = _maxMintAmountPerAddressWL - mintedToken;\r\n            \r\n            if (mintAmount\u003eremainingPresaleCount) {\r\n                price = remainingPresaleCount*roleCost + (mintAmount-remainingPresaleCount)*_PublicCost;\r\n            } else {\r\n                price = mintAmount*roleCost;\r\n            }\r\n        }\r\n\r\n            \r\n    }\r\n\r\n\r\n\r\n\r\n    function _verify(address _address,bytes32[] memory proof,bytes32 listroot) internal pure returns(bool){\r\n        \r\n        return MerkleProof.verify(proof,listroot,keccak256(abi.encodePacked(_address)));\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        \r\n\r\n        string memory currentBaseURI = _baseURI();\r\n        return\r\n            \r\n                string(\r\n                    abi.encodePacked(\r\n                        currentBaseURI,\r\n                        tokenId.toString(),\r\n                        \".json\"\r\n                    )\r\n                );\r\n                \r\n        \r\n    }\r\n    \r\n    \r\n\r\n    //only owner\r\n\r\n    function setBaseURI(string memory newBaseURI) external onlyOwner{\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function startMint() external onlyOwner{\r\n        _mintOpened = true;\r\n        publicSaleAfter = block.timestamp + 4 hours;\r\n    }\r\n\r\n    function toggleMint() external onlyOwner{\r\n        _mintOpened = !_mintOpened;\r\n    }\r\n\r\n    function ownerMint(uint256 quantity,address _address) external onlyOwner{\r\n        uint256 mod = quantity%5;\r\n        for(uint256 i = 0;i\u003cquantity/5;i++){\r\n            _safeMint(_address,5);\r\n        }\r\n        if(mod != 0) _safeMint(_address,mod);\r\n    }\r\n\r\n\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        withdrawInternal(0x321011E9BcDF93F57174f9Afd28083701ee27634,(balance*200)/1000);\r\n        withdrawInternal(0xfB1b6058E73E8eE71a5e2cf5d7a370b16e11D13F,(balance*200)/1000);\r\n        withdrawInternal(0xF9080Ac7188724d898665fD61A25caD56C62F9d3,(balance*100)/1000);\r\n        withdrawInternal(0x7f69789732d31AF98b2766dBdf23a69612D2B5C5,(balance*100)/1000);\r\n        withdrawInternal(0x1b207D0A58892BDCE713bd90D0aF63eF8C2435AA,(balance*100)/1000);\r\n        withdrawInternal(0x2D3cca8356aD7Bb654499B1ba8BA4e26346d3Edf,(balance*100)/1000);\r\n        withdrawInternal(0xb83ce0cf4F53F82d22C98C6378E7fe337d01B1b9,(balance*35)/1000);\r\n        withdrawInternal(0x29b7aAA30A47F779bFF900551A1AeA76b983ad75,(balance*35)/1000);\r\n        withdrawInternal(0x433AA2913eFc08042899aB9b6fCFC7B7E901Fa8a,(balance*50)/1000);\r\n        withdrawInternal(0xCF06446c0372Bf1BB771d0E9AD9c16fD0d3cdD7B,(balance*30)/1000);\r\n        withdrawInternal(0x55C1D22188A6b195b30E354E59D16fe35e853F33,(balance*20)/1000);\r\n        withdrawInternal(0xf37ed805aA7bCf1C98d91B75d0c4DAA89773C560,(balance*20)/1000);\r\n        withdrawInternal(0xFC5127d20e8775eEEF3db7F34340d01B635A0525,(balance*10)/1000);\r\n        \r\n    }\r\n\r\n    function withdrawInternal(address to,uint256 amount) internal onlyOwner{\r\n        (bool success, ) = to.call{\r\n            value: amount\r\n        }(\"\");\r\n        require(success);\r\n    }\r\n}"},"MutantHamstersToken.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC721A.sol\";\r\n\r\ncontract MutantHamstersToken is ERC20, Ownable {\r\n\r\n    uint256 public immutable maxSupply;\r\n    uint256 public claimable;\r\n\r\n    bool public isInitialed = false; \r\n\r\n\tmapping(address =\u003e uint256) public _rewards;\r\n\tmapping(address =\u003e uint256) public _lastUpdate;\r\n\r\n    uint256 public immutable dailyReward;\r\n\r\n\tERC721A public immutable _hamstersContract;\r\n\r\n    address STAKE_POOL_ADDRESS = address(0x1F34eb9801CfD9E7cA6a97b7166d6DbaF9A6A788);\r\n\r\n\tevent RewardClaimed(address indexed user, uint256 indexed reward);\r\n\r\n    modifier InitialModifier() {\r\n        require(!isInitialed,\"already initialed\");\r\n        isInitialed = true;\r\n        _;\r\n    }\r\n\r\n\tconstructor(address _hamsters) ERC20(\"Mutant Hamsters Token\", \"MHT\") {\r\n\t\t_hamstersContract = ERC721A(_hamsters);\r\n        maxSupply = 1000000000 * (10**decimals());\r\n        dailyReward = 100*(10**decimals());\r\n\t}\r\n\r\n    function Initial() external InitialModifier onlyOwner {\r\n        _mint(STAKE_POOL_ADDRESS, (maxSupply/100)*20);\r\n        claimable = maxSupply - ((maxSupply/100)*20);\r\n\r\n    }\r\n\t\r\n\r\n\tfunction updateRewardOnMint(address _user) external {\r\n        if(claimable == 0) return;\r\n\t\trequire(msg.sender == address(_hamstersContract), \"Can\u0027t call this\");\r\n\t\tuint256 timerUser = _lastUpdate[_user];\r\n        uint256 time = block.timestamp;\r\n        uint256 subTime = time - timerUser;\r\n        subTime = subTime == time ? 1: subTime;\r\n        uint256 reward = dailyReward +_hamstersContract.balanceOf(_user)*((dailyReward / 1 days)*subTime);\r\n\r\n        if(reward \u003e claimable) reward = claimable;\r\n\r\n\t\t_rewards[_user] += reward;\r\n        claimable -= reward;\r\n\t\t\r\n\r\n\t\t_lastUpdate[_user] = time;\r\n\t}\r\n\r\n\t// called on transfers\r\n\tfunction updateReward(address _from, address _to) external {\r\n        if(claimable == 0) return;\r\n\t\trequire(msg.sender == address(_hamstersContract), \"Can\u0027t call this\");\r\n\r\n\t\tuint256 time = block.timestamp;\r\n\t\tuint256 timerFrom = _lastUpdate[_from];\r\n\r\n        uint256 subTime = time - timerFrom;\r\n        subTime = subTime == time ? 1: subTime;\r\n\r\n        uint256 reward = _hamstersContract.balanceOf(_from)*((dailyReward / 1 days)*subTime);\r\n\r\n        if(reward \u003e claimable) reward = claimable;\r\n        \r\n\r\n\t\t_rewards[_from] += reward;\r\n        claimable -= reward;\r\n\r\n\t\tif (_to != address(0)) {\r\n            if(claimable == 0) return;\r\n\t\t\tuint256 timerTo = _lastUpdate[_to];\r\n            subTime = time - timerTo;\r\n            subTime = subTime == time ? 1: subTime;\r\n\r\n            reward = _hamstersContract.balanceOf(_to)*((dailyReward / 1 days)*subTime);\r\n            if(reward \u003e claimable) reward = claimable;\r\n\t\t\t_rewards[_to] += reward;\r\n            claimable -= reward;\r\n\r\n\t\t\t_lastUpdate[_to] = time;\r\n\t\t}\r\n        _lastUpdate[_from] = time;\r\n\t}\r\n\r\n\tfunction getReward(address _to) external {\r\n\t\trequire(msg.sender == address(_hamstersContract), \"Can\u0027t call this\");\r\n\r\n\r\n\t\tuint256 reward = _rewards[_to];\r\n\r\n\t\tif (reward \u003e 0) {\r\n\t\t\t_rewards[_to] = 0;\r\n\r\n\t\t\t_mint(_to, reward);\r\n\r\n\t\t\temit RewardClaimed(_to, reward);\r\n\t\t}\r\n\t}\r\n\r\n    function mint(address to, uint256 amount) external onlyOwner returns(uint256) {\r\n        if(claimable == 0) return 0;\r\n        if(amount \u003e claimable) amount = claimable;\r\n\r\n        _mint(to,amount);\r\n        claimable -= amount;\r\n        return amount;\r\n        \r\n    }\r\n\r\n\tfunction burn(address _from, uint256 _amount) external { \r\n\t\t_burn(_from, _amount);\r\n\t}\r\n\r\n\tfunction getTotalClaimable(address _user) external view returns(uint256) {\r\n        if(claimable == 0) return _rewards[_user];\r\n\t\tuint256 time = block.timestamp;\r\n        uint256 subTime = time - _lastUpdate[_user];\r\n        subTime = subTime == time ? 1: subTime;\r\n\t\tuint256 pending = _hamstersContract.balanceOf(_user)*((dailyReward / 1 days)*subTime);\r\n        if(pending \u003e claimable) pending = claimable;\r\n\r\n\t\treturn _rewards[_user] + pending;\r\n\t}\r\n}"},"MutantHamstersYield.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC721A.sol\";\r\nimport \"./MutantHamstersToken.sol\";\r\n\r\n\r\nabstract contract MutantHamstersYield is ERC721A, Ownable{\r\n    MutantHamstersToken public yieldToken;\r\n\r\n\tfunction setYieldToken(address _yield) external onlyOwner {\r\n\t\tyieldToken = MutantHamstersToken(_yield);\r\n\t}\r\n\r\n\tfunction getReward() external {\r\n\t\tyieldToken.updateReward(msg.sender, address(0));\r\n\t\tyieldToken.getReward(msg.sender);\r\n\t}\r\n\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public override {\r\n\t\tERC721A.transferFrom(from, to, tokenId);\r\n\t\tyieldToken.updateReward(from, to);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {\r\n\t\tERC721A.safeTransferFrom(from, to, tokenId, _data);\r\n\t\tyieldToken.updateReward(from, to);\r\n\t}\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}}