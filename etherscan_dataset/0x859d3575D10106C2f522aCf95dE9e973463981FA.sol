{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/BaseBurner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./interfaces/IBurner.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract BaseBurner is IBurner, Ownable {\n    /**\n     * @notice The receiver address that will receive the targetToken after burn function is run\n     */\n    address public receiver;\n\n    /**\n     * @notice Burnable tokens mapped to targetTokens\n     */\n    mapping(address => address) burnableTokens;\n\n    /**\n     * @notice Emitted when the receiver is set\n     */\n    event receiverSet(address oldReceiver, address newReceiver);\n    /**\n     * @notice Emitted when a token's state in whitelistedToken mapping is set\n     */\n    event addedBurnableToken(address burnableToken, address targetToken);\n\n    /**\n     * @notice Emitted when token is withdrawn from this contract\n     */\n    event tokenWithdrawn(address token, address to, uint256 amount);\n\n    modifier onlyBurnableToken(address token) {\n        require(\n            burnableTokens[token] != address(0),\n            \"token is not whitelisted, please call addBurnableTokens\"\n        );\n        _;\n    }\n\n    constructor(address _receiver) {\n        receiver = _receiver;\n        emit receiverSet(address(0), receiver);\n    }\n\n    /* Admin functions */\n\n    /*\n     * @notice withdraw tokens from this address to `to` address\n     * @param token The token to be withdrawn\n     * @param to The receiver of this token withdrawal\n     */\n    function withdraw(address token, address to) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).transfer(to, balance);\n        emit tokenWithdrawn(token, to, balance);\n    }\n\n    /*\n     * @notice set the receiver of targetToken for this contract\n     * @param _receiver The receiver address\n     */\n    function setReceiver(address _receiver) external onlyOwner {\n        address oldReceiver = receiver;\n        receiver = _receiver;\n        emit receiverSet(oldReceiver, _receiver);\n    }\n\n    /*\n     * @notice set the burnableTokens of this contract, burnableTokens will be burned for the mapping result\n     * @notice set the mapping result as address(0) to unset a token as burnable\n     * @param burnableTokens An array of token addresses that are allowed to be burned by this contract\n     * @param targetTokens An array of token addresses that are the resultant token received after burning the burnableToken\n     */\n    function addBurnableTokens(\n        address[] calldata _burnableTokens,\n        address[] calldata _targetTokens\n    ) external virtual onlyOwner {\n        require(\n            _burnableTokens.length == _targetTokens.length,\n            \"array length mismatch\"\n        );\n        for (uint256 i = 0; i < _burnableTokens.length; i++) {\n            burnableTokens[_burnableTokens[i]] = _targetTokens[i];\n            emit addedBurnableToken(_burnableTokens[i], _targetTokens[i]);\n        }\n    }\n}\n"
    },
    "contracts/IBAMMBurner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./BaseBurner.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IIBAMM {\n    function sell(address from, uint amount, uint minOut) external returns (bool);\n}\n\ncontract IBAMMBurner is BaseBurner, ReentrancyGuard {\n    address public ibAMM;\n\n    constructor(\n        address _receiver,\n        address _ibAMM\n    ) BaseBurner(_receiver) {\n        ibAMM = _ibAMM;\n    }\n\n    /* User functions */\n    function burn(address token)\n        external\n        onlyBurnableToken(token)\n        nonReentrant\n        returns (uint256)\n    {\n        require(receiver != address(0), \"receiver not set\");\n        address targetToken = burnableTokens[token];\n        uint256 msgSenderBalance = IERC20(token).balanceOf(msg.sender);\n        uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\n        if (msgSenderBalance != 0 && allowance != 0) {\n            IERC20(token).transferFrom(\n                msg.sender,\n                address(this),\n                msgSenderBalance\n            );\n        }\n        uint256 amountToBurn = IERC20(token).balanceOf(address(this));\n        if (amountToBurn != 0) {\n            IERC20(token).approve(ibAMM, amountToBurn);\n            IIBAMM(ibAMM).sell(token, amountToBurn, 0);\n        }\n        uint256 targetTokenBalance = IERC20(targetToken).balanceOf(\n            address(this)\n        );\n        if (targetTokenBalance != 0) {\n            IERC20(targetToken).transfer(receiver, targetTokenBalance);\n        }\n        return targetTokenBalance;\n    }\n}\n"
    },
    "contracts/interfaces/IBurner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBurner {\n    function burn(address token) external returns (uint256);\n\n    function withdraw(address token, address to) external;\n\n    function setReceiver(address receiver) external;\n\n    function addBurnableTokens(\n        address[] calldata burnableTokens,\n        address[] calldata targetTokens\n    ) external;\n}\n"
    }
  }
}}