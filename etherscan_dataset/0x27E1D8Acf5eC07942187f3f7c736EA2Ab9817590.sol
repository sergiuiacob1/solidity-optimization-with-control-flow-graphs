{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/AssetManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./interfaces/IAssetManager.sol\";\r\nimport \"./interfaces/ITwapOraclePriceFeed.sol\";\r\nimport \"./libraries/TribeOneHelper.sol\";\r\n\r\ncontract AssetManager is Ownable, ReentrancyGuard, IAssetManager {\r\n    event AddAvailableLoanAsset(address _sender, address _asset);\r\n    event SetLoanTwapOracle(address _asset, address _twap);\r\n    event RemoveAvailableLoanAsset(address _sender, address _asset);\r\n    event AddAvailableCollateralAsset(address _sender, address _asset);\r\n    event RemoveAvailableCollateralAsset(address _sender, address _asset);\r\n    event SetConsumer(address _setter, address _consumer);\r\n    event SetAutomaticLoanLimit(address _setter, uint256 _oldLimit, uint256 _newLimit);\r\n    event TransferAsset(address indexed _requester, address _to, address _token, uint256 _amount);\r\n    event WithdrawAsset(address indexed _to, address _token, uint256 _amount);\r\n    event SetTwapOracle(address indexed _asset, address _twap, address _user);\r\n\r\n    mapping(address => bool) private availableLoanAsset;\r\n    mapping(address => bool) private availableCollateralAsset;\r\n    address private _consumer;\r\n    uint256 public automaticLoanLimit = 200; // For now we allows NFTs only below 200 usd price\r\n\r\n    address public immutable WETH; // This should be uniswap WETH address\r\n    address public immutable USDC; // This should be uniswap USDC address\r\n    mapping(address => address) private twapOracles; // loanAsset => twapOracle\r\n\r\n    constructor(address _WETH, address _USDC) {\r\n        require(_WETH != address(0) && _USDC != address(0), \"AssetManager: ZERO address\");\r\n        // Adding Native coins\r\n        availableCollateralAsset[address(0)] = true;\r\n        availableLoanAsset[address(0)] = true;\r\n        WETH = _WETH;\r\n        USDC = _USDC;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyConsumer() {\r\n        require(msg.sender == _consumer, \"Not consumer\");\r\n        _;\r\n    }\r\n\r\n    function consumer() external view returns (address) {\r\n        return _consumer;\r\n    }\r\n\r\n    function priceOracle(address asset) external view returns (address) {\r\n        return twapOracles[asset];\r\n    }\r\n\r\n    function addAvailableLoanAsset(address _asset) external onlyOwner nonReentrant {\r\n        require(!availableLoanAsset[_asset], \"Already available\");\r\n        availableLoanAsset[_asset] = true;\r\n        emit AddAvailableLoanAsset(msg.sender, _asset);\r\n    }\r\n\r\n    function removeAvailableLoanAsset(address _asset) external onlyOwner nonReentrant {\r\n        require(availableLoanAsset[_asset], \"Already removed\");\r\n        availableLoanAsset[_asset] = false;\r\n        emit RemoveAvailableLoanAsset(msg.sender, _asset);\r\n    }\r\n\r\n    function addAvailableCollateralAsset(address _asset) external onlyOwner nonReentrant {\r\n        require(!availableCollateralAsset[_asset], \"Already available\");\r\n        availableCollateralAsset[_asset] = true;\r\n        emit AddAvailableCollateralAsset(msg.sender, _asset);\r\n    }\r\n\r\n    function removeAvailableCollateralAsset(address _asset) external onlyOwner nonReentrant {\r\n        require(availableCollateralAsset[_asset], \"Already removed\");\r\n        availableCollateralAsset[_asset] = false;\r\n        emit RemoveAvailableCollateralAsset(msg.sender, _asset);\r\n    }\r\n\r\n    function isAvailableLoanAsset(address _asset) external view override returns (bool) {\r\n        return availableLoanAsset[_asset];\r\n    }\r\n\r\n    function isAvailableCollateralAsset(address _asset) external view override returns (bool) {\r\n        return availableCollateralAsset[_asset];\r\n    }\r\n\r\n    function setConsumer(address _consumer_) external onlyOwner {\r\n        require(_consumer_ != _consumer, \"Already set as consumer\");\r\n        require(_consumer_ != address(0), \"ZERO_ADDRESS\");\r\n        _consumer = _consumer_;\r\n\r\n        emit SetConsumer(msg.sender, _consumer_);\r\n    }\r\n\r\n    function setLoanAssetTwapOracle(address _asset, address _twap) external onlyOwner nonReentrant {\r\n        require(availableLoanAsset[_asset], \"AssetManager: Invalid loan asset\");\r\n        address token0 = ITwapOraclePriceFeed(_twap).token0();\r\n        address token1 = ITwapOraclePriceFeed(_twap).token1();\r\n        if (_asset == address(0)) {\r\n            require((token0 == WETH && token1 == USDC) || (token0 == USDC && token1 == WETH), \"AssetManager: Invalid twap\");\r\n        } else {\r\n            require((token0 == _asset && token1 == USDC) || (token0 == USDC && token1 == _asset), \"AssetManager: Invalid twap\");\r\n        }\r\n\r\n        twapOracles[_asset] = _twap;\r\n        emit SetTwapOracle(_asset, _twap, msg.sender);\r\n    }\r\n\r\n    function setAutomaticLoanLimit(uint256 _newLimit) external onlyOwner {\r\n        require(automaticLoanLimit != _newLimit, \"AssetManager: New value is same as old\");\r\n        uint256 oldLimit = automaticLoanLimit;\r\n        automaticLoanLimit = _newLimit;\r\n        emit SetAutomaticLoanLimit(msg.sender, oldLimit, _newLimit);\r\n    }\r\n\r\n    function isValidAutomaticLoan(address _asset, uint256 _amountIn) external view override returns (bool) {\r\n        require(availableLoanAsset[_asset], \"AssetManager: Invalid loan asset\");\r\n        uint256 usdcAmount;\r\n        if (_asset == USDC) {\r\n            usdcAmount = _amountIn;\r\n        } else {\r\n            address _twap = twapOracles[_asset];\r\n            require(_twap != address(0), \"AssetManager: Twap oracle was not set\");\r\n\r\n            if (_asset == address(0)) {\r\n                _asset = WETH;\r\n            }\r\n            usdcAmount = ITwapOraclePriceFeed(_twap).consult(_asset, _amountIn);\r\n        }\r\n\r\n        return usdcAmount <= automaticLoanLimit * (10**IERC20Metadata(USDC).decimals());\r\n    }\r\n\r\n    function requestETH(address _to, uint256 _amount) external override onlyConsumer {\r\n        require(address(this).balance >= _amount, \"Asset Manager: Insufficient balance\");\r\n        TribeOneHelper.safeTransferETH(_to, _amount);\r\n        emit TransferAsset(msg.sender, _to, address(0), _amount);\r\n    }\r\n\r\n    function requestToken(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external override onlyConsumer {\r\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \"Asset Manager: Insufficient balance\");\r\n        TribeOneHelper.safeTransfer(_token, _to, _amount);\r\n        emit TransferAsset(msg.sender, _to, _token, _amount);\r\n    }\r\n\r\n    function withdrawAsset(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(_to != address(0), \"ZERO Address\");\r\n        if (_token == address(0)) {\r\n            _amount = address(this).balance;\r\n            TribeOneHelper.safeTransferETH(msg.sender, _amount);\r\n        } else {\r\n            TribeOneHelper.safeTransfer(_token, msg.sender, _amount);\r\n        }\r\n\r\n        emit WithdrawAsset(_to, _token, _amount);\r\n    }\r\n\r\n    function collectInstallment(\r\n        address _currency,\r\n        uint256 _amount,\r\n        uint256 _interest,\r\n        bool _collateral\r\n    ) external payable override onlyConsumer {\r\n        if (_currency == address(0)) {\r\n            require(msg.value == _amount, \"Wrong msg.value\");\r\n        } else {\r\n            TribeOneHelper.safeTransferFrom(_currency, msg.sender, address(this), _amount);\r\n        }\r\n        // We will supplement more detail in V2\r\n        // 80% interest will go to Funding pool rewarder contract, 20% wil be burn\r\n        // If _collateral is true, then we transfer whole amount to funding pool\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IAssetManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\ninterface IAssetManager {\r\n    function isAvailableLoanAsset(address _asset) external returns (bool);\r\n\r\n    function isAvailableCollateralAsset(address _asset) external returns (bool);\r\n\r\n    function isValidAutomaticLoan(address _asset, uint256 _amountIn) external returns (bool);\r\n\r\n    function requestETH(address _to, uint256 _amount) external;\r\n\r\n    function requestToken(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function collectInstallment(\r\n        address _currency,\r\n        uint256 _amount,\r\n        uint256 _interest,\r\n        bool _collateral\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/interfaces/ITwapOraclePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.0;\r\n\r\ninterface ITwapOraclePriceFeed {\r\n    function token0() external returns (address);\r\n\r\n    function token1() external returns (address);\r\n\r\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\r\n}\r\n"
    },
    "contracts/libraries/TribeOneHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nlibrary TribeOneHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TribeOneHelper::safeTransfer: transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TribeOneHelper::transferFrom: transferFrom failed\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TribeOneHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n\r\n    function safeTransferAsset(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        if (token == address(0)) {\r\n            safeTransferETH(to, value);\r\n        } else {\r\n            safeTransfer(token, to, value);\r\n        }\r\n    }\r\n\r\n    function safeNFTApproveForAll(\r\n        address nft,\r\n        address operator,\r\n        bool approved\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('setApprovalForAll(address,bool)')));\r\n        (bool success, ) = nft.call(abi.encodeWithSelector(0xa22cb465, operator, approved));\r\n        require(success, \"TribeOneHelper::safeNFTApproveForAll: Failed\");\r\n    }\r\n\r\n    function safeTransferNFT(\r\n        address _nft,\r\n        address _from,\r\n        address _to,\r\n        bool isERC721,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        if (isERC721) {\r\n            IERC721(_nft).safeTransferFrom(_from, _to, _tokenId);\r\n        } else {\r\n            IERC1155(_nft).safeTransferFrom(_from, _to, _tokenId, 1, \"0x00\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev this function calculates expected price of NFT based on created LTV and fund amount,\r\n     * LTV: 10000 = 100%; _slippage: 10000 = 100%\r\n     */\r\n    function getExpectedPrice(\r\n        uint256 _fundAmount,\r\n        uint256 _percentage,\r\n        uint256 _slippage\r\n    ) internal pure returns (uint256) {\r\n        require(_percentage != 0, \"TribeOneHelper: percentage should not be 0\");\r\n        return (_fundAmount * (10000 + _slippage)) / _percentage;\r\n    }\r\n}\r\n"
    }
  }
}}