{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/persistent/external-positions/IExternalPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPosition Contract\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IExternalPosition {\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\n\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\n\n    function init(bytes memory) external;\n\n    function receiveCallFromVault(bytes memory) external;\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/IExternalPositionParser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPositionParser Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Interface for all external position parsers\ninterface IExternalPositionParser {\n    function parseAssetsForAction(\n        address _externalPosition,\n        uint256 _actionId,\n        bytes memory _encodedActionArgs\n    )\n        external\n        returns (\n            address[] memory assetsToTransfer_,\n            uint256[] memory amountsToTransfer_,\n            address[] memory assetsToReceive_\n        );\n\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\n        external\n        returns (bytes memory initArgs_);\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/IMapleLiquidityPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"../../../../../persistent/external-positions/IExternalPosition.sol\";\n\npragma solidity 0.6.12;\n\n/// @title IMapleLiquidityPosition Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMapleLiquidityPosition is IExternalPosition {\n    enum Actions {\n        Lend,\n        LendAndStake,\n        IntendToRedeem,\n        Redeem,\n        Stake,\n        Unstake,\n        UnstakeAndRedeem,\n        ClaimInterest,\n        ClaimRewards\n    }\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionDataDecoder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title MapleLiquidityPositionDataDecoder Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Abstract contract containing data decodings for MapleLiquidityPosition payloads\nabstract contract MapleLiquidityPositionDataDecoder {\n    /// @dev Helper to decode args used during the ClaimInterest action\n    function __decodeClaimInterestActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the ClaimRewards action\n    function __decodeClaimRewardsActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address rewardsContract_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the Lend action\n    function __decodeLendActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_, uint256 liquidityAssetAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the LendAndStake action\n    function __decodeLendAndStakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address pool_,\n            address rewardsContract_,\n            uint256 liquidityAssetAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the IntendToRedeem action\n    function __decodeIntendToRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the Redeem action\n    function __decodeRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_, uint256 liquidityAssetAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the Stake action\n    function __decodeStakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address rewardsContract_,\n            address pool_,\n            uint256 poolTokenAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the Unstake action\n    function __decodeUnstakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address rewardsContract_, uint256 poolTokenAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the UnstakeAndRedeem action\n    function __decodeUnstakeAndRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address pool_,\n            address rewardsContract_,\n            uint256 poolTokenAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionParser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"../../../../interfaces/IMaplePool.sol\";\nimport \"../../../../interfaces/IMaplePoolFactory.sol\";\nimport \"../../../../interfaces/IMapleMplRewardsFactory.sol\";\nimport \"../IExternalPositionParser.sol\";\nimport \"./IMapleLiquidityPosition.sol\";\nimport \"./MapleLiquidityPositionDataDecoder.sol\";\n\npragma solidity 0.6.12;\n\n/// @title MapleLiquidityPositionParser\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Parser for Maple Debt Positions\ncontract MapleLiquidityPositionParser is\n    MapleLiquidityPositionDataDecoder,\n    IExternalPositionParser\n{\n    address private immutable MAPLE_POOL_FACTORY;\n    address private immutable MAPLE_MPL_REWARDS_FACTORY;\n\n    constructor(address _maplePoolFactory, address _mapleMplRewardsFactory) public {\n        MAPLE_POOL_FACTORY = _maplePoolFactory;\n        MAPLE_MPL_REWARDS_FACTORY = _mapleMplRewardsFactory;\n    }\n\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\n    /// @param _actionId The _actionId for the callOnExternalPosition\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\n    /// @return assetsToTransfer_ The assets to be transferred from the Vault\n    /// @return amountsToTransfer_ The amounts to be transferred from the Vault\n    /// @return assetsToReceive_ The assets to be received at the Vault\n    function parseAssetsForAction(\n        address,\n        uint256 _actionId,\n        bytes memory _encodedActionArgs\n    )\n        external\n        override\n        returns (\n            address[] memory assetsToTransfer_,\n            uint256[] memory amountsToTransfer_,\n            address[] memory assetsToReceive_\n        )\n    {\n        __validateActionData(_actionId, _encodedActionArgs);\n\n        if (_actionId == uint256(IMapleLiquidityPosition.Actions.Lend)) {\n            (address pool, uint256 liquidityAssetAmount) = __decodeLendActionArgs(\n                _encodedActionArgs\n            );\n\n            assetsToTransfer_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n\n            assetsToTransfer_[0] = IMaplePool(pool).liquidityAsset();\n            amountsToTransfer_[0] = liquidityAssetAmount;\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.LendAndStake)) {\n            (address pool, , uint256 liquidityAssetAmount) = __decodeLendAndStakeActionArgs(\n                _encodedActionArgs\n            );\n\n            assetsToTransfer_ = new address[](1);\n            amountsToTransfer_ = new uint256[](1);\n\n            assetsToTransfer_[0] = IMaplePool(pool).liquidityAsset();\n            amountsToTransfer_[0] = liquidityAssetAmount;\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.Redeem)) {\n            (address pool, ) = __decodeRedeemActionArgs(_encodedActionArgs);\n\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = IMaplePool(pool).liquidityAsset();\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.UnstakeAndRedeem)) {\n            (address pool, , ) = __decodeUnstakeAndRedeemActionArgs(_encodedActionArgs);\n\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = IMaplePool(pool).liquidityAsset();\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.ClaimInterest)) {\n            address pool = __decodeClaimInterestActionArgs(_encodedActionArgs);\n\n            assetsToReceive_ = new address[](1);\n            assetsToReceive_[0] = IMaplePool(pool).liquidityAsset();\n        }\n\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\n    }\n\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\n    /// @return initArgs_ Parsed and encoded args for ExternalPositionProxy.init()\n    function parseInitArgs(address, bytes memory)\n        external\n        override\n        returns (bytes memory initArgs_)\n    {\n        return \"\";\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Runs validations before running a callOnExternalPosition.\n    function __validateActionData(uint256 _actionId, bytes memory _actionArgs) private view {\n        if (_actionId == uint256(IMapleLiquidityPosition.Actions.Lend)) {\n            (address pool, ) = __decodeLendActionArgs(_actionArgs);\n\n            __validatePool(pool);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.LendAndStake)) {\n            (address pool, address rewardsContract, ) = __decodeLendAndStakeActionArgs(\n                _actionArgs\n            );\n\n            __validatePool(pool);\n            __validateRewardsContract(rewardsContract);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.IntendToRedeem)) {\n            address pool = __decodeIntendToRedeemActionArgs(_actionArgs);\n\n            __validatePool(pool);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.Redeem)) {\n            (address pool, ) = __decodeRedeemActionArgs(_actionArgs);\n\n            __validatePool(pool);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.Stake)) {\n            (address rewardsContract, address pool, ) = __decodeStakeActionArgs(_actionArgs);\n\n            __validatePool(pool);\n            __validateRewardsContract(rewardsContract);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.Unstake)) {\n            (address rewardsContract, ) = __decodeUnstakeActionArgs(_actionArgs);\n\n            __validateRewardsContract(rewardsContract);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.UnstakeAndRedeem)) {\n            (address pool, address rewardsContract, ) = __decodeUnstakeAndRedeemActionArgs(\n                _actionArgs\n            );\n\n            __validatePool(pool);\n            __validateRewardsContract(rewardsContract);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.ClaimInterest)) {\n            address pool = __decodeClaimInterestActionArgs(_actionArgs);\n\n            __validatePool(pool);\n        } else if (_actionId == uint256(IMapleLiquidityPosition.Actions.ClaimRewards)) {\n            address rewardsContract = __decodeClaimRewardsActionArgs(_actionArgs);\n\n            __validateRewardsContract(rewardsContract);\n        }\n    }\n\n    // Validates that a pool has been deployed from the Maple pool factory\n    function __validatePool(address _pool) private view {\n        require(\n            IMaplePoolFactory(MAPLE_POOL_FACTORY).isPool(_pool),\n            \"__validatePool: Invalid pool\"\n        );\n    }\n\n    // Validates that a rewards contract has been deployed from the Maple rewards factory\n    function __validateRewardsContract(address _rewardsContract) private view {\n        require(\n            IMapleMplRewardsFactory(MAPLE_MPL_REWARDS_FACTORY).isMplRewards(_rewardsContract),\n            \"__validateRewardsContract: Invalid rewards contract\"\n        );\n    }\n}\n"
    },
    "contracts/release/interfaces/IMapleMplRewardsFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IMapleRewardsFactory Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMapleMplRewardsFactory {\n    function isMplRewards(address) external view returns (bool);\n}\n"
    },
    "contracts/release/interfaces/IMaplePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IMaplePool Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMaplePool {\n    function deposit(uint256) external;\n\n    function increaseCustodyAllowance(address, uint256) external;\n\n    function intendToWithdraw() external;\n\n    function liquidityAsset() external view returns (address);\n\n    function recognizableLossesOf(address) external returns (uint256);\n\n    function withdraw(uint256) external;\n\n    function withdrawFunds() external;\n\n    function withdrawableFundsOf(address) external returns (uint256);\n}\n"
    },
    "contracts/release/interfaces/IMaplePoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IMaplePoolFactory Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMaplePoolFactory {\n    function isPool(address) external view returns (bool);\n}\n"
    }
  }
}}