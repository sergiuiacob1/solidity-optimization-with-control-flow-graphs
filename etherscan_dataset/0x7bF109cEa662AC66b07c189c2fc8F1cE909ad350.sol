{{
  "language": "Solidity",
  "sources": {
    "AvvenireAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n *@title Avvenire ERC721 Contract\n */\npragma solidity ^0.8.4;\n\nimport \"AvvenireCitizensInterface.sol\";\nimport \"Ownable.sol\";\nimport \"Strings.sol\";\nimport \"ReentrancyGuard.sol\";\n\ncontract AvvenireAuction is Ownable, ReentrancyGuard {\n    // mint information\n    uint256 public maxPerAddressDuringWhiteList;\n\n    uint256 public amountForTeam; // Amount of NFTs for team\n    uint256 public amountForAuctionAndTeam; // Amount of NFTs for the team and auction\n    uint256 public collectionSize; // Total collection size\n\n    // AvvenireCitizensERC721 contract\n    AvvenireCitizensInterface avvenireCitizens;\n\n    struct SaleConfig {\n        uint32 auctionSaleStartTime; \n        uint32 publicSaleStartTime; \n        uint64 mintlistPrice; \n        uint64 publicPrice; \n        uint32 publicSaleKey; \n    }\n\n    SaleConfig public saleConfig; \n\n    // whitelist mapping (address => amount they can mint)\n    mapping(address => uint256) public allowlist;\n\n    // Mappings used to calculate the amount to refund a user from the dutch auctin\n    mapping(address => uint256) public totalPaidDuringAuction;\n    mapping(address => uint256) public numberMintedDuringAuction;\n\n    /**\n     * @notice Constructor calls on ERC721A constructor and sets the previously defined global variables\n     * @param maxPerAddressDuringWhiteList_ the number for the max batch size and max # of NFTs per address during the whiteList\n     * @param collectionSize_ the number of NFTs in the collection\n     * @param amountForTeam_ the number of NFTs for the team\n     * @param amountForAuctionAndTeam_ specifies total amount to auction + the total amount for the team\n     * @param avvenireCitizensContractAddress_ address for AvvenireCitizensERC721 contract \n     */\n    constructor(\n        uint256 maxPerAddressDuringWhiteList_,\n        uint256 collectionSize_,\n        uint256 amountForAuctionAndTeam_,\n        uint256 amountForTeam_,\n        address avvenireCitizensContractAddress_\n    ) {\n        maxPerAddressDuringWhiteList = maxPerAddressDuringWhiteList_;\n\n        amountForAuctionAndTeam = amountForAuctionAndTeam_;\n        amountForTeam = amountForTeam_;\n        collectionSize = collectionSize_;\n\n        // set avvenire citizens address\n        avvenireCitizens = AvvenireCitizensInterface(\n            avvenireCitizensContractAddress_\n        );\n\n        require(\n            amountForAuctionAndTeam_ <= collectionSize_, \n            \"larger collection size needed\"\n        );\n    }\n\n    /**\n      Modifier to make sure that the caller is a user and not another contract\n     */\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"The caller is another contract.\"); \n        _;\n    }\n\n    /**\n     * @notice function used to mint during the auction\n     * @param quantity is the quantity to mint\n     */\n    function auctionMint(uint256 quantity) external payable callerIsUser {\n        uint256 _saleStartTime = uint256(saleConfig.auctionSaleStartTime);\n\n        // Require that the current time is past the designated start time \n        require(\n            _saleStartTime != 0 && block.timestamp >= _saleStartTime,\n            \"sale has not started yet\"\n        );\n\n        // Require that quantity does not exceed designated amount \n        require(\n            avvenireCitizens.getTotalSupply() + quantity <=\n                amountForAuctionAndTeam,\n            \"not enough remaining reserved for auction to support desired mint amount\"\n        );\n\n        uint256 totalCost = getAuctionPrice() * quantity; // total amount of ETH needed for the transaction\n        avvenireCitizens.safeMint(msg.sender, quantity); \n\n        //Add to numberMinted mapping \n        numberMintedDuringAuction[msg.sender] =\n            numberMintedDuringAuction[msg.sender] +\n            quantity;\n\n        //Add to totalPaid mapping\n        totalPaidDuringAuction[msg.sender] =\n            totalPaidDuringAuction[msg.sender] +\n            totalCost;\n\n        refundIfOver(totalCost); // make sure to refund the excess\n\n    }\n\n    /**\n     * @notice function to mint for allow list\n     * @param quantity amount to mint for whitelisted users\n     */\n    function whiteListMint(uint256 quantity) external payable callerIsUser {\n        // Sets the price var to the mintlistPrice, which was set by endAuctionAndSetupNonAuctionSaleInfo(...)\n        // mintlistPrice will be set to 30% below the publicSalePrice\n        uint256 price = uint256(saleConfig.mintlistPrice);\n\n        require(price != 0, \"Allowlist sale has not begun yet\");\n\n        require(allowlist[msg.sender] > 0, \"not eligible for allowlist mint\"); \n\n        require(\n            avvenireCitizens.getTotalSupply() + quantity <= collectionSize,\n            \"Reached max supply\"\n        );\n        require(quantity <= allowlist[msg.sender], \"Can not mint this many\");\n\n        allowlist[msg.sender] = allowlist[msg.sender] - quantity;\n\n        avvenireCitizens.safeMint(msg.sender, quantity);\n\n        uint256 totalCost = quantity * price;\n\n        refundIfOver(totalCost);\n    }\n\n    /**\n     * @notice mint function for the public sale\n     * @param quantity quantity to mint\n     * @param callerPublicSaleKey the key for the public sale\n     */\n    function publicSaleMint(uint256 quantity, uint256 callerPublicSaleKey)\n        external\n        payable\n        callerIsUser\n    {\n        SaleConfig memory config = saleConfig; \n\n        uint256 publicSaleKey = uint256(config.publicSaleKey); // log the key\n        uint256 publicPrice = uint256(config.publicPrice); // get the price \n        uint256 publicSaleStartTime = uint256(config.publicSaleStartTime); \n\n        require(\n            publicSaleKey == callerPublicSaleKey,\n            \"called with incorrect public sale key\"\n        );\n\n        require(\n            isPublicSaleOn(publicPrice, publicSaleKey, publicSaleStartTime),\n            \"public sale has not begun yet\"\n        );\n        require(\n            avvenireCitizens.getTotalSupply() + quantity <= collectionSize,\n            \"reached max supply\"\n        );\n\n        avvenireCitizens.safeMint(msg.sender, quantity);\n\n        uint256 totalCost = publicPrice * quantity;\n        refundIfOver(totalCost);\n    }\n\n    /**\n     * @notice private function that refunds a user if msg.value > totalCost\n     * @param price current price\n     */\n    function refundIfOver(uint256 price) private {\n        require(msg.value >= price, \"Need to send more ETH\"); \n\n        if (msg.value > price) {\n            payable(msg.sender).transfer(msg.value - price);\n        }\n    }\n\n    /**\n     * @notice function that user can call to be refunded\n     */\n    function refundMe() external callerIsUser nonReentrant {\n        uint256 endingPrice = saleConfig.publicPrice;\n        require(endingPrice > 0, \"public price not set yet\");\n\n        uint256 actualCost = endingPrice *\n            numberMintedDuringAuction[msg.sender];\n\n        int256 reimbursement = int256(totalPaidDuringAuction[msg.sender]) -\n            int256(actualCost);\n\n        require(reimbursement > 0, \"You are not eligible for a refund\");\n\n        totalPaidDuringAuction[msg.sender] = 0;\n\n        (bool success, ) = msg.sender.call{value: uint256(reimbursement)}(\"\");\n        require(success, \"Refund failed\");\n    }\n\n    /**\n     * @notice function to refund user on the price they paid\n     * @param toRefund the address to refund\n     */\n    function refund(address toRefund) external onlyOwner nonReentrant {\n        uint256 endingPrice = saleConfig.publicPrice;\n        require(endingPrice > 0, \"public price not set yet\");\n\n        uint256 actualCost = endingPrice * numberMintedDuringAuction[toRefund];\n\n        int256 reimbursement = int256(totalPaidDuringAuction[toRefund]) -\n            int256(actualCost);\n        require(reimbursement > 0, \"Not eligible for a refund\");\n\n        totalPaidDuringAuction[toRefund] = 0;\n\n        (bool success, ) = toRefund.call{value: uint256(reimbursement)}(\"\");\n        require(success, \"Refund failed\");\n    }\n\n    /**\n     * @notice function that returns a boolean indicating whtether the public sale is enabled\n     * @param publicPriceWei must sell for more than 0\n     * @param publicSaleKey must have a key that is non-zero\n     * @param publicSaleStartTime  must be past the public start time\n     */\n    function isPublicSaleOn(\n        // check if the public sale is on\n        uint256 publicPriceWei,\n        uint256 publicSaleKey,\n        uint256 publicSaleStartTime\n    ) public view returns (bool) {\n        return\n            publicPriceWei != 0 && \n            publicSaleKey != 0 && \n            block.timestamp >= publicSaleStartTime; \n    }\n\n    uint256 public constant AUCTION_START_PRICE = .3 ether; // start price\n    uint256 public constant AUCTION_END_PRICE = 0.1 ether; // floor price\n    uint256 public constant AUCTION_PRICE_CURVE_LENGTH = 80 minutes; // total time of the auction\n    uint256 public constant AUCTION_DROP_INTERVAL = 20 minutes;\n\n    uint256 public constant AUCTION_DROP_PER_STEP =\n        (AUCTION_START_PRICE - AUCTION_END_PRICE) /\n            (AUCTION_PRICE_CURVE_LENGTH / AUCTION_DROP_INTERVAL); // how much the auction price will drop the price per unit of time\n\n    /**\n     * @notice Returns the current auction price. Uses block.timestamp to properly calculate price\n     */\n    function getAuctionPrice() public view returns (uint256) {\n        uint256 _saleStartTime = uint256(saleConfig.auctionSaleStartTime);\n        require(_saleStartTime != 0, \"auction has not started\");\n        if (block.timestamp < _saleStartTime) {\n            return AUCTION_START_PRICE; // if the timestamp is less than the start of the sale, no discount\n        }\n        if (block.timestamp - _saleStartTime >= AUCTION_PRICE_CURVE_LENGTH) {\n            return AUCTION_END_PRICE; // lower limit of the auction\n        } else {\n            uint256 steps = (block.timestamp - _saleStartTime) /\n                AUCTION_DROP_INTERVAL;\n            return AUCTION_START_PRICE - (steps * AUCTION_DROP_PER_STEP); // calculate the price based on how far away from the start we are\n        }\n    }\n\n    /**\n     * @notice function to set up the saleConfig variable; sets auctionSaleStartTime to 0\n     * @param mintlistPriceWei the mintlist price in wei\n     * @param publicPriceWei the public sale price in wei\n     * @param publicSaleStartTime the start time of the sale\n     */\n    function endAuctionAndSetupNonAuctionSaleInfo(\n        uint64 mintlistPriceWei,\n        uint64 publicPriceWei,\n        uint32 publicSaleStartTime\n    ) external onlyOwner {\n        saleConfig = SaleConfig(\n            0,\n            publicSaleStartTime,\n            mintlistPriceWei,\n            publicPriceWei,\n            saleConfig.publicSaleKey\n        );\n    }\n\n    /**\n     * @notice Sets the auction's starting time\n     * @param timestamp the starting time\n     */\n    function setAuctionSaleStartTime(uint32 timestamp) external onlyOwner {\n        // set the start time\n        saleConfig.auctionSaleStartTime = timestamp;\n    }\n\n    /**\n     * @notice sets the public sale key\n     */\n    function setPublicSaleKey(uint32 key) external onlyOwner {\n        // set the special key (not viewable to the public)\n        saleConfig.publicSaleKey = key;\n    }\n\n    /**\n     * @notice sets the whitelist w/ the respective amount of number of NFTs that each address can mint\n     * Requires that the addresses[] and numSlots[] are the same length\n     * @param addresses the whitelist addresses\n     */\n    function seedWhitelist(address[] memory addresses) external onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            allowlist[addresses[i]] = maxPerAddressDuringWhiteList;\n        }\n    }\n\n    /**\n     * @notice Removes a user from the whitelist\n     * @param toRemove the public address of the user\n     */\n    function removeFromWhitelist(address toRemove) external onlyOwner {\n        require(allowlist[toRemove] > 0, \"allowlist at 0 already\");\n        allowlist[toRemove] = 0;\n    }\n\n    /**\n     * @notice function to mint for the team\n     */\n    function teamMint(uint256 quantity) external onlyOwner {\n        require(avvenireCitizens.getTotalSupply() + quantity <= amountForTeam, \"NFTs already minted\");\n        avvenireCitizens.safeMint(msg.sender, quantity);  \n    }\n\n    /**\n     * @notice function to withdraw the money from the contract. Only callable by the owner\n     */\n    function withdrawQuantity(uint256 toWithdraw) external onlyOwner nonReentrant {\n        require (toWithdraw <= address(this).balance, \"quantity to withdraw > balance\");\n\n        (bool success, ) = msg.sender.call{value: toWithdraw}(\"\");\n        require(success, \"withdraw failed.\");\n    }\n\n    /**\n     * @notice function to withdraw the money from the contract. Only callable by the owner\n     */\n    function withdrawAll() external onlyOwner nonReentrant {\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success, \"withdraw failed.\");\n    }\n\n}\n"
    },
    "AvvenireCitizensInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Avvenire Citizens Interface\n */\npragma solidity ^0.8.4;\n\nimport \"AvvenireCitizenDataInterface.sol\";\nimport \"IERC721.sol\";\n\ninterface AvvenireCitizensInterface is AvvenireCitizenDataInterface, IERC721 {\n\n    // other functions\n    function getTotalSupply() external returns (uint256);\n\n    function requestChange(uint256) external payable;\n\n    function setCitizenData(Citizen memory, bool) external;\n\n    function bind(\n        uint256,\n        uint256,\n        Sex,\n        TraitType\n    ) external;\n\n    function safeMint(address, uint256) external;\n\n    function numberMinted(address) external returns (uint256);\n\n    function setOwnersExplicit(uint256) external;\n\n    function burn(uint256) external;\n\n    function numberBurned(address) external view returns (uint256);\n}\n\ninterface AvvenireTraitsInterface is AvvenireCitizenDataInterface, IERC721 {\n    function getTotalSupply() external returns (uint256);\n\n    function setTraitData(Trait memory, bool) external;\n\n    function safeMint(address, uint256) external;\n\n    function numberMinted(address) external returns (uint256);\n\n    function setOwnersExplicit(uint256) external;\n\n    function burn(uint256) external;\n\n    function numberBurned(address) external view returns (uint256);\n\n    function makeTraitTransferable(uint256, bool) external;\n\n    function makeTraitNonTransferrable(uint256) external;\n\n    function isOwnerOf(uint256) external view returns (address); \n\n}\n\ninterface AvvenireCitizensMappingsInterface is AvvenireCitizenDataInterface {\n\n    function getCitizen(uint256) external view returns (Citizen memory);\n\n    function getTrait(uint256) external view returns (Trait memory);\n\n    function setCitizen(Citizen memory) external;\n\n    function setTrait(Trait memory) external;\n\n    function setAllowedPermission(address, bool) external;\n\n    function setTraitFreedom(uint256, bool) external;\n\n    function isCitizenInitialized(uint256) external view returns (bool);\n\n    function setCitizenChangeRequest(uint256, bool) external;\n\n    function getCitizenChangeRequest(uint256) external view returns(bool);\n \n    function setTraitChangeRequest (uint256, bool) external;\n\n    function getTraitChangeRequest(uint256) external view returns(bool);\n\n    // mutability config stuct\n    struct MutabilityConfig {\n        bool mutabilityMode; // initially set the contract to be immutable, this will keep people from trying to use the function before it is released\n        // payment information\n        uint256 mutabilityCost; // the amount that it costs to make a change (initializes to 0)\n        // trading information\n        bool tradeBeforeChange; // initially set to false, don't want people to tokens that are pending changes\n    }\n\n    function getMutabilityMode() external view returns (bool);\n\n    function getTradeBeforeChange() external view returns (bool);\n\n    function getChangeCost() external view returns (uint256);\n\n}\n\n"
    },
    "AvvenireCitizenDataInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Avvenire Citizen Data Interface\n*/\npragma solidity ^0.8.4;\n\n\ninterface AvvenireCitizenDataInterface {\n    // traits are bound to sex for fitting\n    enum Sex {NULL, MALE, FEMALE}\n\n    // make an enumerable for trait types (meant to be overridden with traits from individual project)\n    enum TraitType {\n        NULL,\n        BACKGROUND,\n        BODY,\n        TATTOO,\n        EYES,\n        MOUTH,\n        MASK,\n        NECKLACE,\n        CLOTHING,\n        EARRINGS,\n        HAIR,\n        EFFECT\n    }\n\n    // struct for storing trait data for the citizen (used ONLY in the citizen struct)\n    struct Trait {\n        uint256 tokenId; // for mapping traits to their tokens\n        string uri;\n        bool free; // stores if the trait is free from the citizen (defaults to false)\n        bool exists; // checks existence (for minting vs transferring)\n        Sex sex;\n        TraitType traitType;\n        uint256 originCitizenId; // for mapping traits to their previous citizen owners\n    }\n\n    // struct for storing all the traits\n    struct Traits {\n        Trait background;\n        Trait body;\n        Trait tattoo;\n        Trait eyes;\n        Trait mouth;\n        Trait mask;\n        Trait necklace;\n        Trait clothing;\n        Trait earrings;\n        Trait hair;\n        Trait effect;\n    }\n\n\n    // struct for storing citizens\n    struct Citizen {\n        uint256 tokenId;\n        string uri;\n        bool exists; //  checks existence (for minting vs transferring)\n        Sex sex;\n        Traits traits;\n    }\n}\n"
    },
    "IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "AvvenireAuction.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}