{"DydxFlashloanBase.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n//import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nimport \"./ISoloMargin.sol\";\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ninterface ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    )\r\n        external;\r\n}\r\n\r\ncontract DydxFlashloanBase {\r\n    //using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i \u003c numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        //return amount.add(2);\r\n        return amount + 2;\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n"},"ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./Include.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in ``owner``\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n    external returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\r\n    /*\r\n     * bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027)) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it\u0027s supported.\r\n     */\r\n    mapping(bytes4 =\u003e bool) private _supportedInterfaces;\r\n\r\n\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n\r\n\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 =\u003e uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length \u003e index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity\u0027s\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -\u003e address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 =\u003e uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key\u0027s index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as \u0027swap and pop\u0027).\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \u0027if\u0027 statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length \u003e index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721UpgradeSafe is Initializable, ContextUpgradeSafe, ERC165UpgradeSafe, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address =\u003e EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 =\u003e address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address =\u003e mapping (address =\u003e bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string internal _name;\r\n\r\n    // Token symbol\r\n    string internal _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 =\u003e string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256(\u0027balanceOf(address)\u0027)) == 0x70a08231\r\n     *     bytes4(keccak256(\u0027ownerOf(uint256)\u0027)) == 0x6352211e\r\n     *     bytes4(keccak256(\u0027approve(address,uint256)\u0027)) == 0x095ea7b3\r\n     *     bytes4(keccak256(\u0027getApproved(uint256)\u0027)) == 0x081812fc\r\n     *     bytes4(keccak256(\u0027setApprovalForAll(address,bool)\u0027)) == 0xa22cb465\r\n     *     bytes4(keccak256(\u0027isApprovedForAll(address,address)\u0027)) == 0xe985e9c5\r\n     *     bytes4(keccak256(\u0027transferFrom(address,address,uint256)\u0027)) == 0x23b872dd\r\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256)\u0027)) == 0x42842e0e\r\n     *     bytes4(keccak256(\u0027safeTransferFrom(address,address,uint256,bytes)\u0027)) == 0xb88d4fde\r\n     *\r\n     *     =\u003e 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256(\u0027name()\u0027)) == 0x06fdde03\r\n     *     bytes4(keccak256(\u0027symbol()\u0027)) == 0x95d89b41\r\n     *     bytes4(keccak256(\u0027tokenURI(uint256)\u0027)) == 0xc87b56dd\r\n     *\r\n     *     =\u003e 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256(\u0027totalSupply()\u0027)) == 0x18160ddd\r\n     *     bytes4(keccak256(\u0027tokenOfOwnerByIndex(address,uint256)\u0027)) == 0x2f745c59\r\n     *     bytes4(keccak256(\u0027tokenByIndex(uint256)\u0027)) == 0x4f6ccce7\r\n     *\r\n     *     =\u003e 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n\r\n    function __ERC721_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name.\r\n     * @return string representing the token name\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol.\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the URI for a given token ID. May return an empty string.\r\n     *\r\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\r\n     * token\u0027s own URI (via {_setTokenURI}).\r\n     *\r\n     * If there is a base URI but no token URI, the token\u0027s ID will be used as\r\n     * its URI when appending it to the base URI. This pattern for autogenerated\r\n     * token URIs can lead to large gas savings.\r\n     *\r\n     * .Examples\r\n     * |===\r\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/\"\r\n     * | \"123\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/\"\r\n     * | \"\"\r\n     * | \"token.uri/\u003ctokenId\u003e\"\r\n     * |===\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(_baseURI).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length \u003e 0) {\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token\u0027s URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract.\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens.\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param operator operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token.\r\n     *\r\n     * Reverts if the token ID does not exist.\r\n     *\r\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\r\n     * `https://api.myproject.com/token/\u003cid\u003e`), use {_setBaseURI} to store\r\n     * it and save gas.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length \u003e 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - when `from` is zero, `tokenId` will be minted for `to`.\r\n     * - when `to` is zero, ``from``\u0027s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n\r\n    uint256[41] private __gap;\r\n}\r\n"},"Include.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract PlaceHolder {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () virtual payable external {\r\n    _fallback();\r\n  }\r\n  \r\n  receive () virtual payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() virtual internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn\u0027t return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don\u0027t know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() virtual internal {\r\n      \r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    //if(OpenZeppelinUpgradesAddress.isContract(msg.sender) \u0026\u0026 msg.data.length == 0 \u0026\u0026 gasleft() \u003c= 2300)         // for receive ETH only from other contract\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) \u0026\u0026 msg.data.length == 0)         // for receive ETH only from other contract\r\n        return;\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\nabstract contract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() virtual override internal view returns (address impl) {\r\n    bytes32 slot = _IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(newImplementation == address(0) || OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = _IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() virtual override internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    //super._willFallback();\r\n  }\r\n}\r\n\r\ninterface IAdminUpgradeabilityProxyView {\r\n  function admin() external view returns (address);\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length \u003e 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n  \r\n  //function _willFallback() virtual override internal {\r\n    //super._willFallback();\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract __BaseAdminUpgradeabilityProxy__ is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  //modifier ifAdmin() {\r\n  //  if (msg.sender == _admin()) {\r\n  //    _;\r\n  //  } else {\r\n  //    _fallback();\r\n  //  }\r\n  //}\r\n  modifier ifAdmin() {\r\n    require (msg.sender == _admin(), \"only admin\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  //function admin() external ifAdmin returns (address) {\r\n  //  return _admin();\r\n  //}\r\n  function __admin__() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  //function implementation() external ifAdmin returns (address) {\r\n  //  return _implementation();\r\n  //}\r\n  function __implementation__() external view returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  //function changeAdmin(address newAdmin) external ifAdmin {\r\n  //  require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n  //  emit AdminChanged(_admin(), newAdmin);\r\n  //  _setAdmin(newAdmin);\r\n  //}\r\n  function __changeAdmin__(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  //function upgradeTo(address newImplementation) external ifAdmin {\r\n  //  _upgradeTo(newImplementation);\r\n  //}\r\n  function __upgradeTo__(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  //function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n  //  _upgradeTo(newImplementation);\r\n  //  (bool success,) = newImplementation.delegatecall(data);\r\n  //  require(success);\r\n  //}\r\n  function __upgradeToAndCall__(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  //function _willFallback() virtual override internal {\r\n  //  require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n  //  //super._willFallback();\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract __AdminUpgradeabilityProxy__ is __BaseAdminUpgradeabilityProxy__, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  //function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n  //  super._willFallback();\r\n  //}\r\n}  \r\n\r\ncontract __AdminUpgradeabilityProxy0__ is __BaseAdminUpgradeabilityProxy__, UpgradeabilityProxy {\r\n  constructor() UpgradeabilityProxy(address(0), \"\") public {\r\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n    _setAdmin(msg.sender);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length \u003e 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n  /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface IBeacon {\r\n    function governor() external view returns (address);\r\n    function __admin__() external view returns (address);\r\n    function implementation() external view returns (address);\r\n    function implementations(bytes32 shard) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title BeaconProxy\r\n * @dev This contract implements a proxy that \r\n * it is deploied by ProxyBeacon, \r\n * and it\"s implementation is stored in beacon.\r\n */\r\ncontract BeaconProxy is Proxy {\r\n    \r\n  /**\r\n   * @dev Storage slot with the address of the ProxyBeacon.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n  bytes32 internal constant _SHARD_SLOT  = 0xaaae0bca7ee6d7a0887fc381d821ed8229b96ca9503d8457f880ab5f52323504;      // bytes32(uint256(keccak256(\"eip1967.proxy.shard\")) - 1)\r\n\r\n  function _shard() virtual internal view returns (bytes32 shard_) {\r\n    bytes32 slot = _SHARD_SLOT;\r\n    assembly {  shard_ := sload(slot)  }\r\n  }\r\n  \r\n  function _setShard(bytes32 shard_) internal {\r\n    bytes32 slot = _SHARD_SLOT;\r\n    assembly {  sstore(slot, shard_)  }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the beacon address of the BeaconProxy.\r\n   * @param newBeacon Address of the new beacon.\r\n   */\r\n  function _setBeacon(address newBeacon) internal {\r\n    require(newBeacon == address(0) || OpenZeppelinUpgradesAddress.isContract(newBeacon), \"Cannot set a beacon to a non-contract address\");\r\n\r\n    bytes32 slot = _BEACON_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newBeacon)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the beacon.\r\n   * @return beacon_ Address of the beacon.\r\n   */\r\n  function _beacon() internal view returns (address beacon_) {\r\n    bytes32 slot = _BEACON_SLOT;\r\n    assembly {\r\n      beacon_ := sload(slot)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() virtual override internal view returns (address) {\r\n    address beacon_ = _beacon();\r\n    bytes32 shard_ = _shard();\r\n    if(OpenZeppelinUpgradesAddress.isContract(beacon_))\r\n        if(shard_ != 0x0)\r\n            return IBeacon(beacon_).implementations(shard_);\r\n        else\r\n            return IBeacon(beacon_).implementation();\r\n    else\r\n        return address(0);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableBeaconProxy\r\n * @dev Extends BeaconProxy with an initializer for initializing\r\n * beacon and init data.\r\n */\r\ncontract InitializableBeaconProxy is BeaconProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param beacon Address of the initial beacon.\r\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function __InitializableBeaconProxy_init(address beacon, bytes32 shard, bytes memory data) external payable {\r\n    address beacon_ = _beacon();\r\n    require(beacon_ == address(0) || msg.sender == beacon_ || msg.sender == IBeacon(beacon_).governor() || msg.sender == IBeacon(beacon_).__admin__());\r\n    assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\r\n    assert(_SHARD_SLOT  == bytes32(uint256(keccak256(\"eip1967.proxy.shard\")) - 1));\r\n    _setBeacon(beacon);\r\n    _setShard(shard);\r\n    if(data.length \u003e 0) {\r\n      (bool success,) = _implementation().delegatecall(data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\ncontract __InitializableAdminUpgradeabilityBeaconProxy__ is __BaseAdminUpgradeabilityProxy__, BeaconProxy {\r\n  function __InitializableAdminUpgradeabilityBeaconProxy_init__(address logic, address admin, address beacon, bytes32 shard, bytes memory data) public payable {\r\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\r\n    assert(_ADMIN_SLOT          == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\r\n    assert(_BEACON_SLOT         == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\r\n    assert(_SHARD_SLOT          == bytes32(uint256(keccak256(\"eip1967.proxy.shard\")) - 1));\r\n    address admin_ = _admin();\r\n    require(admin_ == address(0) || msg.sender == admin_);\r\n    _setAdmin(admin);\r\n    _setImplementation(logic);\r\n    _setBeacon(beacon);\r\n    _setShard(shard);\r\n    if(data.length \u003e 0) {\r\n      (bool success,) = _implementation().delegatecall(data);\r\n      require(success);\r\n    }\r\n  }\r\n  \r\n  function _implementation() virtual override(BaseUpgradeabilityProxy, BeaconProxy) internal view returns (address impl) {\r\n    impl = BeaconProxy._implementation();\r\n    if(impl == address(0))\r\n        impl = BaseUpgradeabilityProxy._implementation();\r\n  }\r\n}\r\n\r\ncontract __AdminUpgradeabilityBeaconProxy__ is __InitializableAdminUpgradeabilityBeaconProxy__ {\r\n  constructor(address logic, address admin, address beacon, bytes32 shard, bytes memory data) public payable {\r\n    __InitializableAdminUpgradeabilityBeaconProxy_init__(logic, admin, beacon, shard, data);\r\n  }\r\n}\r\n\r\ncontract __AdminUpgradeabilityBeaconProxy0__ is __InitializableAdminUpgradeabilityBeaconProxy__ {\r\n  constructor() public {\r\n    __InitializableAdminUpgradeabilityBeaconProxy_init__(address(0), msg.sender, address(0), 0, \"\");\r\n  }\r\n}\r\n\r\n\r\nlibrary Clones {\r\n\r\n    function isClone(address target, address query) internal view returns (bool result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\r\n            mstore(add(ptr, 0xa), targetBytes)\r\n            mstore(add(ptr, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\r\n            let other := add(ptr, 0x40)\r\n            extcodecopy(query, other, 0, 0x2d)\r\n            result := and(\r\n                eq(mload(ptr), mload(other)),\r\n                eq(mload(add(ptr, 0xd)), mload(add(other, 0xd)))\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\nlibrary Config {\r\n  bytes32 internal constant CONFIG_SLOT        = 0x54c601f62ced84cb3960726428d8409adc363a3fa5c7abf6dba0c198dcc43c14;     // bytes32(uint256(keccak256(\"eip1967.proxy.config\")) - 1));\r\n\r\n  function config() internal pure returns (mapping (bytes32 =\u003e uint) storage map) {\r\n    assembly {  map_slot := CONFIG_SLOT   }\r\n  }\r\n\r\n  function configA() internal pure returns (mapping (bytes32 =\u003e address) storage map) {\r\n    assembly {  map_slot := CONFIG_SLOT   }\r\n  }\r\n\r\n  function get(bytes32 key) internal view returns (uint) {\r\n    return config()[key];\r\n  }\r\n\r\n  function get(bytes32 key, uint index) internal view returns (uint) {\r\n    return config()[bytes32(uint(key) ^ index)];\r\n  }\r\n\r\n  function get(bytes32 key, address addr) internal view returns (uint) {\r\n    return config()[bytes32(uint(key) ^ uint(addr))];\r\n  }\r\n\r\n  function getA(bytes32 key) internal view returns (address) {\r\n    return configA()[key];\r\n  }\r\n\r\n  function getA(bytes32 key, uint index) internal view returns (address) {\r\n    return configA()[bytes32(uint(key) ^ index)];\r\n  }\r\n\r\n  function getA(bytes32 key, address addr) internal view returns (address) {\r\n    return configA()[bytes32(uint(key) ^ uint(addr))];\r\n  }\r\n\r\n  function set(bytes32 key, uint value) internal {\r\n    config()[key] = value;\r\n  }\r\n\r\n  function set(bytes32 key, uint index, uint value) internal {\r\n    config()[bytes32(uint(key) ^ index)] = value;\r\n  }\r\n\r\n  function set(bytes32 key, address addr, uint value) internal {\r\n    config()[bytes32(uint(key) ^ uint(addr))] = value;\r\n  }\r\n\r\n  function setA(bytes32 key, address value) internal {\r\n    configA()[key] = value;\r\n  }\r\n\r\n  function setA(bytes32 key, uint index, address value) internal {\r\n    configA()[bytes32(uint(key) ^ index)] = value;\r\n  }\r\n\r\n  function setA(bytes32 key, address addr, address value) internal {\r\n    configA()[bytes32(uint(key) ^ uint(addr))] = value;\r\n  }\r\n\r\n  // bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\r\n  bytes32 internal constant _ADMIN_SLOT_ = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  function admin() internal view returns (address adm) {\r\n    bytes32 slot = _ADMIN_SLOT_;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n    \r\n}\r\n\r\ncontract Setable {\r\n  bytes32 internal constant _governor_  = \"governor\";\r\n\r\n  constructor() public {\r\n    Config.setA(_governor_, msg.sender);\r\n  }\r\n\r\n  function _governance() internal view {\r\n    require(msg.sender == Config.getA(_governor_) || msg.sender == Config.admin());\r\n  }\r\n  \r\n  modifier governance() virtual {\r\n    _governance();\r\n    _;\r\n  }\r\n}\r\n\r\ncontract Sets is Setable {\r\n  struct KeyValue {\r\n    bytes32 key;\r\n    uint    value;\r\n  }\r\n\r\n  function sets_(KeyValue[] calldata s) external governance {\r\n    for(uint i=0; i\u003cs.length; i++)\r\n      Config.set(s[i].key, s[i].value);\r\n  }\r\n\r\n  function gets(bytes32[] calldata keys) external view returns (uint[] memory values){\r\n    values = new uint[](keys.length);\r\n    for(uint i=0; i\u003ckeys.length; i++)\r\n      values[i] = Config.get(keys[i]);\r\n  }\r\n}\r\n\r\nlibrary IDelegateStaticCall {\r\n  function delegatestaticcall(address ex, bytes memory data) external view returns (bool, bytes memory) {\r\n    return ex.staticcall(data);\r\n  }\r\n  function delegatestaticcall(bytes memory data) external view returns (bool, bytes memory) {\r\n    return address(this).staticcall(data);\r\n  }\r\n}\r\n\r\nlibrary DelegateStaticCall {\r\n  function delegatestaticcall(address ex, bytes memory data) external returns (bool, bytes memory) {\r\n    return ex.delegatecall(data);\r\n  }\r\n}\r\n\r\ncontract Extend {\r\n  bytes32 internal constant _extend_        = \"extend\";\r\n  string  internal constant ERROR_FALLBACK  = \"eip1967.proxy.error.fallback\";\r\n  //bytes32 internal constant ERROR_FALLBACK_HASH = 0xa4ed89f730f2683d5e2b90496ac1d7ea6d9032c060f8c649055bab6502c3e570;     // keccak256(abi.encodeWithSignature(\"Error(string)\", ERROR_FALLBACK))\r\n\r\n\r\n  //bytes32 internal constant EXTENDS_SLOT        = 0xeecbcf0201b7ee036ec6ec9c93727f8f360e2af38caa9978f4801d35c2f82997;     // bytes32(uint256(keccak256(\"eip1967.proxy.extends\")) - 1));\r\n  //\r\n  //function extends() virtual internal pure returns (mapping (bytes4 =\u003e address) storage map) {\r\n  //  assembly {  map_slot := EXTENDS_SLOT   }\r\n  //}\r\n\r\n  function _getExtend(bytes4 sig) virtual internal view returns (address) {\r\n    return Config.getA(_extend_, uint32(sig));\r\n  }\r\n  \r\n  function _setExtend(bytes4 sig, address ex) virtual internal {\r\n    Config.setA(_extend_, uint32(sig), ex);\r\n  }\r\n}\r\n\r\ncontract Extendable is Sets, Extend {\r\n  //constructor(address ex0, bytes memory data) public {\r\n  //  _setExtend(0x00000000, ex0);\r\n  //  if(data.length \u003e 0) {\r\n  //    (bool success,) = ex0.delegatecall(data);\r\n  //    require(success);\r\n  //  }\r\n  //}\r\n\r\n  modifier viewExtend virtual {\r\n    _viewExtend();\r\n    _;\r\n  }\r\n\r\n  modifier extend virtual {\r\n    _extend();\r\n    _;\r\n  }\r\n\r\n  function _viewExtend() virtual internal view {\r\n    //if(msg.sender == address(this))\r\n    //  return;\r\n    address ex = _getExtend(0xffffffff);\r\n    if(ex == address(0))\r\n      ex = _getExtend(msg.sig);\r\n    if(OpenZeppelinUpgradesAddress.isContract(ex)) {\r\n      (bool success, bytes memory r) = IDelegateStaticCall.delegatestaticcall(ex, msg.data);\r\n      if(success)\r\n        assembly {  return(add(r, 32), returndatasize())  }\r\n      else\r\n        assembly {  revert(add(r, 32), returndatasize())  }\r\n    } else if(ex == 0x000000000000000000000000000000000000dEaD)\r\n      revert(\"obsolete\");\r\n  }\r\n  \r\n  function _extend() virtual internal {\r\n    address ex = _getExtend(0xffffffff);\r\n    if(ex == address(0))\r\n      ex = _getExtend(msg.sig);\r\n    return _extend(ex);\r\n  }\r\n\r\n  function _extend0() virtual internal {\r\n    address ex = address(0);\r\n    address ex1 = _getExtend(0xffffffff);\r\n    if(ex1 == address(0))\r\n      ex = _getExtend(msg.sig);\r\n    if(ex == address(0)) {\r\n      ex = _getExtend(0);\r\n      if(ex == address(0)) {\r\n        ex = ex1;\r\n        require(ex != address(0), ERROR_FALLBACK);\r\n      }\r\n    }\r\n    return _extend(ex);\r\n  }\r\n\r\n  function _extend(address ex) internal {\r\n    if(OpenZeppelinUpgradesAddress.isContract(ex)) {\r\n      (bool success, bytes memory r) = ex.delegatecall(msg.data);\r\n      if(success)\r\n        assembly {  return(add(r, 32), returndatasize())  }\r\n      else\r\n        assembly {  revert(add(r, 32), returndatasize())  }\r\n    } else if(ex == 0x000000000000000000000000000000000000dEaD)\r\n      revert(\"obsolete\");\r\n  }\r\n\r\n  struct SigEx {\r\n    bytes4  sig;\r\n    address ex;\r\n  }\r\n  \r\n  function setExtends_(SigEx[] memory s) external governance {\r\n    for(uint i=0; i\u003cs.length; i++)\r\n      _setExtend(s[i].sig, s[i].ex);\r\n  }\r\n\r\n  fallback () virtual payable external {\r\n    _extend0();\r\n  }\r\n  \r\n  receive () virtual payable external {\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) \u0026\u0026 msg.data.length == 0 \u0026\u0026 gasleft() \u003c= 2300)         // for receive ETH only from other contract\r\n        return;\r\n    _extend0();\r\n  }\r\n}\r\n\r\ncontract Extended is Setable, Extend {\r\n  function _callback(bytes memory data) internal returns(bytes memory rdata) {\r\n    bytes4 sig = abi.decode(data, (bytes4));\r\n    address ex = _getExtend(sig);\r\n    if(ex != address(0))\r\n      _setExtend(sig, address(0));\r\n    address ex1 = _getExtend(0xffffffff);\r\n    if(ex1 != address(0))\r\n      _setExtend(0xffffffff, address(0));\r\n    bool success;\r\n    (success, rdata) = address(this).delegatecall(data);\r\n    if(!success)\r\n      assembly {  revert(add(data, 32), returndatasize()) }\r\n    if(ex != address(0))\r\n      _setExtend(sig, ex);\r\n    if(ex1 != address(0))\r\n      _setExtend(0xffffffff, ex1);\r\n  }\r\n\r\n  fallback () virtual payable external {\r\n     revert(ERROR_FALLBACK);\r\n  }\r\n\r\n  receive () virtual payable external {\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) \u0026\u0026 msg.data.length == 0)         // for receive ETH only from other contract\r\n      return;\r\n    revert(ERROR_FALLBACK);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction\u0027s gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) \u003c\u003c (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx \u003e= 0x100000000000000000000000000000000) {\r\n            xx \u003e\u003e= 128;\r\n            r \u003c\u003c= 64;\r\n        }\r\n        if (xx \u003e= 0x10000000000000000) {\r\n            xx \u003e\u003e= 64;\r\n            r \u003c\u003c= 32;\r\n        }\r\n        if (xx \u003e= 0x100000000) {\r\n            xx \u003e\u003e= 32;\r\n            r \u003c\u003c= 16;\r\n        }\r\n        if (xx \u003e= 0x10000) {\r\n            xx \u003e\u003e= 16;\r\n            r \u003c\u003c= 8;\r\n        }\r\n        if (xx \u003e= 0x100) {\r\n            xx \u003e\u003e= 8;\r\n            r \u003c\u003c= 4;\r\n        }\r\n        if (xx \u003e= 0x10) {\r\n            xx \u003e\u003e= 4;\r\n            r \u003c\u003c= 2;\r\n        }\r\n        if (xx \u003e= 0x8) {\r\n            r \u003c\u003c= 1;\r\n        }\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1;\r\n        r = (r + x / r) \u003e\u003e 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r \u003c r1 ? r : r1);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e b ? a - b : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function div0(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return b == 0 ? 0 : a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003e 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\u0027\u0027)`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    uint256 internal _cap;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function __ERC20Capped_init(string memory name, string memory symbol, uint256 cap) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n        __ERC20Capped_init_unchained(cap);\r\n    }\r\n\r\n    function __ERC20Capped_init_unchained(uint256 cap) internal initializer {\r\n        require(cap \u003e 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token\u0027s total supply.\r\n     */\r\n    function cap() virtual public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() virtual public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() virtual public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() virtual public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public virtual override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) virtual override public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if(sender != _msgSender() \u0026\u0026 _allowances[sender][_msgSender()] != uint(-1))\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        if (_cap \u003e 0) { // When Capped\r\n            require(_totalSupply.add(amount) \u003c= _cap, \"ERC20Capped: cap exceeded\");\r\n        }\r\n\t\t\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[43] private __gap;\r\n}\r\n\r\n\r\ncontract ERC20Permit is ERC20UpgradeSafe {\t\t// ERC2612\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    mapping (address =\u003e uint) public nonces;\r\n    \r\n    function __ERC20Permit_init_unchained() internal initializer {\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), keccak256(bytes(\"1\")), _chainId(), address(this)));\r\n    }\r\n    \r\n    function _chainId() internal pure returns (uint id) {\r\n        assembly { id := chainid() }\r\n    }\r\n    \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual external {\r\n      return _permit(owner, spender, value, deadline, v, r, s);\r\n    }\r\n    function _permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual internal {\r\n        require(deadline \u003e= block.timestamp, \"permit EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) \u0026\u0026 recoveredAddress == owner, \"permit INVALID_SIGNATURE\");\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    uint256[48] private __gap;\r\n}\r\n\r\n\r\nlibrary $M {\r\n    function msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    function chainId() internal pure returns (uint id) {\r\n        assembly { id := chainid() }\r\n    }\r\n}\r\n\r\n\r\nstruct ERC20Stru {\r\n    mapping (address =\u003e uint256) balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) allowances;\r\n    uint256 totalSupply;\r\n\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n\r\n    uint256 cap;\r\n\r\n    bytes32 DOMAIN_SEPARATOR;\r\n    mapping (address =\u003e uint) nonces;\r\n}\r\n\r\nlibrary ERC20Lib {\r\n    using SafeMath for uint256;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n    \r\n    function ERC20_init(ERC20Stru storage $, string memory name, string memory symbol) internal {\r\n        ERC20_init_unchained($, name, symbol);\r\n    }\r\n    \r\n    function ERC20_init_unchained(ERC20Stru storage $, string memory name, string memory symbol) internal {\r\n        $.name = name;\r\n        $.symbol = symbol;\r\n        $.decimals = 18;\r\n    }\r\n    \r\n    function ERC20Capped_init(ERC20Stru storage $, string memory name, string memory symbol, uint256 cap) internal {\r\n        ERC20_init_unchained($, name, symbol);\r\n        ERC20Capped_init_unchained($, cap);\r\n    }\r\n    \r\n    function ERC20Capped_init_unchained(ERC20Stru storage $, uint256 cap) internal {\r\n        require(cap \u003e 0, \"ERC20Capped: cap is 0\");\r\n        $.cap = cap;\r\n    }\r\n    \r\n    function ERC20Permit_init(ERC20Stru storage $, string memory name, string memory symbol, uint256 cap) internal {\r\n        ERC20_init_unchained($, name, symbol);\r\n        ERC20Capped_init_unchained($, cap);\r\n        ERC20Permit_init_unchained($);\r\n    }\r\n    \r\n    function ERC20Permit_init_unchained(ERC20Stru storage $) internal {\r\n        $.DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes($.name)), keccak256(bytes(\"1\")), $M.chainId(), address(this)));\r\n    }\r\n    \r\n    function setupDecimals(ERC20Stru storage $, uint8 decimals) internal {\r\n        $.decimals = decimals;\r\n    }\r\n\r\n    function transfer(ERC20Stru storage $, address recipient, uint256 amount) internal returns (bool) {\r\n        transfer($, $M.msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(ERC20Stru storage $, address owner, address spender) internal view returns (uint256) {\r\n        return $.allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(ERC20Stru storage $, address spender, uint256 amount) internal returns (bool) {\r\n        approve($, $M.msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(ERC20Stru storage $, address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        transfer($, sender, recipient, amount);\r\n        if(sender != $M.msgSender() \u0026\u0026 $.allowances[sender][$M.msgSender()] != uint(-1))\r\n            approve($, sender, $M.msgSender(), $.allowances[sender][$M.msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(ERC20Stru storage $, address spender, uint256 addedValue) internal returns (bool) {\r\n        approve($, $M.msgSender(), spender, $.allowances[$M.msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(ERC20Stru storage $, address spender, uint256 subtractedValue) internal returns (bool) {\r\n        approve($, $M.msgSender(), spender, $.allowances[$M.msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function transfer(ERC20Stru storage $, address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        //_beforeTokenTransfer($, sender, recipient, amount);\r\n\r\n        $.balances[sender] = $.balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        $.balances[recipient] = $.balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function mint(ERC20Stru storage $, address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        if ($.cap \u003e 0) { // When Capped\r\n            require($.totalSupply.add(amount) \u003c= $.cap, \"ERC20Capped: cap exceeded\");\r\n        }\r\n\t\t\r\n        //_beforeTokenTransfer($, address(0), account, amount);\r\n\r\n        $.totalSupply = $.totalSupply.add(amount);\r\n        $.balances[account] = $.balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(ERC20Stru storage $, address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        //_beforeTokenTransfer($, account, address(0), amount);\r\n\r\n        $.balances[account] = $.balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        $.totalSupply = $.totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function approve(ERC20Stru storage $, address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        $.allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function permit(ERC20Stru storage $, address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) internal {\r\n        require(deadline \u003e= block.timestamp, \"permit EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                $.DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, $.nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) \u0026\u0026 recoveredAddress == owner, \"permit INVALID_SIGNATURE\");\r\n        approve($, owner, spender, value);\r\n    }\r\n\r\n    //function _beforeTokenTransfer(ERC20Stru storage $, address from, address to, uint256 amount) internal { }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \"safeIncreaseAllowance\" and \"safeDecreaseAllowance\"\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeApprove_(IERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length \u003e 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Governable is Initializable {\r\n    address public governor;\r\n\r\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev Contract initializer.\r\n     * called once by the beacon at time of deployment\r\n     */\r\n    function __Governable_init_unchained(address governor_) virtual internal initializer {\r\n        governor = governor_;\r\n        emit GovernorshipTransferred(address(0), governor);\r\n    }\r\n\r\n    modifier governance() virtual {\r\n        require(msg.sender == governor || msg.sender == Config.admin());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to relinquish control of the contract.\r\n     * @notice Renouncing to governorship will leave the contract without an governor.\r\n     * It will not be possible to call the functions with the `governance`\r\n     * modifier anymore.\r\n     */\r\n    function renounceGovernorship_() public governance {\r\n        emit GovernorshipTransferred(governor, address(0));\r\n        governor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function transferGovernorship_(address newGovernor) public governance {\r\n        _transferGovernorship(newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function _transferGovernorship(address newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit GovernorshipTransferred(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n}\r\n\r\n\r\ncontract Configurable is Governable {\r\n    mapping (bytes32 =\u003e uint) internal config;\r\n    \r\n    function getConfig(bytes32 key) public view returns (uint) {\r\n        return config[key];\r\n    }\r\n    function getConfigI(bytes32 key, uint index) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ index)];\r\n    }\r\n    function getConfigA(bytes32 key, address addr) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ uint(addr))];\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint value) internal {\r\n        if(config[key] != value)\r\n            config[key] = value;\r\n    }\r\n    function _setConfig(bytes32 key, uint index, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function _setConfig(bytes32 key, address addr, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n\r\n    function setConfig_(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfigI_(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfigA_(bytes32 key, address addr, uint value) public governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}\r\n\r\n\r\ncontract Rescue is Governable, Setable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    modifier governance() override(Governable, Setable) {\r\n        require(msg.sender == governor || msg.sender == Config.admin() || msg.sender == Config.getA(_governor_));\r\n        _;\r\n    }\r\n\r\n    function rescue(address payable _dst, uint _amt) external governance {\r\n        _dst.transfer(Math.min(_amt, address(this).balance));\r\n    }\r\n\r\n    function rescueTokens(address _token, address _dst, uint _amt) external governance {\r\n        uint balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(_dst, Math.min(_amt, balance));\r\n    }\r\n}\r\n"},"ISoloMargin.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 =\u003e Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower\u0027s interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId =\u003e Market\r\n        mapping(uint256 =\u003e Market) markets;\r\n        // owner =\u003e account number =\u003e Account\r\n        mapping(address =\u003e mapping(uint256 =\u003e Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address =\u003e mapping(address =\u003e bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address =\u003e bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ISoloMargin { //\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function getIsGlobalOperator(address operator) public virtual view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        public virtual;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() public virtual view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        public virtual;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        public\r\n        virtual\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) public virtual;\r\n\r\n    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\r\n\r\n    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        public\r\n        virtual\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() public virtual;\r\n\r\n    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) public virtual;\r\n\r\n    function getMarketPrice(uint256 marketId) public virtual view returns (address);\r\n\r\n    function owner() public virtual view returns (address);\r\n\r\n    function isOwner() public virtual view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        public virtual\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public virtual;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) public virtual;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\r\n\r\n    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) public virtual view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\r\n\r\n    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\r\n\r\n    function transferOwnership(address newOwner) public virtual;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        public\r\n        virtual\r\n        view\r\n        returns (Interest.Rate memory);\r\n}\r\n"},"IWETHGateway.sol":{"content":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETHGateway {\r\n  /**\r\n   * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (bTokens)\r\n   * is minted.\r\n   * @param onBehalfOf address of the user who will receive the bTokens representing the deposit\r\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\r\n   **/\r\n  function depositETH(address onBehalfOf, uint16 referralCode) external payable;\r\n\r\n  /**\r\n   * @dev withdraws the WETH _reserves of msg.sender.\r\n   * @param amount amount of bWETH to withdraw and receive native ETH\r\n   * @param to address of the user who will receive native ETH\r\n   */\r\n  function withdrawETH(uint256 amount, address to) external;\r\n\r\n  /**\r\n   * @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `LendPool.borrow`.\r\n   * @param amount the amount of ETH to borrow\r\n   * @param nftAsset The address of the underlying NFT used as collateral\r\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\r\n   * @param onBehalfOf Address of the user who will receive the loan. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards\r\n   */\r\n  function borrowETH(\r\n    uint256 amount,\r\n    address nftAsset,\r\n    uint256 nftTokenId,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  function batchBorrowETH(\r\n    uint256[] calldata amounts,\r\n    address[] calldata nftAssets,\r\n    uint256[] calldata nftTokenIds,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\r\n   * @param nftAsset The address of the underlying NFT used as collateral\r\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\r\n   * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\r\n   */\r\n  function repayETH(\r\n    address nftAsset,\r\n    uint256 nftTokenId,\r\n    uint256 amount\r\n  ) external payable returns (uint256, bool);\r\n\r\n  function batchRepayETH(\r\n    address[] calldata nftAssets,\r\n    uint256[] calldata nftTokenIds,\r\n    uint256[] calldata amounts\r\n  ) external payable returns (uint256[] memory, bool[] memory);\r\n\r\n  /**\r\n   * @dev auction a borrow on the WETH reserve\r\n   * @param nftAsset The address of the underlying NFT used as collateral\r\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\r\n   * @param onBehalfOf Address of the user who will receive the underlying NFT used as collateral.\r\n   * Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral.\r\n   */\r\n  function auctionETH(\r\n    address nftAsset,\r\n    uint256 nftTokenId,\r\n    address onBehalfOf\r\n  ) external payable;\r\n\r\n  /**\r\n   * @dev redeems a borrow on the WETH reserve\r\n   * @param nftAsset The address of the underlying NFT used as collateral\r\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\r\n   * @param amount The amount to repay the debt\r\n   * @param bidFine The amount of bid fine\r\n   */\r\n  function redeemETH(\r\n    address nftAsset,\r\n    uint256 nftTokenId,\r\n    uint256 amount,\r\n    uint256 bidFine\r\n  ) external payable returns (uint256);\r\n\r\n  /**\r\n   * @dev liquidates a borrow on the WETH reserve\r\n   * @param nftAsset The address of the underlying NFT used as collateral\r\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\r\n   */\r\n  function liquidateETH(address nftAsset, uint256 nftTokenId) external payable returns (uint256);\r\n}"},"NPics.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./Include.sol\";\r\nimport \"./ERC721.sol\";\r\nimport \"./DydxFlashloanBase.sol\";\r\nimport \"./IWETHGateway.sol\";\r\n\r\ncontract Constants {\r\n    //bytes32 internal constant _permissionless_  = \u0027permissionless\u0027;\r\n    //uint256 internal constant MAX_FEE_RATE      = 0.10 ether;   // 10%\r\n\r\n    bytes32 internal constant _proxyCDP_        = \"proxyCDP\";\r\n    bytes32 internal constant _GemSwap_         = \"GemSwap\";\r\n\r\n    address internal constant _dYdX_SoloMargin_ = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address internal constant _WETH_            = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal constant _BendDAO_WETHGateway_ = 0x3B968D2D299B895A5Fcf3BBa7A64ad0F566e6F88;\r\n    //address internal constant _BendDAO_LendPool_    = 0x70b97A0da65C15dfb0FFA02aEE6FA36e507C2762;\r\n    \r\n    bytes4 internal constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n}\r\n\r\ncontract CBC is ERC721UpgradeSafe, Constants {      // Callable Bull Contract\r\n    //using SafeERC20 for IERC20;\r\n    //using SafeMath for uint;\r\n    //using Strings for uint;\r\n    \r\n    address payable public beacon;\r\n    address public nft;\r\n\r\n    function __CBC_init(address nft_) external initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        (string memory name, string memory symbol) = spellNameAndSymbol(nft_);\r\n        __ERC721_init_unchained(name, symbol);\r\n        __CBC_init_unchained(nft_);\r\n    }\r\n\r\n    function __CBC_init_unchained(address nft_) internal initializer {\r\n        beacon = _msgSender();\r\n        nft = nft_;\r\n    }\r\n\r\n    function spellNameAndSymbol(address nft_) public view returns (string memory name, string memory symbol) {\r\n        name = string(abi.encodePacked(\"NPics.xyz Callable Bull Contract \", IERC721Metadata(nft_).symbol()));\r\n        symbol = string(abi.encodePacked(\"cbc\", IERC721Metadata(nft_).symbol()));\r\n    }\r\n\r\n    function setNameAndSymbol(string memory name, string memory symbol) external {\r\n        require(_msgSender() == NPics(beacon).governor() || _msgSender() == __AdminUpgradeabilityProxy__(beacon).__admin__());\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    modifier onlyBeacon {\r\n        require(_msgSender() == beacon, \u0027Only Beacon\u0027);\r\n        _;\r\n    }\r\n    \r\n    function transfer_(address sender, address recipient, uint256 tokenId) external onlyBeacon {\r\n        _transfer(sender, recipient, tokenId);\r\n    }\r\n    \r\n    function mint_(address to, uint tokenId) external onlyBeacon {\r\n        _mint(to, tokenId);\r\n        _setTokenURI(tokenId, IERC721Metadata(nft).tokenURI(tokenId));\r\n    }\r\n    \r\n    function burn_(uint tokenId) external onlyBeacon {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[48] private ______gap;\r\n}\r\n\r\ncontract CDP is DydxFlashloanBase, ICallee, IERC721Receiver, ReentrancyGuardUpgradeSafe, ContextUpgradeSafe, Constants {      // Collateralized Debt Position\r\n    //using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    //using Strings for uint;\r\n    \r\n    address payable public beacon;\r\n    address public nft;\r\n    uint public tokenId;\r\n\r\n    function __CDP_init(address nft_, uint tokenId_) external initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n        __Context_init_unchained();\r\n        __CDP_init_unchained(nft_, tokenId_);\r\n    }\r\n\r\n    function __CDP_init_unchained(address nft_, uint tokenId_) internal initializer {\r\n        beacon = _msgSender();\r\n        nft = nft_;\r\n        tokenId = tokenId_;\r\n    }\r\n\r\n    modifier onlyBeacon {\r\n        require(_msgSender() == beacon, \u0027Only Beacon\u0027);\r\n        _;\r\n    }\r\n    \r\n    function withdraw_(address to) external onlyBeacon {\r\n        IERC721(nft).safeTransferFrom(address(this), to, tokenId);\r\n    }\r\n\r\n    function downPayWithETH(TradeDetails[] memory tradeDetails, uint loanAmt) public payable nonReentrant onlyBeacon {\r\n        address _solo = _dYdX_SoloMargin_;\r\n        address _token = _WETH_;\r\n        // Get marketId from token address\r\n        uint256 marketId = _getMarketIdFromTokenAddress(_solo, _token);\r\n\r\n        uint _amount = IERC20(_token).balanceOf(_solo);\r\n        // Calculate repay amount (_amount + (2 wei))\r\n        // Approve transfer from\r\n        uint256 repayAmount = _amount.add(2);   //_getRepaymentAmountInternal(_amount);\r\n        IERC20(_token).approve(_solo, repayAmount);\r\n\r\n        // 1. Withdraw $\r\n        // 2. Call callFunction(...)\r\n        // 3. Deposit back $\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, _amount);\r\n        operations[1] = _getCallAction(\r\n            // Encode MyCustomData for callFunction\r\n            //abi.encode(MyCustomData({token: _token, repayAmount: repayAmount}))\r\n            abi.encode(tradeDetails, loanAmt)\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        ISoloMargin(_solo).operate(accountInfos, operations);\r\n\r\n        //emit DownPay(_msgSender(), nft, tokenId, msg.value.sub(address(this).balance), loanAmt);\r\n\r\n        if(address(this).balance \u003e 0)\r\n            _msgSender().transfer(address(this).balance);\r\n    }\r\n\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) override external {\r\n        require(_msgSender() == _dYdX_SoloMargin_ \u0026\u0026 sender == address(this) \u0026\u0026 account.owner == address(this) \u0026\u0026 account.number == 1, \"callFunction param check fail\");\r\n        (TradeDetails[] memory tradeDetails, uint loanAmt) = abi.decode(data, (TradeDetails[], uint));\r\n        uint256 balOfLoanedToken = IERC20(_WETH_).balanceOf(address(this));\r\n        WETH9(_WETH_).withdraw(balOfLoanedToken);\r\n\r\n        require(IERC721(nft).ownerOf(tokenId) != address(this), \"cdp owned the nft already\");\r\n        IGemSwap(NPics(beacon).getConfig(_GemSwap_)).batchBuyWithETH{value: address(this).balance}(tradeDetails);\r\n        require(IERC721(nft).ownerOf(tokenId) == address(this), \"cdp not owned the nft yet\");\r\n\r\n        IERC721(nft).approve(_BendDAO_WETHGateway_, tokenId);\r\n        IWETHGateway(_BendDAO_WETHGateway_).borrowETH(loanAmt, nft, tokenId, address(this), 0);\r\n\r\n        WETH9(_WETH_).deposit{value: balOfLoanedToken.add(2)}();\r\n    }\r\n\r\n    function onERC721Received(address operator, address from, uint256 tokenId_, bytes calldata data) override external returns (bytes4) {\r\n        operator;\r\n        from;\r\n        data;\r\n\r\n        if(tokenId_ == tokenId)\r\n            return this.onERC721Received.selector;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    receive () external payable {\r\n\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[47] private ______gap;\r\n}\r\n\r\ncontract NPics is Configurable, ReentrancyGuardUpgradeSafe, ContextUpgradeSafe, Constants {\r\n    //using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    //address public implementation;\r\n    function implementation() public view returns(address) {  return implementations[0];  }\r\n    mapping (bytes32 =\u003e address) public implementations;\r\n\r\n    mapping (address =\u003e address) public cbcs;     // uft =\u003e cbc\r\n    address[] public cbcA;\r\n    function cbcN() external view returns (uint) {  return cbcA.length;  }\r\n    \r\n    mapping(address =\u003e mapping(uint =\u003e address payable)) public cdps;     // uft =\u003e tokenId =\u003e cdp\r\n    address[] public cdpA;\r\n    function cdpN() external view returns (uint) {  return cdpA.length;  }\r\n    \r\n    function __NPics_init(address governor, address implCBC/*, address mintFeeTo, address swapRouter*/) public initializer {\r\n        __Governable_init_unchained(governor);\r\n        __ReentrancyGuard_init_unchained();\r\n        __Context_init_unchained();\r\n        __NPics_init_unchained(implCBC/*, mintFeeTo, swapRouter*/);\r\n    }\r\n\r\n    function __NPics_init_unchained(address implCBC/*, address mintFeeTo, address swapRouter*/) public governance {\r\n        implementations[0]  = implCBC;\r\n        config[_proxyCDP_]              = uint(0xc5dAe1a5fB39C4DC57713Bcb9cF936B99a173a32);\r\n        config[_GemSwap_]               = uint(0x83C8F28c26bF6aaca652Df1DbBE0e1b56F8baBa2);\r\n    }\r\n    \r\n    function upgradeImplementationTo(address implCBC) external governance {\r\n        implementations[0] = implCBC;\r\n    }\r\n    \r\n    function createCBC(address nft) public returns (address cbc) {\r\n        //require(config[_permissionless_] != 0 || _msgSender() == governor);\r\n        //require(nft != address(0), \u0027ZERO_ADDRESS\u0027);\r\n        require(nft.isContract(), \u0027nft should isContract\u0027);\r\n        require(IERC165(nft).supportsInterface(_INTERFACE_ID_ERC721), \u0027nft should supportsInterface(_INTERFACE_ID_ERC721)\u0027);\r\n\r\n        require(cbcs[nft] == address(0), \u0027the CBC exist already\u0027);\r\n\r\n        bytes memory bytecode = type(InitializableBeaconProxy).creationCode;\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(nft));\r\n        assembly {\r\n            cbc := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableBeaconProxy(payable(cbc)).__InitializableBeaconProxy_init(address(this), 0, abi.encodeWithSignature(\u0027__CBC_init(address)\u0027, nft));\r\n\r\n        cbcs[nft] = cbc;\r\n        cbcA.push(cbc);\r\n        emit CreateCBC(_msgSender(), nft, cbc, cbcA.length);\r\n    }\r\n    event CreateCBC(address indexed creator, address indexed nft, address indexed cbc, uint count);\r\n\r\n    function createCDP(address nft, uint tokenId) public returns (address payable cdp) {\r\n        //require(config[_permissionless_] != 0 || _msgSender() == governor);\r\n        //require(nft != address(0), \u0027ZERO_ADDRESS\u0027);\r\n        require(nft.isContract(), \u0027nft should isContract\u0027);\r\n        require(IERC165(nft).supportsInterface(_INTERFACE_ID_ERC721), \u0027nft should supportsInterface(_INTERFACE_ID_ERC721)\u0027);\r\n\r\n        require(cdps[nft][tokenId] == address(0), \u0027the CDP exist already\u0027);\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(nft, tokenId));\r\n        cdp = payable(Clones.cloneDeterministic(address(config[_proxyCDP_]), salt));\r\n        CDP(cdp).__CDP_init(nft, tokenId);\r\n\r\n        cdps[nft][tokenId] = cdp;\r\n        cdpA.push(cdp);\r\n        emit CreateCDP(_msgSender(), nft, tokenId, cdp, cdpA.length);\r\n    }\r\n    event CreateCDP(address indexed creator, address indexed nft, uint indexed tokenId, address cdp, uint count);\r\n\r\n    function downPayWithETH(address nft, uint tokenId, TradeDetails[] memory tradeDetails, uint loanAmt) public payable nonReentrant {\r\n        address payable cdp = cdps[nft][tokenId];\r\n        if(cdp == address(0))\r\n            cdp = createCDP(nft, tokenId);\r\n        CDP(cdp).downPayWithETH{value: msg.value}(tradeDetails, loanAmt);\r\n\r\n        address cbc = cbcs[nft];\r\n        if(cbc == address(0))\r\n            cbc = createCBC(nft);\r\n        CBC(cbc).mint_(_msgSender(), tokenId);\r\n\r\n        emit DownPay(_msgSender(), nft, tokenId, msg.value.sub(address(this).balance), loanAmt);\r\n\r\n        if(address(this).balance \u003e 0)\r\n            _msgSender().transfer(address(this).balance);\r\n    }\r\n    event DownPay(address indexed sender, address indexed nft, uint indexed tokenId, uint value, uint loanAmt);\r\n\r\n    receive () external payable {\r\n        \r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[45] private ______gap;\r\n}\r\n\r\n\r\nstruct TradeDetails {\r\n    uint256 marketId;\r\n    uint256 value;\r\n    bytes tradeData;\r\n}\r\n\r\ninterface IGemSwap {\r\n    function batchBuyWithETH(TradeDetails[] memory tradeDetails) payable external;\r\n}\r\n\r\ninterface WETH9 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n"}}