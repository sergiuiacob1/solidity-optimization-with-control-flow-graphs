{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "contracts/AnonymiceLibrary.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nlibrary AnonymiceLibrary {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function parseInt(string memory _a)\r\n        internal\r\n        pure\r\n        returns (uint8 _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint8 mint = 0;\r\n        for (uint8 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint8(uint8(bresult[i])) >= 48) &&\r\n                (uint8(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                mint *= 10;\r\n                mint += uint8(bresult[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}"
    },
    "contracts/ERC721sm.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed id\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 indexed id\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      ERC721 BALANCE/OWNER STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(uint256 => address) internal _ownerOf;\r\n\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\r\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        require(owner != address(0), \"ZERO_ADDRESS\");\r\n\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         ERC721 APPROVAL STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        require(from == _ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from ||\r\n                isApprovedForAll[from][msg.sender] ||\r\n                msg.sender == getApproved[id],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            _balanceOf[from]--;\r\n\r\n            _balanceOf[to]++;\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    from,\r\n                    id,\r\n                    \"\"\r\n                ) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    from,\r\n                    id,\r\n                    data\r\n                ) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            _balanceOf[to]++;\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        require(owner != address(0), \"NOT_MINTED\");\r\n\r\n        // Ownership check above ensures no underflow.\r\n        unchecked {\r\n            _balanceOf[owner]--;\r\n        }\r\n\r\n        delete _ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    address(0),\r\n                    id,\r\n                    \"\"\r\n                ) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    address(0),\r\n                    id,\r\n                    data\r\n                ) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external virtual returns (bytes4) {\r\n        return ERC721TokenReceiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/FoldedFaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./AnonymiceLibrary.sol\";\r\nimport \"./ERC721sm.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract FoldedFaces is ERC721, Ownable {\r\n    /*\r\n __             __          __   __  __  __     \r\n|__ | _| _ _|  |__  _ _ _    _) /  \\  _)  _)    \r\n|(_)|(_|(-(_|  |(_|(_(-_)   /__ \\__/ /__ /__  , \r\n                                                \r\n        __                                      \r\n|_     / _  _ _ |  . _ |_ |_                    \r\n|_)\\/  \\__)(-| )|__|(_)| )|_  .  \r\n*/\r\n    using AnonymiceLibrary for uint8;\r\n\r\n    struct Trait {\r\n        string traitName;\r\n        string traitType;\r\n    }\r\n\r\n    struct HashNeeds {\r\n        uint16 startHash;\r\n        uint16 startNonce;\r\n    }\r\n\r\n    //Mappings\r\n    mapping(uint256 => Trait[]) public traitTypes;\r\n    mapping(address => uint256) private lastWrite;\r\n\r\n    //Mint Checks\r\n    mapping(address => bool) addressWhitelistMinted;\r\n    mapping(address => bool) contributorMints;\r\n    uint256 public contributorCount = 0;\r\n    uint256 public regularCount = 0;\r\n\r\n    //uint256s\r\n    uint256 public constant MAX_SUPPLY = 533;\r\n    uint256 public constant WL_MINT_COST = 0.03 ether;\r\n    uint256 public constant PUBLIC_MINT_COST = 0.05 ether;\r\n\r\n    //public mint start timestamp\r\n    uint256 public constant PUBLIC_START_TIME = 1653525000;\r\n\r\n    mapping(uint256 => HashNeeds) tokenIdToHashNeeds;\r\n    uint16 SEED_NONCE = 0;\r\n\r\n    //minting flag\r\n    bool ogMinted = false;\r\n    bool public MINTING_LIVE = false;\r\n\r\n    //uint arrays\r\n    uint16[][8] TIERS;\r\n\r\n    //p5js url\r\n    string p5jsUrl;\r\n    string p5jsIntegrity;\r\n    string imageUrl;\r\n    string animationUrl;\r\n\r\n    //stillSnowCrash\r\n    bytes32 constant whitelistRoot =\r\n        0x358899790e0e071faed348a1b72ef18efe59029543a4a4da16e13fa2abf2a578;\r\n\r\n    constructor() payable ERC721(\"FoldedFaces\", \"FFACE\") {\r\n        //Declare all the rarity tiers\r\n\r\n        //Universe\r\n        TIERS[0] = [8000, 1000, 1000];\r\n        //Border\r\n        TIERS[1] = [1000, 9000];\r\n        //Resolution\r\n        TIERS[2] = [9800, 200];\r\n        //WarpSpeed\r\n        TIERS[3] = [2250, 2250, 2250, 2250, 1000];\r\n        //Folds\r\n        TIERS[4] = [2500, 2500, 2500, 2500];\r\n        //Color\r\n        TIERS[5] = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000];\r\n        //TwoFace\r\n        TIERS[6] = [9000, 1000];\r\n        //Water\r\n        TIERS[7] = [1000, 9000];\r\n    }\r\n\r\n    //prevents someone calling read functions the same block they mint\r\n    modifier disallowIfStateIsChanging() {\r\n        require(\r\n            owner() == msg.sender || lastWrite[msg.sender] < block.number,\r\n            \"not so fast!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*\r\n __    __     __     __   __     ______   __     __   __     ______    \r\n/\\ \"-./  \\   /\\ \\   /\\ \"-.\\ \\   /\\__  _\\ /\\ \\   /\\ \"-.\\ \\   /\\  ___\\   \r\n\\ \\ \\-./\\ \\  \\ \\ \\  \\ \\ \\-.  \\  \\/_/\\ \\/ \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\__ \\  \r\n \\ \\_\\ \\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\    \\ \\_\\  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\ \r\n  \\/_/  \\/_/   \\/_/   \\/_/ \\/_/     \\/_/   \\/_/   \\/_/ \\/_/   \\/_____/ \r\n                                                                                                                                                                                                                                               \r\n   */\r\n\r\n    /**\r\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\r\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\r\n     * @param _rarityTier The tier to use.\r\n     */\r\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\r\n        internal\r\n        view\r\n        returns (uint8)\r\n    {\r\n        uint16 currentLowerBound = 0;\r\n        for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\r\n            uint16 thisPercentage = TIERS[_rarityTier][i];\r\n            if (\r\n                _randinput >= currentLowerBound &&\r\n                _randinput < currentLowerBound + thisPercentage\r\n            ) return i;\r\n            currentLowerBound = currentLowerBound + thisPercentage;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * @param _a The address to be used within the hash.\r\n     */\r\n    function hash(address _a) internal view returns (uint16) {\r\n        uint16 _randinput = uint16(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(block.timestamp, block.difficulty, _a)\r\n                )\r\n            ) % 10000\r\n        );\r\n\r\n        return _randinput;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint internal, this is to avoid code duplication.\r\n     */\r\n    function mintInternal() internal {\r\n        require(\r\n            MINTING_LIVE == true || msg.sender == owner(),\r\n            \"Minting not live\"\r\n        );\r\n        uint256 _totalSupply = totalSupply() - 1;\r\n\r\n        require(_totalSupply < MAX_SUPPLY, \"Minted out\");\r\n        require(!AnonymiceLibrary.isContract(msg.sender), \"No Contracts\");\r\n        require(regularCount < 519, \"Minted Out Non Reserved Spots\");\r\n\r\n        uint256 thisTokenId = _totalSupply;\r\n\r\n        tokenIdToHashNeeds[thisTokenId] = HashNeeds(\r\n            hash(msg.sender),\r\n            SEED_NONCE\r\n        );\r\n\r\n        lastWrite[msg.sender] = block.number;\r\n        SEED_NONCE += 8;\r\n\r\n        _mint(msg.sender, thisTokenId);\r\n    }\r\n\r\n    function mintOgBatch(address[] memory _addresses)\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        require(ogMinted == false);\r\n        require(_addresses.length == 14);\r\n\r\n        uint16 _nonce = SEED_NONCE;\r\n        for (uint256 i = 0; i < 14; i++) {\r\n            uint256 thisTokenId = i;\r\n            tokenIdToHashNeeds[thisTokenId] = HashNeeds(\r\n                hash(_addresses[i]),\r\n                _nonce\r\n            );\r\n            _mint(_addresses[i], thisTokenId);\r\n            _nonce += 8;\r\n        }\r\n        regularCount = 14;\r\n        SEED_NONCE += 112;\r\n        ogMinted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens.\r\n     */\r\n    function mintWLFoldedFaces(address account, bytes32[] calldata merkleProof)\r\n        external\r\n        payable\r\n    {\r\n        bytes32 node = keccak256(abi.encodePacked(account));\r\n        require(\r\n            MerkleProof.verify(merkleProof, whitelistRoot, node),\r\n            \"Not on WL\"\r\n        );\r\n        require(account == msg.sender, \"Self mint only\");\r\n        require(msg.value == WL_MINT_COST, \"Insufficient ETH sent\");\r\n        require(\r\n            addressWhitelistMinted[msg.sender] != true,\r\n            \"Address already minted WL\"\r\n        );\r\n\r\n        addressWhitelistMinted[msg.sender] = true;\r\n        ++regularCount;\r\n        return mintInternal();\r\n    }\r\n\r\n    function mintPublicFoldedFaces() external payable {\r\n        require(msg.value == PUBLIC_MINT_COST, \"Insufficient ETH sent\");\r\n        require(block.timestamp > PUBLIC_START_TIME, \"Public mint not started\");\r\n        ++regularCount;\r\n        return mintInternal();\r\n    }\r\n\r\n    function mintCircolorsContributor() external {\r\n        require(contributorMints[msg.sender] == true);\r\n        require(contributorCount < 15);\r\n\r\n        contributorMints[msg.sender] = false;\r\n        ++contributorCount;\r\n\r\n        return mintInternal();\r\n    }\r\n\r\n    /*\r\n ______     ______     ______     _____     __     __   __     ______    \r\n/\\  == \\   /\\  ___\\   /\\  __ \\   /\\  __-.  /\\ \\   /\\ \"-.\\ \\   /\\  ___\\   \r\n\\ \\  __<   \\ \\  __\\   \\ \\  __ \\  \\ \\ \\/\\ \\ \\ \\ \\  \\ \\ \\-.  \\  \\ \\ \\__ \\  \r\n \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\____-  \\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\ \r\n  \\/_/ /_/   \\/_____/   \\/_/\\/_/   \\/____/   \\/_/   \\/_/ \\/_/   \\/_____/                                                                    \r\n                                                                                           \r\n*/\r\n    function buildHash(uint256 _t) internal view returns (string memory) {\r\n        // This will generate a 8 character string.\r\n        string memory currentHash = \"\";\r\n        uint256 rInput = tokenIdToHashNeeds[_t].startHash;\r\n        uint256 _nonce = tokenIdToHashNeeds[_t].startNonce;\r\n\r\n        for (uint8 i = 0; i < 8; i++) {\r\n            ++_nonce;\r\n            uint16 _randinput = uint16(\r\n                uint256(keccak256(abi.encodePacked(rInput, _t, _nonce))) % 10000\r\n            );\r\n            currentHash = string(\r\n                abi.encodePacked(\r\n                    currentHash,\r\n                    rarityGen(_randinput, i).toString()\r\n                )\r\n            );\r\n        }\r\n        return currentHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Hash to HTML function\r\n     */\r\n    function hashToHTML(string memory _hash, uint256 _tokenId)\r\n        external\r\n        view\r\n        disallowIfStateIsChanging\r\n        returns (string memory)\r\n    {\r\n        string memory htmlString = string(\r\n            abi.encodePacked(\r\n                \"data:text/html,%3Chtml%3E%3Chead%3E%3Cscript%20src%3D%22\",\r\n                p5jsUrl,\r\n                \"%22%20integrity%3D%22\",\r\n                p5jsIntegrity,\r\n                \"%22%20crossorigin%3D%22anonymous%22%3E%3C%2Fscript%3E%3C%2Fhead%3E%3Cbody%3E%3Cscript%3Evar%20tokenId%3D\",\r\n                AnonymiceLibrary.toString(_tokenId),\r\n                \"%3Bvar%20hash%3D%22\",\r\n                _hash,\r\n                \"%22%3B\"\r\n            )\r\n        );\r\n\r\n        htmlString = string(\r\n            abi.encodePacked(\r\n                htmlString,\r\n                \"function%20setup%28%29%7Bs%3D%5B.45%2C1%5D%2Cc%3D%5B0%2C1%5D%2Cn%3D%5B0%2C1%5D%2Cnnw%3D0%2Cci%3D%5B0%2C1%5D%2Cnv%3D%5B%5B.001%2C.0025%5D%2C%5B.0025%2C.01%5D%2C%5B.01%2C.0025%5D%2C%5B.0025%2C.001%5D%2C%5B.001%2C.001%5D%5D%2Cov%3D%5B%5B4500%2C5500%2C6500%2C8e3%5D%2C%5B750%2C950%2C1150%2C1250%5D%2C%5B750%2C950%2C1150%2C1250%5D%2C%5B4500%2C5500%2C6500%2C8e3%5D%2C%5B4e3%2C5e3%2C6e3%2C15e3%5D%5D%2Cp%3D%5B%5B%22%2365010c%22%2C%22%23cb1b16%22%2C%22%23ef3c2d%22%2C%22%23f26a4f%22%2C%22%23f29479%22%2C%22%23fedfd4%22%2C%22%239dcee2%22%2C%22%234091c9%22%2C%22%231368aa%22%2C%22%23033270%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%230f3375%22%2C%22%2313459c%22%2C%22%231557c0%22%2C%22%23196bde%22%2C%22%232382f7%22%2C%22%234b9cf9%22%2C%22%2377b6fb%22%2C%22%23a4cefc%22%2C%22%23cce4fd%22%2C%22%23e8f3fe%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%230e0e0e%22%2C%22%23f3bc17%22%2C%22%23d54b0c%22%2C%22%23154255%22%2C%22%23dcdcdc%22%2C%22%23c0504f%22%2C%22%2368b9b0%22%2C%22%23ecbe2c%22%2C%22%232763ab%22%2C%22%23ce4241%22%2C%22%23faebd7%22%2C%22%23000%22%5D%2C%5B%22%23ff0000%22%2C%22%23fe1c00%22%2C%22%23fd3900%22%2C%22%23fc5500%22%2C%22%23fb7100%22%2C%22%23fb8e00%22%2C%22%23faaa00%22%2C%22%23f9c600%22%2C%22%23f8e300%22%2C%22%23f7ff00%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%23004733%22%2C%22%232b6a4d%22%2C%22%23568d66%22%2C%22%23a5c1ae%22%2C%22%23f3f4f6%22%2C%22%23dcdfe5%22%2C%22%23df8080%22%2C%22%23cb0b0a%22%2C%22%23ad080f%22%2C%22%238e0413%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%231e1619%22%2C%22%233c2831%22%2C%22%235d424e%22%2C%22%238c6677%22%2C%22%23ad7787%22%2C%22%23ac675b%22%2C%22%23c86166%22%2C%22%23f078b3%22%2C%22%23ec8782%22%2C%22%23dfde80%22%2C%22%23faebd7%22%2C%22%23000%22%5D%2C%5B%22%23008080%22%2C%22%23008080%22%2C%22%23178c8c%22%2C%22%23f7ff00%22%2C%22%2346a3a3%22%2C%22%235daeae%22%2C%22%2374baba%22%2C%22%238bc5c5%22%2C%22%23a2d1d1%22%2C%22%23b5dada%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%23669900%22%2C%22%2399cc33%22%2C%22%23ccee66%22%2C%22%23006699%22%2C%22%233399cc%22%2C%22%23990066%22%2C%22%23cc3399%22%2C%22%23ff6600%22%2C%22%23ff9900%22%2C%22%23ffcc00%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%23000%22%2C%22%23fff%22%2C%22%23000%22%2C%22%23fff%22%2C%22%23000%22%2C%22%23fff%22%2C%22%23000%22%2C%22%23fff%22%2C%22%23000%22%2C%22%23fff%22%2C%22%23000%22%2C%22%23fff%22%5D%2C%5B%22%232c6e49%22%2C%22%23618565%22%2C%22%23969c81%22%2C%22%23cbb39d%22%2C%22%23e5beab%22%2C%22%23ffc9b9%22%2C%22%23f5ba9c%22%2C%22%23ebab7f%22%2C%22%23e19c62%22%2C%22%23d68c45%22%2C%22%23000%22%2C%22%23faebd7%22%5D%2C%5B%22%2365010c%22%2C%22%23cb1b16%22%2C%22%23ef3c2d%22%2C%22%23f26a4f%22%2C%22%23f29479%22%2C%22%23fedfd4%22%2C%22%239dcee2%22%2C%22%234091c9%22%2C%22%231368aa%22%2C%22%23033270%22%2C%22%23faebd7%22%2C%22%23000%22%5D%5D%2CcreateCanvas%28700%2C950%29%2CnoiseSeed%28tokenId%29%2CnoLoop%28%29%2CnoStroke%28%29%2CrectMode%28CENTER%29%2CcolorMode%28HSL%29%2CpixelDensity%285%29%2Co%3Dnoise%2Cf%3Dfill%2Cb%3DnoFill%2Cq%3Dwidth%2Ca%3Dheight%2Cyy%3DparseInt%28hash.substring%280%2C1%29%29%2Cci%3Dci%5BparseInt%28hash.substring%281%2C2%29%29%5D%2Cw%3Ds%5BparseInt%28hash.substring%282%2C3%29%29%5D%2Cx%3DparseInt%28hash.substring%283%2C4%29%29%2Czz%3DparseInt%28hash.substring%284%2C5%29%29%2Caa%3Dnv%5Bx%5D%5B0%5D%2Cvb%3Dnv%5Bx%5D%5B1%5D%2Cgb%3Dov%5Bx%5D%5Bzz%5D%2Cff%3D%5B1e-5%2Caa%5D%2Cz%3DparseInt%28hash.substring%285%2C6%29%29%2Cz2%3Dz%2B1%2Cg%3DparseInt%28hash.substring%286%2C7%29%29%2B1%2Cnnw%3Dff%5BparseInt%28hash.substring%287%2C8%29%29%5D%7Dfunction%20draw%28%29%7Bbackground%28p%5Bz%5D%5B10%5D%29%2C2%3D%3Dx%7C%7C3%3D%3Dx%3Fnn%3Dnnw%3Ann%3Daa%3Bfor%28let%20e%3D25%3Be%3C%3Dq-25%3Be%2B%3Dw%29for%28let%20c%3D25%3Bc%3C%3Da-25%3Bc%2B%3Dw%29n%3Do%28e%2Ann%2Cc%2Aaa%29%2Cn2%3Do%28e%2Avb%2Cc%2Avb%29%2Cn3%3Do%28%28e%2Bgb%2An%29%2Aaa%2C%28c%2Bgb%2An2%29%2Avb%29%2Cn4%3Do%28%28e%2Bgb%2An3%29%2Aaa%2C%28c%2Bgb%2An3%29%2Avb%29%2Cn5%3Do%28%28e%2Bgb%2An4%29%2Aaa%2C%28c%2Bgb%2An4%29%2Avb%29%2C0%3D%3Dyy%3Fe%3Cq%2Fg%3Fn5%3E.58%3Fb%28%29%3An5%3E.55%3Ff%28p%5Bz%5D%5B0%5D%29%3An5%3E.53%3Ff%28p%5Bz%5D%5B1%5D%29%3An5%3E.5%3Ff%28p%5Bz%5D%5B2%5D%29%3An5%3E.47%3Ff%28p%5Bz%5D%5B3%5D%29%3An5%3E.44%3Fb%28%29%3An5%3E.41%3Ff%28p%5Bz%5D%5B4%5D%29%3An5%3E.38%3Ff%28p%5Bz%5D%5B5%5D%29%3An5%3E.35%3Ff%28p%5Bz%5D%5B6%5D%29%3An5%3E.31%3Ff%28p%5Bz%5D%5B7%5D%29%3An5%3E.28%3Ff%28p%5Bz%5D%5B8%5D%29%3An5%3E.25%3Ff%28p%5Bz%5D%5B9%5D%29%3Ab%28%29%3An5%3E.58%3Fb%28%29%3An5%3E.55%3Ff%28p%5Bz2%5D%5B0%5D%29%3An5%3E.53%3Ff%28p%5Bz2%5D%5B1%5D%29%3An5%3E.5%3Ff%28p%5Bz2%5D%5B2%5D%29%3An5%3E.47%3Ff%28p%5Bz2%5D%5B3%5D%29%3An5%3E.44%3Fb%28%29%3An5%3E.41%3Ff%28p%5Bz2%5D%5B4%5D%29%3An5%3E.38%3Ff%28p%5Bz2%5D%5B5%5D%29%3An5%3E.35%3Ff%28p%5Bz2%5D%5B6%5D%29%3An5%3E.31%3Ff%28p%5Bz2%5D%5B7%5D%29%3An5%3E.28%3Ff%28p%5Bz2%5D%5B8%5D%29%3An5%3E.25%3Ff%28p%5Bz2%5D%5B9%5D%29%3Ab%28%29%3A1%3D%3Dyy%3Fn5%3E.6%3Fb%28%29%3An5%3E.4%3Ff%28p%5Bz%5D%5B3%5D%29%3Ab%28%29%3Af%281e3%2An2%2C100%2An5%2C100%2An5%29%2Crect%28e%2Cc%2Cw%29%3B0%3D%3Dci%26%26%28push%28%29%2Cb%28%29%2Cstroke%28p%5Bz%5D%5B10%5D%29%2CstrokeWeight%281570%29%2Ccircle%28q%2F2%2Ca%2F2%2C2e3%29%2Cpop%28%29%29%2Cpush%28%29%2CtextSize%283%29%2CtextAlign%28RIGHT%29%2Cf%28p%5Bz%5D%5B11%5D%29%2Ctext%28%22Folded%20Faces.%202022.%22%2Cq-25%2Ca-15%29%2Ctext%28hash%2Cq-25%2Ca-10%29%2Cpop%28%29%7D%3C%2Fscript%3E%3C%2Fbody%3E%3C%2Fhtml%3E\"\r\n            )\r\n        );\r\n\r\n        return htmlString;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return regularCount + contributorCount;\r\n    }\r\n\r\n    /**\r\n     * @dev Hash to metadata function\r\n     */\r\n    function hashToMetadata(string memory _hash)\r\n        public\r\n        view\r\n        disallowIfStateIsChanging\r\n        returns (string memory)\r\n    {\r\n        string memory metadataString;\r\n        uint256 metadataLength;\r\n\r\n        if (\r\n            AnonymiceLibrary.parseInt(\r\n                AnonymiceLibrary.substring(_hash, 0, 1)\r\n            ) == 0\r\n        ) {\r\n            metadataLength = 6;\r\n        } else {\r\n            metadataLength = 5;\r\n        }\r\n\r\n        for (uint8 i = 0; i < metadataLength; i++) {\r\n            uint8 thisTraitIndex = AnonymiceLibrary.parseInt(\r\n                AnonymiceLibrary.substring(_hash, i, i + 1)\r\n            );\r\n\r\n            metadataString = string(\r\n                abi.encodePacked(\r\n                    metadataString,\r\n                    '{\"trait_type\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitType,\r\n                    '\",\"value\":\"',\r\n                    traitTypes[i][thisTraitIndex].traitName,\r\n                    '\"}'\r\n                )\r\n            );\r\n\r\n            if (i != metadataLength - 1)\r\n                metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(\"[\", metadataString, \"]\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the image and metadata for a token Id\r\n     * @param _tokenId The tokenId to return the image and metadata for.\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_tokenId < totalSupply());\r\n\r\n        string memory tokenHash = _tokenIdToHash(_tokenId);\r\n\r\n        string\r\n            memory description = '\", \"description\": \"533 FoldedFaces. Traits generated on chain & metadata, images mirrored on chain permanently.\",';\r\n\r\n        string memory encodedTokenId = AnonymiceLibrary.encode(\r\n            bytes(string(abi.encodePacked(AnonymiceLibrary.toString(_tokenId))))\r\n        );\r\n        string memory encodedHash = AnonymiceLibrary.encode(\r\n            bytes(string(abi.encodePacked(tokenHash)))\r\n        );\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    AnonymiceLibrary.encode(\r\n                        bytes(\r\n                            string(\r\n                                abi.encodePacked(\r\n                                    '{\"name\": \"FoldedFaces #',\r\n                                    AnonymiceLibrary.toString(_tokenId),\r\n                                    description,\r\n                                    '\"external_url\":\"',\r\n                                    animationUrl,\r\n                                    encodedTokenId,\r\n                                    \"&t=\",\r\n                                    encodedHash,\r\n                                    '\",\"image\":\"',\r\n                                    imageUrl,\r\n                                    AnonymiceLibrary.toString(_tokenId),\r\n                                    \"&t=\",\r\n                                    tokenHash,\r\n                                    '\",\"attributes\":',\r\n                                    hashToMetadata(tokenHash),\r\n                                    \"}\"\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a hash for a given tokenId\r\n     * @param _tokenId The tokenId to return the hash for.\r\n     */\r\n    function _tokenIdToHash(uint256 _tokenId)\r\n        public\r\n        view\r\n        disallowIfStateIsChanging\r\n        returns (string memory)\r\n    {\r\n        require(_tokenId < totalSupply());\r\n        string memory tokenHash = buildHash(_tokenId);\r\n\r\n        return tokenHash;\r\n    }\r\n\r\n    /*\r\n ______     __     __     __   __     ______     ______    \r\n/\\  __ \\   /\\ \\  _ \\ \\   /\\ \"-.\\ \\   /\\  ___\\   /\\  == \\   \r\n\\ \\ \\/\\ \\  \\ \\ \\/ \".\\ \\  \\ \\ \\-.  \\  \\ \\  __\\   \\ \\  __<   \r\n \\ \\_____\\  \\ \\__/\".~\\_\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\  \\ \\_\\ \\_\\ \r\n  \\/_____/   \\/_/   \\/_/   \\/_/ \\/_/   \\/_____/   \\/_/ /_/ \r\n                                                           \r\n    /**\r\n     * @dev Add a trait type\r\n     * @param _traitTypeIndex The trait type index\r\n     * @param traits Array of traits to add\r\n     */\r\n\r\n    function addTraitType(uint256 _traitTypeIndex, Trait[] memory traits)\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            traitTypes[_traitTypeIndex].push(\r\n                Trait(traits[i].traitName, traits[i].traitType)\r\n            );\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    function addContributorMint(address _account) external payable onlyOwner {\r\n        contributorMints[_account] = true;\r\n    }\r\n\r\n    function flipMintingSwitch() external payable onlyOwner {\r\n        MINTING_LIVE = !MINTING_LIVE;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the p5js url\r\n     * @param _p5jsUrl The address of the p5js file hosted on CDN\r\n     */\r\n\r\n    function setJsAddress(string memory _p5jsUrl) external payable onlyOwner {\r\n        p5jsUrl = _p5jsUrl;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the p5js resource integrity\r\n     * @param _p5jsIntegrity The hash of the p5js file (to protect w subresource integrity)\r\n     */\r\n\r\n    function setJsIntegrity(string memory _p5jsIntegrity)\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        p5jsIntegrity = _p5jsIntegrity;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the base image url\r\n     * @param _imageUrl The base url for image field\r\n     */\r\n\r\n    function setImageUrl(string memory _imageUrl) external payable onlyOwner {\r\n        imageUrl = _imageUrl;\r\n    }\r\n\r\n    function setAnimationUrl(string memory _animationUrl)\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        animationUrl = _animationUrl;\r\n    }\r\n\r\n    function withdraw() external payable onlyOwner {\r\n        uint256 sixtyFive = (address(this).balance / 100) * 65;\r\n        uint256 fifteen = (address(this).balance / 100) * 15;\r\n        uint256 five = (address(this).balance / 100) * 5;\r\n        (bool sentT, ) = payable(\r\n            address(0xE4260Df86f5261A41D19c2066f1Eb2Eb4F009e84)\r\n        ).call{value: fifteen}(\"\");\r\n        require(sentT, \"Failed to send\");\r\n        (bool sentI, ) = payable(\r\n            address(0x4533d1F65906368ebfd61259dAee561DF3f3559D)\r\n        ).call{value: fifteen}(\"\");\r\n        require(sentI, \"Failed to send\");\r\n        (bool sentC, ) = payable(\r\n            address(0x888f8AA938dbb18b28bdD111fa4A0D3B8e10C871)\r\n        ).call{value: five}(\"\");\r\n        require(sentC, \"Failed to send\");\r\n        (bool sentG, ) = payable(\r\n            address(0xeFEed35D024CF5B59482Fa4BC594AaeAf694E669)\r\n        ).call{value: sixtyFive}(\"\");\r\n        require(sentG, \"Failed to send\");\r\n    }\r\n}\r\n"
    }
  }
}}