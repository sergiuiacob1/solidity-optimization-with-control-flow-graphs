{{
  "language": "Solidity",
  "sources": {
    "VotiumBribesProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n\nimport {ICurvePool} from \"ICurvePool.sol\";\nimport {IHarvestForwarder} from \"IHarvestForwarder.sol\";\nimport {ISettV4} from \"ISettV4.sol\";\nimport {CowSwapSeller} from \"CowSwapSeller.sol\";\nimport {IERC20} from \"IERC20.sol\";\nimport {SafeERC20} from \"SafeERC20.sol\";\n\n\n/// @title BribesProcessor\n/// @author Alex the Entreprenerd @ BadgerDAO\n/// @dev BribesProcess for bveCVX, using CowSwapSeller allows to process bribes fairly\n/// Minimizing the amount of power that the manager can have\n/// @notice This code is WIP, any feedback is appreciated alex@badger.finance\n///     Architecture: https://miro.com/app/board/uXjVO9yyd7o=/\n///     Original Python Version https://github.com/Badger-Finance/badger-multisig/blob/main/scripts/badger/swap_bribes_for_bvecvx.py#L39\ncontract VotiumBribesProcessor is CowSwapSeller {\n    using SafeERC20 for IERC20;\n\n\n    // All events are token / amount\n    event SentBribeToGovernance(address indexed token, uint256 amount);\n    event SentBribeToTree(address indexed token, uint256 amount);\n    event PerformanceFeeGovernance(address indexed token, uint256 amount);\n    event BribeEmission(address indexed token, address indexed recipient, uint256 amount);\n\n    // address public manager /// inherited by CowSwapSeller\n\n    // timestamp of last action, we allow anyone to sweep this contract\n    // if admin has been idle for too long.\n    // Sweeping simply emits to the badgerTree making fair emission to vault depositors\n    // Once BadgerRewards is live we will integrate it\n    uint256 public lastBribeAction;\n\n    uint256 public constant MAX_MANAGER_IDLE_TIME = 10 days; // Because we have Strategy Notify, 10 days is enough\n    // Way more time than expected\n\n    IERC20 public constant BADGER = IERC20(0x3472A5A71965499acd81997a54BBA8D852C6E53d);\n    IERC20 public constant CVX = IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n    IERC20 public constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    address public constant STRATEGY = 0x898111d1F4eB55025D0036568212425EE2274082;\n    address public constant BADGER_TREE = 0x660802Fc641b154aBA66a62137e71f331B6d787A;\n    address public constant B_BVECVX_CVX = 0x937B8E917d0F36eDEBBA8E459C5FB16F3b315551;\n\n    uint256 public constant MAX_BPS = 10_000;\n    uint256 public constant BADGER_SHARE = 2750; //27.50%\n    uint256 public constant OPS_FEE = 500; // 5%\n    uint256 public constant LP_FEE = 500; // 5%\n\n    /// `treasury_vault_multisig`\n    /// https://github.com/Badger-Finance/badger-multisig/blob/9f04e0589b31597390f2115501462794baca2d4b/helpers/addresses.py#L38\n    address public constant TREASURY = 0xD0A7A8B98957b9CD3cFB9c0425AbE44551158e9e;\n\n    ISettV4 public constant BVE_CVX = ISettV4(0xfd05D3C7fe2924020620A8bE4961bBaA747e6305);\n    ICurvePool public constant CVX_BVE_CVX_CURVE = ICurvePool(0x04c90C198b2eFF55716079bc06d7CCc4aa4d7512);\n\n    // We send tokens to emit here\n    IHarvestForwarder public constant HARVEST_FORWARDER = IHarvestForwarder(0xA84B663837D94ec41B0f99903f37e1d69af9Ed3E);\n\n    /// NOTE: Need constructor for CowSwapSeller\n    constructor(address _pricer) CowSwapSeller(_pricer) {}\n\n    function notifyNewRound() external {\n        require(msg.sender == STRATEGY);\n\n        // Give the manager 10 days to process else anyone can claim\n        lastBribeAction = block.timestamp;\n    }\n\n\n    /// === Security Function === ///\n\n    /// @dev Emits all of token directly to tree for people to receive\n    /// @param token The token to transfer\n    /// @param sendToGovernance Should we send to the dev multisig, or emit directly to the badgerTree?\n    /// @notice has built in expiration allowing anyone to send the tokens to tree should the manager stop processing bribes\n    ///     can also sendToGovernance if you prefer\n    ///     at this time both options have the same level of trust assumptions\n    /// This is effectively a security rescue function\n    /// The manager can call it to move funds to tree (forfeiting any fees)\n    /// And anyone can rescue the funds if the manager goes rogue\n    function ragequit(IERC20 token, bool sendToGovernance) external nonReentrant {\n        bool timeHasExpired = block.timestamp > lastBribeAction + MAX_MANAGER_IDLE_TIME;\n        require(msg.sender == manager || timeHasExpired);\n\n        // In order to avoid selling after, set back the allowance to 0 to the Relayer\n        token.safeApprove(address(RELAYER), 0);\n\n        // Send all tokens to badgerTree without fee\n        uint256 amount = token.balanceOf(address(this));\n        if(sendToGovernance) {\n            token.safeTransfer(DEV_MULTI, amount);\n\n            emit SentBribeToGovernance(address(token), amount);\n        } else {\n            require(HARVEST_FORWARDER.badger_tree() == BADGER_TREE);\n            \n            // If manager rqs to emit in time, treasury still receives a fee\n            if(!timeHasExpired && msg.sender == manager) {\n                // Take a fee here\n\n                uint256 fee = amount * OPS_FEE / MAX_BPS;\n                token.safeTransfer(TREASURY, fee);\n\n                emit PerformanceFeeGovernance(address(token), fee);\n\n                amount -= fee;\n            }\n            token.safeApprove(address(HARVEST_FORWARDER), amount);\n            HARVEST_FORWARDER.distribute(address(token), amount, address(BVE_CVX));\n\n            emit SentBribeToTree(address(token), amount);\n        }\n    }\n\n    /// === Day to Day Operations Functions === ///\n\n    /// @dev\n    /// Step 1\n    /// Use sellBribeForWETH\n    /// To sell all bribes to WETH\n    /// @notice nonReentrant not needed as `_doCowswapOrder` is nonReentrant\n    function sellBribeForWeth(Data calldata orderData, bytes memory orderUid) external {\n        require(orderData.sellToken != CVX); // Can't sell CVX;\n        require(orderData.sellToken != BADGER); // Can't sell BADGER either;\n        require(orderData.sellToken != WETH); // Can't sell WETH\n        require(orderData.buyToken == WETH); // Gotta Buy WETH;\n\n        _doCowswapOrder(orderData, orderUid);\n    }\n\n    /// @dev\n    /// Step 2.a\n    /// Swap WETH -> BADGER\n    function swapWethForBadger(Data calldata orderData, bytes memory orderUid) external {\n        require(orderData.sellToken == WETH);\n        require(orderData.buyToken == BADGER);\n\n        /// NOTE: checks for msg.sender == manager\n        _doCowswapOrder(orderData, orderUid);\n    }\n\n    /// @dev\n    /// Step 2.b\n    /// Swap WETH -> CVX\n    function swapWethForCVX(Data calldata orderData, bytes memory orderUid) external {\n        require(orderData.sellToken == WETH);\n        require(orderData.buyToken == CVX);\n\n        /// NOTE: checks for msg.sender == manager\n        _doCowswapOrder(orderData, orderUid);\n    }\n\n    /// @dev\n    /// Step 3 Emit the CVX\n    /// Takes all the CVX, takes fee, locks and emits it\n    function swapCVXTobveCVXAndEmit() external nonReentrant {\n        // Will take all the CVX left,\n        // swap it for bveCVX if cheaper, or deposit it directly\n        // and then emit it\n        require(msg.sender == manager);\n\n        uint256 totalCVX = CVX.balanceOf(address(this));\n        require(totalCVX > 0);\n        require(HARVEST_FORWARDER.badger_tree() == BADGER_TREE);\n\n        // Get quote from pool\n        uint256 fromPurchase = CVX_BVE_CVX_CURVE.get_dy(0, 1, totalCVX);\n\n        // Check math from vault\n        // from Vault code shares = (_amount.mul(totalSupply())).div(_pool);\n        uint256 fromDeposit = totalCVX * BVE_CVX.totalSupply() / BVE_CVX.balance();\n\n        uint256 ops_fee;\n        uint256 toEmit;\n\n        if(fromDeposit > fromPurchase) {\n            // Costs less to deposit\n\n            //  ops_fee = int(total / (1 - BADGER_SHARE) * OPS_FEE), adapted to solidity for precision\n            ops_fee = totalCVX * OPS_FEE / (MAX_BPS - BADGER_SHARE);\n\n            toEmit = totalCVX - ops_fee;\n\n            CVX.safeApprove(address(BVE_CVX), totalCVX);\n\n            uint256 treasuryPrevBalance = BVE_CVX.balanceOf(TREASURY);\n\n            // If we don't swap\n\n            // Take the fee\n            BVE_CVX.depositFor(TREASURY, ops_fee);\n\n            // Deposit and emit rest\n            uint256 initialBveCVXBalance = BVE_CVX.balanceOf((address(this)));\n            BVE_CVX.deposit(toEmit);\n\n            // Update vars as we emit event with them\n            ops_fee = BVE_CVX.balanceOf(TREASURY) - treasuryPrevBalance;\n            toEmit = BVE_CVX.balanceOf(address(this)) - initialBveCVXBalance;\n        } else {\n            // Buy from pool\n\n            CVX.safeApprove(address(CVX_BVE_CVX_CURVE), totalCVX);\n\n            // fromPurchase is calculated in same call so provides no slippage protection\n            // but we already calculated it so may as well use that\n            uint256 totalBveCVX = CVX_BVE_CVX_CURVE.exchange(0, 1, totalCVX, fromPurchase);\n\n            ops_fee = totalBveCVX * OPS_FEE / (MAX_BPS - BADGER_SHARE);\n\n            toEmit = totalBveCVX - ops_fee;\n\n            // Take fee\n            IERC20(address(BVE_CVX)).safeTransfer(TREASURY, ops_fee);\n        }\n\n        // Emit token\n        IERC20(address(BVE_CVX)).safeApprove(address(HARVEST_FORWARDER), toEmit);\n        HARVEST_FORWARDER.distribute(address(BVE_CVX), toEmit, address(BVE_CVX));\n\n        emit PerformanceFeeGovernance(address(BVE_CVX), ops_fee);\n        emit BribeEmission(address(BVE_CVX), address(BVE_CVX), toEmit);\n    }\n\n    /// @dev\n    /// Step 4 Emit the Badger\n    function emitBadger() external nonReentrant {\n        require(msg.sender == manager);\n        require(HARVEST_FORWARDER.badger_tree() == BADGER_TREE);\n\n        // Sends Badger to the Tree\n        // Emits custom event for it\n        uint256 toEmitTotal = BADGER.balanceOf(address(this));\n        require(toEmitTotal > 0);\n\n        uint256 toEmitToLp = toEmitTotal * LP_FEE / BADGER_SHARE;\n        uint256 toEmitToBveCvx = toEmitTotal - toEmitToLp;\n\n        BADGER.safeApprove(address(HARVEST_FORWARDER), toEmitTotal);\n        HARVEST_FORWARDER.distribute(address(BADGER), toEmitToLp, B_BVECVX_CVX);\n        HARVEST_FORWARDER.distribute(address(BADGER), toEmitToBveCvx, address(BVE_CVX));\n\n        emit BribeEmission(address(BADGER), B_BVECVX_CVX, toEmitToLp);\n        emit BribeEmission(address(BADGER), address(BVE_CVX), toEmitToBveCvx);\n    }\n\n\n    /// === EXTRA === ///\n\n    /// @dev Set new allowance to the relayer\n    /// @notice used if you place two or more orders with the same token\n    ///     In that case, place all orders, then set allowance to the sum of all orders\n    function setCustomAllowance(address token, uint256 newAllowance) external nonReentrant {\n        require(msg.sender == manager);\n\n        IERC20(token).safeApprove(RELAYER, 0);\n        // NOTE: Set this to the amount you need SUM(all_orders) to ensure they all go through\n        IERC20(token).safeApprove(RELAYER, newAllowance); \n    }\n}\n"
    },
    "ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n\ninterface ICurvePool {\n  function coins(uint256 n) external view returns (address);\n  function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n  function exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) external returns (uint256);\n}"
    },
    "IHarvestForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.11;\npragma experimental ABIEncoderV2;\n\ninterface IHarvestForwarder {\n  function distribute(\n    address token,\n    uint256 amount,\n    address beneficiary\n  ) external;\n  function badger_tree() external view returns(address);\n}\n"
    },
    "ISettV4.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.11;\npragma experimental ABIEncoderV2;\n\ninterface ISettV4 {\n    function deposit(uint256 _amount) external;\n\n    function depositFor(address _recipient, uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function balance() external view returns (uint256);\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function balanceOf(address) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function approveContractAccess(address) external;\n    function governance() external view returns (address);\n    \n}\n"
    },
    "CowSwapSeller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n\nimport {IERC20} from \"IERC20.sol\";\nimport {SafeERC20} from \"SafeERC20.sol\";\nimport {ReentrancyGuard} from \"ReentrancyGuard.sol\";\n\n\nimport \"IUniswapRouterV2.sol\";\nimport \"ICurveRouter.sol\";\nimport \"ICowSettlement.sol\";\n\n// Onchain Pricing Interface\nstruct Quote {\n    string name;\n    uint256 amountOut;\n}\ninterface OnChainPricing {\n  function findOptimalSwap(address tokenIn, address tokenOut, uint256 amountIn) external view returns (Quote memory);\n}\n// END OnchainPricing\n\n/// @title CowSwapSeller\n/// @author Alex the Entreprenerd @ BadgerDAO\n/// @dev Cowswap seller, a smart contract that receives order data and verifies if the order is worth going for\n/// @notice CREDITS\n/// Thank you Cowswap Team as well as Poolpi\n/// @notice For the awesome project and the tutorial: https://hackmd.io/@2jvugD4TTLaxyG3oLkPg-g/H14TQ1Omt\ncontract CowSwapSeller is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    OnChainPricing public pricer; // Contract we will ask for a fair price of before accepting the cowswap order\n\n    address public manager;\n\n    address public constant DEV_MULTI = 0xB65cef03b9B89f99517643226d76e286ee999e77;\n\n    /// Contract we give allowance to perform swaps\n    address public constant RELAYER = 0xC92E8bdf79f0507f65a392b0ab4667716BFE0110;\n\n    ICowSettlement public constant SETTLEMENT = ICowSettlement(0x9008D19f58AAbD9eD0D60971565AA8510560ab41);\n\n    bytes32 private constant TYPE_HASH =\n        hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\n\n    // keccak256(\"sell\")\n    bytes32 public constant KIND_SELL =\n        hex\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\";\n    // keccak256(\"erc20\")\n    bytes32 public constant BALANCE_ERC20 =\n        hex\"5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9\";\n\n    /// @dev The domain separator used for signing orders that gets mixed in\n    /// making signatures for different domains incompatible. This domain\n    /// separator is computed following the EIP-712 standard and has replay\n    /// protection mixed in so that signed orders are only valid for specific\n    /// GPv2 contracts.\n    /// @notice Copy pasted from mainnet because we need this\n    bytes32 public immutable domainSeparator;\n        // Cowswap Order Data Interface \n    uint256 constant UID_LENGTH = 56;\n\n    struct Data {\n        IERC20 sellToken;\n        IERC20 buyToken;\n        address receiver;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint32 validTo;\n        bytes32 appData;\n        uint256 feeAmount;\n        bytes32 kind;\n        bool partiallyFillable;\n        bytes32 sellTokenBalance;\n        bytes32 buyTokenBalance;\n    }\n        \n\n    /// @dev Packs order UID parameters into the specified memory location. The\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\n    /// it allows re-using the memory for packing the order UID.\n    ///\n    /// This function reverts if the order UID buffer is not the correct size.\n    ///\n    /// @param orderUid The buffer pack the order UID parameters into.\n    /// @param orderDigest The EIP-712 struct digest derived from the order\n    /// parameters.\n    /// @param owner The address of the user who owns this order.\n    /// @param validTo The epoch time at which the order will stop being valid.\n    function packOrderUidParams(\n        bytes memory orderUid,\n        bytes32 orderDigest,\n        address owner,\n        uint32 validTo\n    ) pure public {\n        require(orderUid.length == UID_LENGTH, \"GPv2: uid buffer overflow\");\n\n        // NOTE: Write the order UID to the allocated memory buffer. The order\n        // parameters are written to memory in **reverse order** as memory\n        // operations write 32-bytes at a time and we want to use a packed\n        // encoding. This means, for example, that after writing the value of\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\n        // only 20 bytes and `20:32` should be `0`s:\n        //\n        //        |           1111111111222222222233333333334444444444555555\n        //   byte | 01234567890123456789012345678901234567890123456789012345\n        // -------+---------------------------------------------------------\n        //  field | [.........orderDigest..........][......owner.......][vT]\n        // -------+---------------------------------------------------------\n        // mstore |                         [000000000000000000000000000.vT]\n        //        |                     [00000000000.......owner.......]\n        //        | [.........orderDigest..........]\n        //\n        // Additionally, since Solidity `bytes memory` are length prefixed,\n        // 32 needs to be added to all the offsets.\n        //\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(add(orderUid, 56), validTo)\n            mstore(add(orderUid, 52), owner)\n            mstore(add(orderUid, 32), orderDigest)\n        }\n    }\n    constructor(address _pricer) {\n        pricer = OnChainPricing(_pricer);\n        manager = msg.sender;\n\n        // Fetch the domainSeparator from Settlement from THIS chain\n        domainSeparator = SETTLEMENT.domainSeparator();\n    }\n\n    function setPricer(OnChainPricing newPricer) external {\n        require(msg.sender == DEV_MULTI);\n        pricer = newPricer;\n    }\n\n    function setManager(address newManager) external {\n        require(msg.sender == manager);\n        manager = newManager;\n    }\n\n    /// @dev Return the EIP-712 signing hash for the specified order.\n    ///\n    /// @param order The order to compute the EIP-712 signing hash for.\n    /// @param separator The EIP-712 domain separator to use.\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\n    function getHash(Data memory order, bytes32 separator)\n        public\n        pure\n        returns (bytes32 orderDigest)\n    {\n        bytes32 structHash;\n\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\n        // in the EIP proposal, noting that the order struct has 10 fields, and\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let dataStart := sub(order, 32)\n            let temp := mload(dataStart)\n            mstore(dataStart, TYPE_HASH)\n            structHash := keccak256(dataStart, 416)\n            mstore(dataStart, temp)\n        }\n\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\n        // hash using scratch memory past the free memory pointer. The signing\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\n            mstore(add(freeMemoryPointer, 2), separator)\n            mstore(add(freeMemoryPointer, 34), structHash)\n            orderDigest := keccak256(freeMemoryPointer, 66)\n        }\n    }\n\n    function getOrderID(Data calldata orderData) public view returns (bytes memory) {\n        // Allocated\n        bytes memory orderUid = new bytes(UID_LENGTH);\n\n        // Get the hash\n        bytes32 digest = getHash(orderData, domainSeparator);\n        packOrderUidParams(orderUid, digest, address(this), orderData.validTo);\n\n        return orderUid;\n    }\n\n    function checkCowswapOrder(Data calldata orderData, bytes memory orderUid) public virtual view returns(bool) {\n        // Verify we get the same ID\n        // NOTE: technically superfluous as we could just derive the id and setPresignature with that\n        // But nice for internal testing\n        bytes memory derivedOrderID = getOrderID(orderData);\n        require(keccak256(derivedOrderID) == keccak256(orderUid));\n\n        require(orderData.validTo > block.timestamp);\n        require(orderData.receiver == address(this));\n        require(keccak256(abi.encodePacked(orderData.kind)) == keccak256(abi.encodePacked(KIND_SELL)));\n\n        // TODO: This should be done by using a gas cost oracle (see Chainlink)\n        require(orderData.feeAmount <= orderData.sellAmount / 10); // Fee can be at most 1/10th of order\n\n        // Check the price we're agreeing to. Before we continue, let's get a full onChain quote as baseline\n        address tokenIn = address(orderData.sellToken);\n        address tokenOut = address(orderData.buyToken);\n\n        uint256 amountIn = orderData.sellAmount;\n        uint256 amountOut = orderData.buyAmount;\n\n        Quote memory result = pricer.findOptimalSwap(tokenIn, tokenOut, amountIn);\n\n        // Require that Cowswap is offering a better price or matching\n        return(result.amountOut <= amountOut);\n    }\n\n\n    /// @dev This is the function you want to use to perform a swap on Cowswap via this smart contract\n    function _doCowswapOrder(Data calldata orderData, bytes memory orderUid) internal nonReentrant {\n        require(msg.sender == manager);\n\n        require(checkCowswapOrder(orderData, orderUid));\n\n        // Because swap is looking good, check we have the amount, then give allowance to the Cowswap Router\n        orderData.sellToken.safeApprove(RELAYER, 0); // Set to 0 just in case\n        orderData.sellToken.safeApprove(RELAYER, orderData.sellAmount + orderData.feeAmount);\n\n        // Once allowance is set, let's setPresignature and the order will happen\n        //setPreSignature\n        SETTLEMENT.setPreSignature(orderUid, true);\n    }\n\n    /// @dev Allows to cancel a cowswap order perhaps if it took too long or was with invalid parameters\n    /// @notice This function performs no checks, there's a high change it will revert if you send it with fluff parameters\n    function _cancelCowswapOrder(bytes memory orderUid) internal nonReentrant {\n        require(msg.sender == manager);\n\n        SETTLEMENT.setPreSignature(orderUid, false);\n    }\n}"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "IUniswapRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapRouterV2 {\n    function factory() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "ICurveRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n\ninterface ICurveRouter {\n  function get_best_rate(\n    address from, address to, uint256 _amount) external view returns (address, uint256);\n  \n  function exchange_with_best_rate(\n    address _from,\n    address _to,\n    uint256 _amount,\n    uint256 _expected\n  ) external returns (uint256);\n}"
    },
    "ICowSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n\ninterface ICowSettlement {\n  function setPreSignature(bytes calldata orderUid, bool signed) external;\n  function preSignature(bytes calldata orderUid) external view returns (uint256);\n  function domainSeparator() external view returns (bytes32);\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}