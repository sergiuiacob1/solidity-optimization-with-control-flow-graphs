{{
  "language": "Solidity",
  "sources": {
    "AvvenireCitizensERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Avvenire Citizens Contract\n */\npragma solidity ^0.8.4;\n\nimport \"AvvenireCitizensInterface.sol\";\nimport \"Ownable.sol\";\nimport \"ERC721A.sol\";\n// _setOwnersExplicit( ) moved from the ERC721A contract to an extension\nimport \"ERC721AOwnersExplicit.sol\";\nimport \"Strings.sol\";\nimport \"ReentrancyGuard.sol\";\n\nerror TraitTypeDoesNotExist();\nerror TransferFailed();\nerror ChangeAlreadyRequested();\nerror NotSender();\n// error InsufficcientFunds();\n\n// token mutator changes the way that an ERC721A contract interacts with tokens\ncontract AvvenireCitizens is\n    Ownable,\n    ERC721A,\n    ERC721AOwnersExplicit,\n    ReentrancyGuard,\n    AvvenireCitizensInterface\n{\n    // events\n    event ChangeRequested(uint256 tokenId, address contractAddress, address sender);\n    event TraitBound(uint256 citizenId, uint256 traitId, TraitType traitType);\n\n    string baseURI; // a uri for minting, but this allows the contract owner to change it later\n    string public loadURI; // a URI that the NFT will be set to while waiting for changes\n\n    address payable receivingAddress; // the address that collects the cost of the mutation\n\n    bool public isStopped; \n\n    // Data contract\n    AvvenireCitizensMappingsInterface public avvenireCitizensData;\n\n    // Traits contract\n    AvvenireTraitsInterface public avvenireTraits; \n\n    // mapping for allowing other contracts to interact with this one\n    mapping(address => bool) private allowedContracts;\n\n    // Designated # of citizens; **** Needs to be set to immutable following testings ****\n    constructor(\n        string memory ERC721Name_,\n        string memory ERC721AId_,\n        string memory baseURI_,\n        string memory loadURI_,\n        address dataContractAddress_, \n        address traitContractAddress_\n    ) ERC721A(ERC721Name_, ERC721AId_) Ownable() {\n        // set the mint URI\n        baseURI = baseURI_;\n\n        // set the load uri\n        loadURI = loadURI_;\n\n        // set the receiving address to the publisher of this contract\n        receivingAddress = payable(msg.sender);\n\n        allowedContracts[msg.sender] = true;\n\n        // Set data contract\n        avvenireCitizensData = AvvenireCitizensMappingsInterface(dataContractAddress_);\n\n        avvenireTraits = AvvenireTraitsInterface(traitContractAddress_);\n    }\n\n    /**\n      Modifier to check if the contract is allowed to call this contract\n    */\n    modifier callerIsAllowed() {\n        if (!allowedContracts[msg.sender]) revert NotSender();\n        _;\n    }\n\n    modifier stoppedInEmergency {\n        require(!isStopped, \"Emergency stop active\");\n        _;\n    }\n\n    /**\n     * @notice returns the tokenURI of a token id (overrides ERC721 function)\n     * @param tokenId allows the user to request the tokenURI for a particular token id\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        // check to make sure that the tokenId exists\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken(); // error from ERC721A\n\n        // if a change has been requested, only show the loading URI\n        if (avvenireCitizensData.getCitizenChangeRequest(tokenId)) {\n            return loadURI;\n        }\n\n        // if there is a citizen associated with this token, return the chacter's uri\n\n        if (bytes(avvenireCitizensData.getCitizen(tokenId).uri).length > 0) {\n            return avvenireCitizensData.getCitizen(tokenId).uri;\n        }\n\n        // if there is no load uri, citizen uri, or trait uri, just return the base\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\n    }\n\n    /**\n     * @notice Requests a change for a token\n     * @param tokenId allows the user to request a change using their token id\n     */\n    function requestChange(uint256 tokenId) external payable callerIsAllowed {\n        // check if you can even request changes at the moment\n        require(avvenireCitizensData.getMutabilityMode(), \"Tokens immutable\");\n\n        // check if the token exists\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        // check that this is the rightful token owner\n        require(ownerOf(tokenId) == tx.origin, \"Not owner\");\n\n        // check if the token has already been requested to change\n        if (avvenireCitizensData.getCitizenChangeRequest(tokenId)) revert ChangeAlreadyRequested();\n\n        _requestChange(tokenId); // call the internal function\n    }\n\n    function _requestChange(uint256 tokenId) internal {\n        avvenireCitizensData.setCitizenChangeRequest(tokenId, true);\n        emit ChangeRequested(tokenId, msg.sender, tx.origin);\n    }\n\n    /**\n     * @notice Set the citizen data (id, uri, any traits)\n     * note: can't just set the uri, because we need to set the sex also (after the first combination)\n     * @param citizen allows a contract to set the citizen's uri to a new one\n     * @param changeUpdate sets the change data to the correct boolean (allows the option to set the changes to false after something has been updated OR keep it at true if the update isn't done)\n     */\n    function setCitizenData(Citizen memory citizen, bool changeUpdate)\n        external\n        callerIsAllowed\n        stoppedInEmergency\n    {\n        // set the citizen data\n        avvenireCitizensData.setCitizen(citizen);\n\n        // set the token change data\n        avvenireCitizensData.setCitizenChangeRequest(citizen.tokenId, changeUpdate);\n    }\n\n    /**\n     * @notice internal function for getting the default trait (mostly for creating new citizens, waste of compute for creating new traits)\n     * @param originCitizenId for backwards ipfs mapping\n     * @param sex for compatibility\n     * @param traitType for compatibility\n     * @param exists for tracking if the trait actually exists\n     */\n    function baseTrait(\n        uint256 originCitizenId,\n        Sex sex,\n        TraitType traitType,\n        bool exists\n    ) internal returns (Trait memory) {\n        return\n            Trait({\n                tokenId: 0, // there will be no traits with tokenId 0, as that must be the first citizen (cannot have traits without minting the first citizen)\n                uri: \"\",\n                free: false,\n                exists: exists, // allow setting the existence\n                sex: sex,\n                traitType: traitType,\n                originCitizenId: originCitizenId\n            });\n    }\n\n    /**\n     * @notice internal function to create a new citizen\n     * @param tokenId (for binding the token id)\n     */\n    function createNewCitizen(uint256 tokenId) internal {\n        // create a new citizen and put it in the mapping --> just set the token id and that it exists, don't set any of the traits or the URI (as these can be handled in the initial mint)\n        Citizen memory _citizen = Citizen({\n            tokenId: tokenId,\n            uri: \"\", // keep this blank to keep the user from paying excess gas before decomposition (the tokenURI function will handle for blank URIs)\n            exists: true,\n            sex: Sex.NULL, // must be unisex for mint\n            traits: Traits({\n                background: baseTrait(0, Sex.NULL, TraitType.BACKGROUND, false), // minting with a default background\n                body: baseTrait(tokenId, Sex.NULL, TraitType.BODY, true),\n                tattoo: baseTrait(0, Sex.NULL, TraitType.TATTOO, false), // minting with no tattoos\n                eyes: baseTrait(tokenId, Sex.NULL, TraitType.EYES, true),\n                mouth: baseTrait(tokenId, Sex.NULL, TraitType.MOUTH, true),\n                mask: baseTrait(0, Sex.NULL, TraitType.MASK, false), // mint with no masks\n                necklace: baseTrait(0, Sex.NULL, TraitType.NECKLACE, false), // mint with no necklaces\n                clothing: baseTrait(tokenId, Sex.NULL, TraitType.CLOTHING, true),\n                earrings: baseTrait(0, Sex.NULL, TraitType.EARRINGS, false), // mint with no earrings\n                hair: baseTrait(tokenId, Sex.NULL, TraitType.HAIR, true),\n                effect: baseTrait(0, Sex.NULL, TraitType.EFFECT, false) // mint with no effects\n            })\n        });\n\n        avvenireCitizensData.setCitizen(_citizen);\n    }\n\n\n    /**\n     * @notice internal function to make traits transferrable (used when binding traits)\n     * checks that a trait exists (makes user unable to set a default to a default)\n     * @param traitId for locating the trait\n     * @param exists for if the trait exists\n     */\n    function _makeTraitTransferable(uint256 traitId, bool exists) internal {\n        avvenireTraits.makeTraitTransferable(traitId, exists);\n    }\n\n    /**\n     * @notice internal function to make traits non-transferrable\n     * checks that a trait exists (makes user unable to set a default to a default)\n     * @param traitId to indicate which trait to change\n     */\n    function _makeTraitNonTransferrable(uint256 traitId) internal {\n        avvenireTraits.makeTraitNonTransferrable(traitId);\n    }\n\n    /**\n     * @notice a function to bind a tokenId to a citizen (used in combining)\n     * Note: the tokenId must exist, this does not create new tokens (use spawn traits for that)\n     * going to assume that the transaction origin owns the citizen (this function will be called multiple times)\n     * Also, this does not set the character up for changing. It is assumed that many traits will be bound for a character to be changed, so the character should be requested to change once.\n     * @param citizenId gets the citizen\n     * @param traitId for the trait\n     * @param traitType for the trait's type\n     */\n    function bind(\n        uint256 citizenId,\n        uint256 traitId,\n        Sex sex,\n        TraitType traitType\n    ) external callerIsAllowed stoppedInEmergency {\n        // if binding non-empty trait, must require the correct sex and ensure that the tokenId exists\n        if (traitId != 0) {\n            // check if the trait exists\n            require(avvenireCitizensData.getTrait(traitId).exists, \"Trait doesn't exist\"); \n\n            // ensure that the trait and citizen have the same sex\n            require(avvenireCitizensData.getCitizen(citizenId).sex == avvenireCitizensData.getTrait(traitId).sex,\n            \"Sex mismatch\");\n        }\n\n        // check each of the types and bind them accordingly\n        // this logic costs gas, as these are already checked in the market contract\n\n        Trait memory _trait;\n\n        // Set _trait according to its respective id \n        if (traitId == 0) {\n            // this trait does not exist, just set it to the default struct\n            _trait = Trait({\n                tokenId: traitId,\n                originCitizenId: 0, // no need for an origin citizen, it's a default\n                uri: \"\",\n                free: false,\n                exists: false,\n                sex: sex,\n                traitType: traitType\n            });\n        } else {\n            // check the owner of the trait\n            require(avvenireTraits.isOwnerOf(traitId) == tx.origin, \"The transaction origin does not own the trait\");\n            // the trait exists and can be found\n\n            // disallow trading of the bound trait\n            _makeTraitNonTransferrable(traitId);\n            _trait = avvenireCitizensData.getTrait(traitId);\n\n            // require that the trait's type is the same type as the trait Id (if the user tries to put traits on the wrong parts of NFTs)\n            require(_trait.traitType == traitType, \"Trait type does not match trait id\");\n        }\n\n        Citizen memory _citizen = avvenireCitizensData.getCitizen(citizenId);\n\n        // ***\n        // Set all respective traits to free, set temporary _citizen's traits to the respective change\n        // *** \n        if (traitType == TraitType.BACKGROUND) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.background.tokenId, _citizen.traits.background.exists);\n            _citizen.traits.background = _trait;\n\n        } else if (traitType == TraitType.BODY) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.body.tokenId, _citizen.traits.body.exists);\n            _citizen.traits.body = _trait;\n\n        } else if (traitType == TraitType.TATTOO) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.tattoo.tokenId, _citizen.traits.tattoo.exists);\n            _citizen.traits.tattoo = _trait;\n\n        } else if (traitType == TraitType.EYES) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.eyes.tokenId, _citizen.traits.eyes.exists);\n            _citizen.traits.eyes = _trait;\n\n        } else if (traitType == TraitType.MOUTH) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.mouth.tokenId, _citizen.traits.mouth.exists);\n            _citizen.traits.mouth = _trait;\n\n        } else if (traitType == TraitType.MASK) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.mask.tokenId, _citizen.traits.mask.exists);\n            _citizen.traits.mask = _trait;\n\n        } else if (traitType == TraitType.NECKLACE) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.necklace.tokenId, _citizen.traits.necklace.exists);\n            _citizen.traits.necklace = _trait;\n\n        } else if (traitType == TraitType.CLOTHING) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.clothing.tokenId, _citizen.traits.clothing.exists);\n            _citizen.traits.clothing = _trait;\n\n        } else if (traitType == TraitType.EARRINGS) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.earrings.tokenId, _citizen.traits.earrings.exists);\n            _citizen.traits.earrings = _trait;\n\n        } else if (traitType == TraitType.HAIR) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.hair.tokenId, _citizen.traits.hair.exists);\n            _citizen.traits.hair = _trait;\n\n        } else if (traitType == TraitType.EFFECT) {\n            // make the old trait transferrable\n            _makeTraitTransferable(_citizen.traits.effect.tokenId, _citizen.traits.effect.exists);\n            _citizen.traits.effect = _trait;\n        } else {\n            // return an error that the trait type does not exist\n            revert TraitTypeDoesNotExist();\n        }\n\n        // Finally set avvenireCitizensData.tokenIdToCitizen to _citizen\n        avvenireCitizensData.setCitizen(_citizen);\n\n        // emit that the trait was set\n        emit TraitBound(_citizen.tokenId, _trait.tokenId, traitType);\n    }\n\n    /**\n     * @notice external safemint function for allowed contracts\n     * @param address_ for where to mint to\n     * @param quantity_ for the amount\n     */\n    function safeMint(address address_, uint256 quantity_)\n        external\n        callerIsAllowed\n        stoppedInEmergency\n    {\n        require(tx.origin != msg.sender, \"The caller is a user.\");\n\n        // token id end counter\n        uint256 startTokenId = _currentIndex;\n        uint256 endTokenId = startTokenId + quantity_;\n\n        _safeMint(address_, quantity_);\n\n        // iterate over all the tokens\n        for (\n            uint256 tokenId = startTokenId;\n            tokenId < endTokenId;\n            tokenId += 1\n        ) {\n            // create a new citizen if the mint is active\n            createNewCitizen(tokenId);\n\n        } // end of for loop\n    }\n\n    /**\n     * @notice returns the number minted from specified address\n     * @param owner an address of an owner in the NFT collection\n     */\n    function numberMinted(address owner) public view returns (uint256) {\n        // check how many have been minted to this owner --> where is this data stored, in the standard?\n        // _addressData mapping in the ERC721A standard; line 51 - Daniel\n        return _numberMinted(owner);\n    }\n\n    /**\n     * @notice Returns a struct, which contains a token owner's address and the time they acquired the token\n     * @param tokenId the tokenID\n     */\n    function getOwnershipData(\n        uint256 tokenId // storing all the old ownership\n    ) external view returns (TokenOwnership memory) {\n        return _ownershipOf(tokenId); // get historic ownership\n    }\n\n    /**\n     * @notice This overrides the token transfers to check some conditions\n     * @param from indicates the previous address\n     * @param to indicates the new address\n     * @param startTokenId indicates the first token id\n     * @param quantity shows how many tokens have been minted\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal override {\n        // token id end counter\n        uint256 endTokenId = startTokenId + quantity;\n\n        // iterate over all the tokens\n        for (\n            uint256 tokenId = startTokenId;\n            tokenId < endTokenId;\n            tokenId += 1\n        ) {\n            // the tokens SHOULD NOT be awaiting a change (you don't want the user to get surprised)\n            if (!(avvenireCitizensData.getTradeBeforeChange())) {\n                require(!avvenireCitizensData.getCitizenChangeRequest(tokenId), \"Change  requested\");\n            }\n        } // end of loop\n    }\n\n    /**\n     * @notice setter  for emergency stop\n     */\n    function setEmergencyStop(bool _isStopped) external onlyOwner {\n        isStopped = _isStopped; \n    }\n\n    /**\n     * @notice gets rid of the loops used in the ownerOf function in the ERC721A standard\n     * @param quantity the number of tokens that you want to eliminate the loops for\n     */\n    function setOwnersExplicit(uint256 quantity)\n        external\n        callerIsAllowed\n    {\n        _setOwnersExplicit(quantity);\n    }\n\n    /**\n     * @notice function that gets the total supply from the ERC721A contract\n     */\n    function getTotalSupply() external view returns (uint256) {\n        return totalSupply();\n    }\n\n    /**\n     * @notice Sets the mint uri\n     * @param baseURI_ represents the new base uri\n     */\n    function setBaseURI(string calldata baseURI_) external onlyOwner {\n        // set thte global baseURI to this new baseURI_\n        baseURI = baseURI_;\n    }\n\n    /**\n     * @notice Sets the load uri\n     * @param loadURI_ represents the new load uri\n     */\n    function setLoadURI(string calldata loadURI_) external onlyOwner {\n        // set thte global loadURI to this new loadURI_\n        loadURI = loadURI_;\n    }\n\n    /**\n     * @notice Sets the receivingAddress\n     * @param receivingAddress_ is the new receiving address\n     */\n    function setReceivingAddress(address receivingAddress_) external onlyOwner {\n        receivingAddress = payable(receivingAddress_);\n    }\n\n    /**\n     * @notice sets an address's allowed list permission (for future interaction)\n     * @param address_ is the address to set the data for\n     * @param setting is the boolean for the data\n     */\n    function setAllowedPermission(address address_, bool setting)\n        external\n        onlyOwner\n    {\n        allowedContracts[address_] = setting;\n    }\n\n    /**\n     * @notice function to withdraw the money from the contract. Only callable by the owner\n     */\n    function withdrawMoney() external onlyOwner nonReentrant {\n        (bool success, ) = receivingAddress.call{\n            value: address(this).balance }(\"\");\n            \n        require(success, \"Failed transaction\");\n    }\n\n    /**\n     * @notice getter function for citizen data\n     * @param tokenId the citizen's id\n     */\n    function getCitizen(uint256 tokenId) external view returns (Citizen memory) {\n        return avvenireCitizensData.getCitizen(tokenId);\n    }\n\n    /**\n     * @notice a burn function to burn an nft.  The tx.origin must be the owner\n     * @param tokenId the desired token to be burned\n     */\n    function burn(uint256 tokenId) external callerIsAllowed {\n        require (tx.origin == ownerOf(tokenId), \"Not owner\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @notice getter function for number of tokens that a user has burned\n     * @param _owner the user's address\n     */\n    function numberBurned(address _owner) external view returns (uint256) {\n        return _numberBurned(_owner); \n    }\n\n} // End of contract\n"
    },
    "AvvenireCitizensInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Avvenire Citizens Interface\n */\npragma solidity ^0.8.4;\n\nimport \"AvvenireCitizenDataInterface.sol\";\nimport \"IERC721.sol\";\n\ninterface AvvenireCitizensInterface is AvvenireCitizenDataInterface, IERC721 {\n\n    // other functions\n    function getTotalSupply() external returns (uint256);\n\n    function requestChange(uint256) external payable;\n\n    function setCitizenData(Citizen memory, bool) external;\n\n    function bind(\n        uint256,\n        uint256,\n        Sex,\n        TraitType\n    ) external;\n\n    function safeMint(address, uint256) external;\n\n    function numberMinted(address) external returns (uint256);\n\n    function setOwnersExplicit(uint256) external;\n\n    function burn(uint256) external;\n\n    function numberBurned(address) external view returns (uint256);\n}\n\ninterface AvvenireTraitsInterface is AvvenireCitizenDataInterface, IERC721 {\n    function getTotalSupply() external returns (uint256);\n\n    function setTraitData(Trait memory, bool) external;\n\n    function safeMint(address, uint256) external;\n\n    function numberMinted(address) external returns (uint256);\n\n    function setOwnersExplicit(uint256) external;\n\n    function burn(uint256) external;\n\n    function numberBurned(address) external view returns (uint256);\n\n    function makeTraitTransferable(uint256, bool) external;\n\n    function makeTraitNonTransferrable(uint256) external;\n\n    function isOwnerOf(uint256) external view returns (address); \n\n}\n\ninterface AvvenireCitizensMappingsInterface is AvvenireCitizenDataInterface {\n\n    function getCitizen(uint256) external view returns (Citizen memory);\n\n    function getTrait(uint256) external view returns (Trait memory);\n\n    function setCitizen(Citizen memory) external;\n\n    function setTrait(Trait memory) external;\n\n    function setAllowedPermission(address, bool) external;\n\n    function setTraitFreedom(uint256, bool) external;\n\n    function isCitizenInitialized(uint256) external view returns (bool);\n\n    function setCitizenChangeRequest(uint256, bool) external;\n\n    function getCitizenChangeRequest(uint256) external view returns(bool);\n \n    function setTraitChangeRequest (uint256, bool) external;\n\n    function getTraitChangeRequest(uint256) external view returns(bool);\n\n    // mutability config stuct\n    struct MutabilityConfig {\n        bool mutabilityMode; // initially set the contract to be immutable, this will keep people from trying to use the function before it is released\n        // payment information\n        uint256 mutabilityCost; // the amount that it costs to make a change (initializes to 0)\n        // trading information\n        bool tradeBeforeChange; // initially set to false, don't want people to tokens that are pending changes\n    }\n\n    function getMutabilityMode() external view returns (bool);\n\n    function getTradeBeforeChange() external view returns (bool);\n\n    function getChangeCost() external view returns (uint256);\n\n}\n\n"
    },
    "AvvenireCitizenDataInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Avvenire Citizen Data Interface\n*/\npragma solidity ^0.8.4;\n\n\ninterface AvvenireCitizenDataInterface {\n    // traits are bound to sex for fitting\n    enum Sex {NULL, MALE, FEMALE}\n\n    // make an enumerable for trait types (meant to be overridden with traits from individual project)\n    enum TraitType {\n        NULL,\n        BACKGROUND,\n        BODY,\n        TATTOO,\n        EYES,\n        MOUTH,\n        MASK,\n        NECKLACE,\n        CLOTHING,\n        EARRINGS,\n        HAIR,\n        EFFECT\n    }\n\n    // struct for storing trait data for the citizen (used ONLY in the citizen struct)\n    struct Trait {\n        uint256 tokenId; // for mapping traits to their tokens\n        string uri;\n        bool free; // stores if the trait is free from the citizen (defaults to false)\n        bool exists; // checks existence (for minting vs transferring)\n        Sex sex;\n        TraitType traitType;\n        uint256 originCitizenId; // for mapping traits to their previous citizen owners\n    }\n\n    // struct for storing all the traits\n    struct Traits {\n        Trait background;\n        Trait body;\n        Trait tattoo;\n        Trait eyes;\n        Trait mouth;\n        Trait mask;\n        Trait necklace;\n        Trait clothing;\n        Trait earrings;\n        Trait hair;\n        Trait effect;\n    }\n\n\n    // struct for storing citizens\n    struct Citizen {\n        uint256 tokenId;\n        string uri;\n        bool exists; //  checks existence (for minting vs transferring)\n        Sex sex;\n        Traits traits;\n    }\n}\n"
    },
    "IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"IERC721.sol\";\nimport \"IERC721Receiver.sol\";\nimport \"IERC721Metadata.sol\";\nimport \"Address.sol\";\nimport \"Context.sol\";\nimport \"Strings.sol\";\nimport \"ERC165.sol\";\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\n            !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = to;\n            currSlot.startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev This is equivalent to _burn(tokenId, false)\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.addr;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            AddressData storage addressData = _addressData[from];\n            addressData.balance -= 1;\n            addressData.numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenOwnership storage currSlot = _ownerships[tokenId];\n            currSlot.addr = from;\n            currSlot.startTimestamp = uint64(block.timestamp);\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n            if (nextSlot.addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.addr = from;\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
    },
    "IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "ERC721AOwnersExplicit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"ERC721A.sol\";\n\nerror AllOwnershipsHaveBeenSet();\nerror QuantityMustBeNonZero();\nerror NoTokensMintedYet();\n\nabstract contract ERC721AOwnersExplicit is ERC721A {\n    uint256 public nextOwnerToExplicitlySet;\n\n    /**\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\n     */\n    function _setOwnersExplicit(uint256 quantity) internal {\n        if (quantity == 0) revert QuantityMustBeNonZero();\n        if (_currentIndex == _startTokenId()) revert NoTokensMintedYet();\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\n        if (_nextOwnerToExplicitlySet == 0) {\n            _nextOwnerToExplicitlySet = _startTokenId();\n        }\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\n\n        // Index underflow is impossible.\n        // Counter or index overflow is incredibly unrealistic.\n        unchecked {\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\n\n            // Set the end index to be the last token index\n            if (endIndex + 1 > _currentIndex) {\n                endIndex = _currentIndex - 1;\n            }\n\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\n                    TokenOwnership memory ownership = _ownershipOf(i);\n                    _ownerships[i].addr = ownership.addr;\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\n                }\n            }\n\n            nextOwnerToExplicitlySet = endIndex + 1;\n        }\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "AvvenireCitizensERC721.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}