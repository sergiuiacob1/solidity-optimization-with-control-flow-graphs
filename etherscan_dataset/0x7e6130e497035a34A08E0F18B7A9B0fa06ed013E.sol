{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/release/core/fund-deployer/IFundDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IFundDeployer Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IFundDeployer {\n    function getOwner() external view returns (address);\n\n    function hasReconfigurationRequest(address) external view returns (bool);\n\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\n\n    function isAllowedVaultCall(\n        address,\n        bytes4,\n        bytes32\n    ) external view returns (bool);\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IDerivativePriceFeed Interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Simple interface for derivative price source oracle implementations\ninterface IDerivativePriceFeed {\n    function calcUnderlyingValues(address, uint256)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function isSupportedAsset(address) external view returns (bool);\n}\n"
    },
    "contracts/release/infrastructure/price-feeds/derivatives/feeds/CurvePriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../../../interfaces/ICurveAddressProvider.sol\";\nimport \"../../../../interfaces/ICurveLiquidityPool.sol\";\nimport \"../../../../interfaces/ICurvePoolOwner.sol\";\nimport \"../../../../interfaces/ICurveRegistryMain.sol\";\nimport \"../../../../interfaces/ICurveRegistryMetapoolFactory.sol\";\nimport \"../../../../utils/FundDeployerOwnerMixin.sol\";\nimport \"../IDerivativePriceFeed.sol\";\n\n/// @title CurvePriceFeed Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Price feed for Curve pool tokens\ncontract CurvePriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\n    using SafeMath for uint256;\n\n    event CurvePoolOwnerSet(address poolOwner);\n\n    event DerivativeAdded(address indexed derivative, address indexed pool);\n\n    event DerivativeRemoved(address indexed derivative);\n\n    event InvariantProxyAssetForPoolSet(address indexed pool, address indexed invariantProxyAsset);\n\n    event PoolRemoved(address indexed pool);\n\n    event ValidatedVirtualPriceForPoolUpdated(address indexed pool, uint256 virtualPrice);\n\n    uint256 private constant ADDRESS_PROVIDER_METAPOOL_FACTORY_ID = 3;\n    uint256 private constant VIRTUAL_PRICE_DEVIATION_DIVISOR = 10000;\n    uint256 private constant VIRTUAL_PRICE_UNIT = 10**18;\n\n    ICurveAddressProvider private immutable ADDRESS_PROVIDER_CONTRACT;\n    uint256 private immutable VIRTUAL_PRICE_DEVIATION_THRESHOLD;\n\n    // We take one asset as representative of the pool's invariant, e.g., WETH for ETH-based pools.\n    // Caching invariantProxyAssetDecimals in a packed storage slot\n    // removes an additional external call and cold SLOAD operation during value lookups.\n    struct PoolInfo {\n        address invariantProxyAsset; // 20 bytes\n        uint8 invariantProxyAssetDecimals; // 1 byte\n        uint88 lastValidatedVirtualPrice; // 11 bytes (could safely be 8-10 bytes)\n    }\n\n    address private curvePoolOwner;\n\n    // Pool tokens and liquidity gauge tokens are treated the same for pricing purposes\n    mapping(address => address) private derivativeToPool;\n    mapping(address => PoolInfo) private poolToPoolInfo;\n\n    // Not necessary for this contract, but used by Curve liquidity adapters\n    mapping(address => address) private poolToLpToken;\n\n    constructor(\n        address _fundDeployer,\n        address _addressProvider,\n        address _poolOwner,\n        uint256 _virtualPriceDeviationThreshold\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\n        ADDRESS_PROVIDER_CONTRACT = ICurveAddressProvider(_addressProvider);\n        VIRTUAL_PRICE_DEVIATION_THRESHOLD = _virtualPriceDeviationThreshold;\n\n        __setCurvePoolOwner(_poolOwner);\n    }\n\n    /// @notice Converts a given amount of a derivative to its underlying asset values\n    /// @param _derivative The derivative to convert\n    /// @param _derivativeAmount The amount of the derivative to convert\n    /// @return underlyings_ The underlying assets for the _derivative\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\n        external\n        override\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\n    {\n        address pool = getPoolForDerivative(_derivative);\n        require(pool != address(0), \"calcUnderlyingValues: _derivative is not supported\");\n\n        PoolInfo memory poolInfo = getPoolInfo(pool);\n\n        uint256 virtualPrice = ICurveLiquidityPool(pool).get_virtual_price();\n\n        // Validate and update the cached lastValidatedVirtualPrice if:\n        /// 1. a pool requires virtual price validation, and\n        /// 2. the unvalidated `virtualPrice` deviates from the PoolInfo.lastValidatedVirtualPrice value\n        /// by more than the tolerated \"deviation threshold\" (e.g., 1%).\n        /// This is an optimization to save gas on validating non-reentrancy during the virtual price query,\n        /// since the virtual price increases relatively slowly as the pool accrues fees over time.\n        if (\n            poolInfo.lastValidatedVirtualPrice > 0 &&\n            __virtualPriceDiffExceedsThreshold(\n                virtualPrice,\n                uint256(poolInfo.lastValidatedVirtualPrice)\n            )\n        ) {\n            __updateValidatedVirtualPrice(pool, virtualPrice);\n        }\n\n        underlyings_ = new address[](1);\n        underlyings_[0] = poolInfo.invariantProxyAsset;\n\n        underlyingAmounts_ = new uint256[](1);\n        if (poolInfo.invariantProxyAssetDecimals == 18) {\n            underlyingAmounts_[0] = _derivativeAmount.mul(virtualPrice).div(VIRTUAL_PRICE_UNIT);\n        } else {\n            underlyingAmounts_[0] = _derivativeAmount\n                .mul(virtualPrice)\n                .mul(10**uint256(poolInfo.invariantProxyAssetDecimals))\n                .div(VIRTUAL_PRICE_UNIT)\n                .div(VIRTUAL_PRICE_UNIT);\n        }\n\n        return (underlyings_, underlyingAmounts_);\n    }\n\n    /// @notice Checks if an asset is supported by the price feed\n    /// @param _asset The asset to check\n    /// @return isSupported_ True if the asset is supported\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\n        return getPoolForDerivative(_asset) != address(0);\n    }\n\n    //////////////////////////\n    // DERIVATIVES REGISTRY //\n    //////////////////////////\n\n    // addPools() is the primary action to add validated lpTokens and gaugeTokens as derivatives.\n    // addGaugeTokens() can be used to add validated gauge tokens for an already-registered pool.\n    // addPoolsWithoutValidation() and addGaugeTokensWithoutValidation() can be used as overrides.\n    // It is possible to remove all pool data and derivatives (separately).\n    // It is possible to update the invariant proxy asset for any pool.\n    // It is possible to update whether the pool's virtual price is reenterable.\n\n    /// @notice Adds validated gaugeTokens to the price feed\n    /// @param _gaugeTokens The ordered gauge tokens\n    /// @param _pools The ordered pools corresponding to _gaugeTokens\n    /// @dev All params are corresponding, equal length arrays.\n    /// _pools must already have been added via an addPools~() function\n    function addGaugeTokens(address[] calldata _gaugeTokens, address[] calldata _pools)\n        external\n        onlyFundDeployerOwner\n    {\n        ICurveRegistryMain registryContract = __getRegistryMainContract();\n        ICurveRegistryMetapoolFactory factoryContract = __getRegistryMetapoolFactoryContract();\n\n        for (uint256 i; i < _gaugeTokens.length; i++) {\n            if (factoryContract.get_gauge(_pools[i]) != _gaugeTokens[i]) {\n                __validateGaugeMainRegistry(_gaugeTokens[i], _pools[i], registryContract);\n            }\n        }\n\n        __addGaugeTokens(_gaugeTokens, _pools);\n    }\n\n    /// @notice Adds unvalidated gaugeTokens to the price feed\n    /// @param _gaugeTokens The ordered gauge tokens\n    /// @param _pools The ordered pools corresponding to _gaugeTokens\n    /// @dev Should only be used if something is incorrectly failing in the registry validation,\n    /// or if gauge tokens exist outside of the registries supported by this price feed,\n    /// e.g., a wrapper for non-tokenized gauges.\n    /// All params are corresponding, equal length arrays.\n    /// _pools must already have been added via an addPools~() function.\n    function addGaugeTokensWithoutValidation(\n        address[] calldata _gaugeTokens,\n        address[] calldata _pools\n    ) external onlyFundDeployerOwner {\n        __addGaugeTokens(_gaugeTokens, _pools);\n    }\n\n    /// @notice Adds validated Curve pool info, lpTokens, and gaugeTokens to the price feed\n    /// @param _pools The ordered Curve pools\n    /// @param _invariantProxyAssets The ordered invariant proxy assets corresponding to _pools,\n    /// e.g., WETH for ETH-based pools\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    /// @param _lpTokens The ordered lpToken corresponding to _pools\n    /// @param _gaugeTokens The ordered gauge token corresponding to _pools\n    /// @dev All params are corresponding, equal length arrays.\n    /// address(0) can be used for any _gaugeTokens index to omit the gauge (e.g., no gauge token exists).\n    /// _lpTokens is not technically necessary since it is knowable from a Curve registry,\n    /// but it's better to use Curve's upgradable contracts as an input validation rather than fully-trusted.\n    function addPools(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) external onlyFundDeployerOwner {\n        ICurveRegistryMain registryContract = __getRegistryMainContract();\n        ICurveRegistryMetapoolFactory factoryContract = __getRegistryMetapoolFactoryContract();\n\n        for (uint256 i; i < _pools.length; i++) {\n            // Validate the lpToken and gauge token based on registry\n            if (_lpTokens[i] == registryContract.get_lp_token(_pools[i])) {\n                // Main registry\n\n                if (_gaugeTokens[i] != address(0)) {\n                    __validateGaugeMainRegistry(_gaugeTokens[i], _pools[i], registryContract);\n                }\n            } else if (_lpTokens[i] == _pools[i] && factoryContract.get_n_coins(_pools[i]) > 0) {\n                // Metapool factory registry\n                // lpToken and pool are the same address\n                // get_n_coins() is arbitrarily used to validate the pool is on this registry\n\n                if (_gaugeTokens[i] != address(0)) {\n                    __validateGaugeMetapoolFactoryRegistry(\n                        _gaugeTokens[i],\n                        _pools[i],\n                        factoryContract\n                    );\n                }\n            } else {\n                revert(\"addPools: Invalid inputs\");\n            }\n        }\n\n        __addPools(\n            _pools,\n            _invariantProxyAssets,\n            _reentrantVirtualPrices,\n            _lpTokens,\n            _gaugeTokens\n        );\n    }\n\n    /// @notice Adds unvalidated Curve pool info, lpTokens, and gaugeTokens to the price feed\n    /// @param _pools The ordered Curve pools\n    /// @param _invariantProxyAssets The ordered invariant proxy assets corresponding to _pools,\n    /// e.g., WETH for ETH-based pools\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    /// @param _lpTokens The ordered lpToken corresponding to _pools\n    /// @param _gaugeTokens The ordered gauge token corresponding to _pools\n    /// @dev Should only be used if something is incorrectly failing in the registry validation,\n    /// or if pools exist outside of the registries supported by this price feed.\n    /// All params are corresponding, equal length arrays.\n    /// address(0) can be used for any _gaugeTokens index to omit the gauge (e.g., no gauge token exists).\n    function addPoolsWithoutValidation(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) external onlyFundDeployerOwner {\n        __addPools(\n            _pools,\n            _invariantProxyAssets,\n            _reentrantVirtualPrices,\n            _lpTokens,\n            _gaugeTokens\n        );\n    }\n\n    /// @notice Removes derivatives from the price feed\n    /// @param _derivatives The derivatives to remove\n    /// @dev Unlikely to be needed, just in case of bad storage entry.\n    /// Can remove both lpToken and gaugeToken from derivatives list,\n    /// but does not remove lpToken from pool info cache.\n    function removeDerivatives(address[] calldata _derivatives) external onlyFundDeployerOwner {\n        for (uint256 i; i < _derivatives.length; i++) {\n            delete derivativeToPool[_derivatives[i]];\n\n            emit DerivativeRemoved(_derivatives[i]);\n        }\n    }\n\n    /// @notice Removes pools from the price feed\n    /// @param _pools The pools to remove\n    /// @dev Unlikely to be needed, just in case of bad storage entry.\n    /// Does not remove lpToken nor gauge tokens from derivatives list.\n    function removePools(address[] calldata _pools) external onlyFundDeployerOwner {\n        for (uint256 i; i < _pools.length; i++) {\n            delete poolToPoolInfo[_pools[i]];\n            delete poolToLpToken[_pools[i]];\n\n            emit PoolRemoved(_pools[i]);\n        }\n    }\n\n    /// @notice Sets the Curve pool owner\n    /// @param _nextPoolOwner The next pool owner value\n    function setCurvePoolOwner(address _nextPoolOwner) external onlyFundDeployerOwner {\n        __setCurvePoolOwner(_nextPoolOwner);\n    }\n\n    /// @notice Updates the PoolInfo for the given pools\n    /// @param _pools The ordered pools\n    /// @param _invariantProxyAssets The ordered invariant asset proxy assets\n    /// @param _reentrantVirtualPrices The ordered flags corresponding to _pools,\n    /// true if the get_virtual_price() function is potentially reenterable\n    function updatePoolInfo(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices\n    ) external onlyFundDeployerOwner {\n        require(\n            _pools.length == _invariantProxyAssets.length &&\n                _pools.length == _reentrantVirtualPrices.length,\n            \"updatePoolInfo: Unequal arrays\"\n        );\n\n        for (uint256 i; i < _pools.length; i++) {\n            __setPoolInfo(_pools[i], _invariantProxyAssets[i], _reentrantVirtualPrices[i]);\n        }\n    }\n\n    // PRIVATE FUNCTIONS\n\n    /// @dev Helper to add a derivative to the price feed\n    function __addDerivative(address _derivative, address _pool) private {\n        require(\n            getPoolForDerivative(_derivative) == address(0),\n            \"__addDerivative: Already exists\"\n        );\n\n        // Assert that the assumption that all Curve pool tokens are 18 decimals\n        require(ERC20(_derivative).decimals() == 18, \"__addDerivative: Not 18-decimal\");\n\n        derivativeToPool[_derivative] = _pool;\n\n        emit DerivativeAdded(_derivative, _pool);\n    }\n\n    /// @dev Helper for common logic in addGauges~() functions\n    function __addGaugeTokens(address[] calldata _gaugeTokens, address[] calldata _pools) private {\n        require(_gaugeTokens.length == _pools.length, \"__addGaugeTokens: Unequal arrays\");\n\n        for (uint256 i; i < _gaugeTokens.length; i++) {\n            require(\n                getLpTokenForPool(_pools[i]) != address(0),\n                \"__addGaugeTokens: Pool not registered\"\n            );\n            // Not-yet-registered _gaugeTokens[i] tested in __addDerivative()\n\n            __addDerivative(_gaugeTokens[i], _pools[i]);\n        }\n    }\n\n    /// @dev Helper for common logic in addPools~() functions\n    function __addPools(\n        address[] calldata _pools,\n        address[] calldata _invariantProxyAssets,\n        bool[] calldata _reentrantVirtualPrices,\n        address[] calldata _lpTokens,\n        address[] calldata _gaugeTokens\n    ) private {\n        require(\n            _pools.length == _invariantProxyAssets.length &&\n                _pools.length == _reentrantVirtualPrices.length &&\n                _pools.length == _lpTokens.length &&\n                _pools.length == _gaugeTokens.length,\n            \"__addPools: Unequal arrays\"\n        );\n\n        for (uint256 i; i < _pools.length; i++) {\n            // Redundant for validated addPools()\n            require(_lpTokens[i] != address(0), \"__addPools: Empty lpToken\");\n            // Empty _pools[i] reverts during __validatePoolCompatibility\n            // Empty _invariantProxyAssets[i] reverts during __setPoolInfo\n\n            // Validate new pool's compatibility with price feed\n            require(getLpTokenForPool(_pools[i]) == address(0), \"__addPools: Already registered\");\n            __validatePoolCompatibility(_pools[i]);\n\n            // Register pool info\n            __setPoolInfo(_pools[i], _invariantProxyAssets[i], _reentrantVirtualPrices[i]);\n            poolToLpToken[_pools[i]] = _lpTokens[i];\n\n            // Add lpToken and gauge token as derivatives\n            __addDerivative(_lpTokens[i], _pools[i]);\n            if (_gaugeTokens[i] != address(0)) {\n                __addDerivative(_gaugeTokens[i], _pools[i]);\n            }\n        }\n    }\n\n    /// @dev Helper to get the main Curve registry contract\n    function __getRegistryMainContract() private view returns (ICurveRegistryMain contract_) {\n        return ICurveRegistryMain(ADDRESS_PROVIDER_CONTRACT.get_registry());\n    }\n\n    /// @dev Helper to get the Curve metapool factory registry contract\n    function __getRegistryMetapoolFactoryContract()\n        private\n        view\n        returns (ICurveRegistryMetapoolFactory contract_)\n    {\n        return\n            ICurveRegistryMetapoolFactory(\n                ADDRESS_PROVIDER_CONTRACT.get_address(ADDRESS_PROVIDER_METAPOOL_FACTORY_ID)\n            );\n    }\n\n    /// @dev Helper to call a known non-reenterable pool function\n    function __makeNonReentrantPoolCall(address _pool) private {\n        ICurvePoolOwner(getCurvePoolOwner()).withdraw_admin_fees(_pool);\n    }\n\n    /// @dev Helper to set the Curve pool owner\n    function __setCurvePoolOwner(address _nextPoolOwner) private {\n        curvePoolOwner = _nextPoolOwner;\n\n        emit CurvePoolOwnerSet(_nextPoolOwner);\n    }\n\n    /// @dev Helper to set the PoolInfo for a given pool\n    function __setPoolInfo(\n        address _pool,\n        address _invariantProxyAsset,\n        bool _reentrantVirtualPrice\n    ) private {\n        uint256 lastValidatedVirtualPrice;\n        if (_reentrantVirtualPrice) {\n            // Validate the virtual price by calling a non-reentrant pool function\n            __makeNonReentrantPoolCall(_pool);\n\n            lastValidatedVirtualPrice = ICurveLiquidityPool(_pool).get_virtual_price();\n\n            emit ValidatedVirtualPriceForPoolUpdated(_pool, lastValidatedVirtualPrice);\n        }\n\n        poolToPoolInfo[_pool] = PoolInfo({\n            invariantProxyAsset: _invariantProxyAsset,\n            invariantProxyAssetDecimals: ERC20(_invariantProxyAsset).decimals(),\n            lastValidatedVirtualPrice: uint88(lastValidatedVirtualPrice)\n        });\n\n        emit InvariantProxyAssetForPoolSet(_pool, _invariantProxyAsset);\n    }\n\n    /// @dev Helper to update the last validated virtual price for a given pool\n    function __updateValidatedVirtualPrice(address _pool, uint256 _virtualPrice) private {\n        // Validate the virtual price by calling a non-reentrant pool function\n        __makeNonReentrantPoolCall(_pool);\n\n        // _virtualPrice is now considered valid\n        poolToPoolInfo[_pool].lastValidatedVirtualPrice = uint88(_virtualPrice);\n\n        emit ValidatedVirtualPriceForPoolUpdated(_pool, _virtualPrice);\n    }\n\n    /// @dev Helper to validate a gauge on the main Curve registry\n    function __validateGaugeMainRegistry(\n        address _gauge,\n        address _pool,\n        ICurveRegistryMain _mainRegistryContract\n    ) private view {\n        (address[10] memory gauges, ) = _mainRegistryContract.get_gauges(_pool);\n        for (uint256 i; i < gauges.length; i++) {\n            if (_gauge == gauges[i]) {\n                return;\n            }\n        }\n\n        revert(\"__validateGaugeMainRegistry: Invalid gauge\");\n    }\n\n    /// @dev Helper to validate a gauge on the Curve metapool factory registry\n    function __validateGaugeMetapoolFactoryRegistry(\n        address _gauge,\n        address _pool,\n        ICurveRegistryMetapoolFactory _metapoolFactoryRegistryContract\n    ) private view {\n        require(\n            _gauge == _metapoolFactoryRegistryContract.get_gauge(_pool),\n            \"__validateGaugeMetapoolFactoryRegistry: Invalid gauge\"\n        );\n    }\n\n    /// @dev Helper to validate a pool's compatibility with the price feed.\n    /// Pool must implement expected get_virtual_price() function.\n    function __validatePoolCompatibility(address _pool) private view {\n        require(\n            ICurveLiquidityPool(_pool).get_virtual_price() > 0,\n            \"__validatePoolCompatibility: Incompatible\"\n        );\n    }\n\n    /// @dev Helper to check if the difference between lastValidatedVirtualPrice and the current virtual price\n    /// exceeds the allowed threshold before the current virtual price must be validated and stored\n    function __virtualPriceDiffExceedsThreshold(\n        uint256 _currentVirtualPrice,\n        uint256 _lastValidatedVirtualPrice\n    ) private view returns (bool exceedsThreshold_) {\n        // Uses the absolute delta between current and last validated virtual prices for the rare\n        // case where a virtual price might have decreased (e.g., rounding, slashing, yet unknown\n        // manipulation vector, etc)\n        uint256 absDiff;\n        if (_currentVirtualPrice > _lastValidatedVirtualPrice) {\n            absDiff = _currentVirtualPrice.sub(_lastValidatedVirtualPrice);\n        } else {\n            absDiff = _lastValidatedVirtualPrice.sub(_currentVirtualPrice);\n        }\n\n        return\n            absDiff >\n            _lastValidatedVirtualPrice.mul(VIRTUAL_PRICE_DEVIATION_THRESHOLD).div(\n                VIRTUAL_PRICE_DEVIATION_DIVISOR\n            );\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the Curve pool owner\n    /// @return poolOwner_ The Curve pool owner\n    function getCurvePoolOwner() public view returns (address poolOwner_) {\n        return curvePoolOwner;\n    }\n\n    /// @notice Gets the lpToken for a given pool\n    /// @param _pool The pool\n    /// @return lpToken_ The lpToken\n    function getLpTokenForPool(address _pool) public view returns (address lpToken_) {\n        return poolToLpToken[_pool];\n    }\n\n    /// @notice Gets the stored PoolInfo for a given pool\n    /// @param _pool The pool\n    /// @return poolInfo_ The PoolInfo\n    function getPoolInfo(address _pool) public view returns (PoolInfo memory poolInfo_) {\n        return poolToPoolInfo[_pool];\n    }\n\n    /// @notice Gets the pool for a given derivative\n    /// @param _derivative The derivative\n    /// @return pool_ The pool\n    function getPoolForDerivative(address _derivative) public view returns (address pool_) {\n        return derivativeToPool[_derivative];\n    }\n}\n"
    },
    "contracts/release/interfaces/ICurveAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveAddressProvider interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurveAddressProvider {\n    function get_address(uint256) external view returns (address);\n\n    function get_registry() external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurveLiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveLiquidityPool interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurveLiquidityPool {\n    function coins(int128) external view returns (address);\n\n    function coins(uint256) external view returns (address);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function underlying_coins(int128) external view returns (address);\n\n    function underlying_coins(uint256) external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurvePoolOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurvePoolOwner interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface ICurvePoolOwner {\n    function withdraw_admin_fees(address) external;\n}\n"
    },
    "contracts/release/interfaces/ICurveRegistryMain.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveRegistryMain interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Limited interface for the Curve Registry contract at ICurveAddressProvider.get_address(0)\ninterface ICurveRegistryMain {\n    function get_gauges(address) external view returns (address[10] memory, int128[10] memory);\n\n    function get_lp_token(address) external view returns (address);\n}\n"
    },
    "contracts/release/interfaces/ICurveRegistryMetapoolFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title ICurveRegistryMetapoolFactory interface\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Limited interface for the Curve Registry contract at ICurveAddressProvider.get_address(3)\ninterface ICurveRegistryMetapoolFactory {\n    function get_gauge(address) external view returns (address);\n\n    function get_n_coins(address) external view returns (uint256);\n}\n"
    },
    "contracts/release/utils/FundDeployerOwnerMixin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"../core/fund-deployer/IFundDeployer.sol\";\n\n/// @title FundDeployerOwnerMixin Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\nabstract contract FundDeployerOwnerMixin {\n    address internal immutable FUND_DEPLOYER;\n\n    modifier onlyFundDeployerOwner() {\n        require(\n            msg.sender == getOwner(),\n            \"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\"\n        );\n        _;\n    }\n\n    constructor(address _fundDeployer) public {\n        FUND_DEPLOYER = _fundDeployer;\n    }\n\n    /// @notice Gets the owner of this contract\n    /// @return owner_ The owner\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\n    function getOwner() public view returns (address owner_) {\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets the `FUND_DEPLOYER` variable\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\n    function getFundDeployer() public view returns (address fundDeployer_) {\n        return FUND_DEPLOYER;\n    }\n}\n"
    }
  }
}}