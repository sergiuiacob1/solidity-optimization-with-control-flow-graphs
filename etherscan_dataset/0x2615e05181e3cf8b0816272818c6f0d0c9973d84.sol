{"ERC721.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity \u003e=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 =\u003e address) internal _ownerOf;\n\n    mapping(address =\u003e uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 =\u003e address) public getApproved;\n\n    mapping(address =\u003e mapping(address =\u003e bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender\u0027s balance is impossible because we check for\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"},"MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// MODIFIED MerkleProof contracts from OpenZeppelin to use calldata instead of memory for the proofs.\n// See https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3200/\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs \u0026 pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] calldata proof, bytes32 leaf)\n        internal\n        pure\n        returns (bytes32)\n    {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i \u003c proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash \u003c= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b)\n        private\n        pure\n        returns (bytes32 value)\n    {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"Owned.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity \u003e=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnerUpdated(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setOwner(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n"},"POTC.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/***   \n  _____                     _                __   _   _             _____                _ _                      \n |  __ \\                   | |              / _| | | | |           / ____|              (_) |                     \n | |__) |_ _ _ __ _ __ ___ | |_ ___    ___ | |_  | |_| |__   ___  | |     __ _ _ __ _ __ _| |__   ___  __ _ _ __  \n |  ___/ _` | \u0027__| \u0027__/ _ \\| __/ __|  / _ \\|  _| | __| \u0027_ \\ / _ \\ | |    / _` | \u0027__| \u0027__| | \u0027_ \\ / _ \\/ _` | \u0027_ \\ \n | |  | (_| | |  | | | (_) | |_\\__ \\ | (_) | |   | |_| | | |  __/ | |___| (_| | |  | |  | | |_) |  __/ (_| | | | |\n |_|   \\__,_|_|  |_|  \\___/ \\__|___/  \\___/|_|    \\__|_| |_|\\___|  \\_____\\__,_|_|  |_|  |_|_.__/ \\___|\\__,_|_| |_|                                                                                                                                                                                                            \n*/\n\n/// @title Parrots of the Carribean\n/// @author rayne \u0026 jackparrot\n\npragma solidity \u003e=0.8.13;\n\nimport \"./ERC721.sol\";\nimport \"./Owned.sol\";\nimport \"./MerkleProof.sol\";\nimport \"./Strings.sol\";\n\n/// @notice Thrown when attempting to mint while total supply has been minted.\nerror MintedOut();\n/// @notice Thrown when minter does not have enough ether.\nerror NotEnoughFunds();\n/// @notice Thrown when a public minter / whitelist minter has reached their mint capacity.\nerror AlreadyClaimed();\n/// @notice Thrown when the jam sale is not active.\nerror JamSaleNotActive();\n/// @notice Thrown when the public sale is not active.\nerror PublicSaleNotActive();\n/// @notice Thrown when the msg.sender is not in the jam list.\nerror NotJamListed();\n/// @notice Thrown when a signer is not authorized.\nerror NotAuthorized();\n\ncontract POTC is ERC721, Owned {\n    using Strings for uint256;\n\n    /// @notice The total supply of POTC.\n    uint256 public constant MAX_SUPPLY = 555;\n    /// @notice Mint price.\n    uint256 public mintPrice = 0.1 ether;\n    /// @notice The current supply starts at 25 due to the team minting from tokenID 0 to 14, and 15-24 reserved for legendaries.\n    /// @dev Using total supply as naming to make the pre-reveal easier with a pre-deployed S3 script.\n    uint256 public totalSupply = 25;\n\n    /// @notice The base URI.\n    string baseURI;\n\n    /// @notice Returns true when the jam list sale is active, false otherwise.\n    bool public jamSaleActive;\n    /// @notice Returns true when the public sale is active, false otherwise.\n    bool public publicSaleActive;\n\n    /// @notice Keeps track of whether jamlist has already minted or not. Max 1 mint.\n    mapping(address =\u003e bool) public whitelistClaimed;\n    /// @notice Keeps track of whether a public minter has already minted or not. Max 1 mint.\n    mapping(address =\u003e bool) public publicClaimed;\n\n    /// @notice Merkle root hash for whitelist verification.\n    /// @dev Set to immutable instead of hard-coded to prevent human-error when deploying.\n    bytes32 public merkleRoot;\n    /// @notice Address of the signer who is allowed to burn POTC.\n    address private potcBurner;\n\n    constructor(string memory _baseURI, bytes32 _merkleRoot)\n        ERC721(\"Parrots of the Carribean\", \"POTC\")\n        Owned(msg.sender)\n    {\n        baseURI = _baseURI;\n        merkleRoot = _merkleRoot;\n        _balanceOf[msg.sender] = 25;\n        unchecked {\n            for (uint256 i = 0; i \u003c 25; ++i) {\n                _ownerOf[i] = msg.sender;\n                emit Transfer(address(0), msg.sender, i);\n            }\n        }\n    }\n\n    /// @notice Allows the owner to change the base URI of POTC\u0027s corresponding metadata.\n    /// @param _uri The new URI to set the base URI to.\n    function setURI(string calldata _uri) external onlyOwner {\n        baseURI = _uri;\n    }\n\n    /// @notice The URI pointing to the metadata of a specific assett.\n    /// @param _id The token ID of the requested parrot. Hardcoded .json as suffix.\n    /// @return The metadata URI.\n    function tokenURI(uint256 _id)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        return string(abi.encodePacked(baseURI, _id.toString(), \".json\"));\n    }\n\n    /// @notice Public POTC mint.\n    /// @dev Allows any non-contract signer to mint a single POTC. Capped by 1.\n    /// @dev Jamlisted addresses can join mint both one POTC during jam sale \u0026 public sale.\n    /// @dev Current supply addition can be unchecked, as it cannot overflow.\n    /// TODO chain if statements to see if we can save gas?\n    function publicMint() public payable {\n        if (!publicSaleActive) revert PublicSaleNotActive();\n        if (publicClaimed[msg.sender]) revert AlreadyClaimed();\n        if (totalSupply + 1 \u003e MAX_SUPPLY) revert MintedOut();\n        if ((msg.value) \u003c mintPrice) revert NotEnoughFunds();\n\n        unchecked {\n            publicClaimed[msg.sender] = true;\n            _mint(msg.sender, totalSupply);\n            ++totalSupply;\n        }\n    }\n\n    /// @notice Mints a POTC for a signer on the jamlist. Gets the tokenID correspondign to the current supply.\n    /// @dev We do not keep track of the whitelist supply, considering only a total of 444 addresses will be valid in the merkle tree.\n    /// @dev This means that the maximum supply including full jamlist mint and team mint can be 459 at most, as each address can mint once.\n    /// @dev Current supply addition can be unchecked, as it cannot overflow.\n    /// @param _merkleProof The merkle proof based on the address of the signer as input.\n    function jamListMint(bytes32[] calldata _merkleProof) public payable {\n        if (!jamSaleActive) revert JamSaleNotActive();\n        if (whitelistClaimed[msg.sender]) revert AlreadyClaimed();\n        if (totalSupply + 1 \u003e MAX_SUPPLY) revert MintedOut();\n        if ((msg.value) \u003c mintPrice) revert NotEnoughFunds();\n\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        if (!MerkleProof.verify(_merkleProof, merkleRoot, leaf))\n            revert NotJamListed();\n\n        unchecked {\n            whitelistClaimed[msg.sender] = true;\n            _mint(msg.sender, totalSupply);\n            ++totalSupply;\n        }\n    }\n\n    /// @notice Authorize a specific address to serve as the POTC burner. For future use.\n    /// @param _newBurner The address of the new burner.\n    function setPOTCBurner(address _newBurner) public onlyOwner {\n        potcBurner = _newBurner;\n    }\n\n    /// @notice Burn a POTC with a specific token id.\n    /// @dev !NOTE: Both publicSale \u0026 jamSale should be inactive.\n    /// @dev Unlikely that the totalSupply will be below 0. Hence, unchecked.\n    /// @param tokenId The token ID of the parrot to burn.\n    function burn(uint256 tokenId) public {\n        if (msg.sender != potcBurner) revert NotAuthorized();\n        unchecked {\n            --totalSupply;\n        }\n        _burn(tokenId);\n    }\n\n    /// @notice Flip the jam sale state.\n    function flipJamSaleState() public onlyOwner {\n        jamSaleActive = !jamSaleActive;\n    }\n\n    /// @notice Flip the public sale state.\n    function flipPublicSaleState() public onlyOwner {\n        jamSaleActive = false;\n        publicSaleActive = !publicSaleActive;\n    }\n\n    /// @notice Set the price of mint, in case there is no mint out.\n    function setPrice(uint256 _targetPrice) public onlyOwner {\n        mintPrice = _targetPrice;\n    }\n\n    /// @notice Transfer all funds from contract to the contract deployer address.\n    function withdraw() public onlyOwner {\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    /// @notice Set the merkle root.\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}}