{"metaAmero.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\nimport \"./safeMath.sol\";\n\n//Interface de nuestro token ERC20\ninterface IERC20{\n    //Devuelve la cantidad de tokens en existencia\n    function totalSupply() external view returns (uint256);\n\n    //Devuelve la cantidad de rokens para una dirección indicada por parámetro\n    function balanceOf(address account) external view returns (uint256);\n\n    //Devuelve el número de token que el spender podrá gastar en nombre del propietario (owner)\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    //Devuelve un valor booleano resultado de la operación indicada\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    //Devuelve un valor booleano con el resultado de la operación de gasto\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    //Devuelve un valor booleano con el resultado de la operación de paso de una cantidad de tokens usando el método allowance()\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    //Evento que se debe emitir cuando una cantidad de tokens pase de un origen a un destino\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    //Evento que se debe emitir cuando se establece una asignación con el mmétodo allowance()\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n//Implementación de las funciones del token ERC20\ncontract ERC20MetaAmero is IERC20{\n\n    string public constant name = \"MetaAmero\";\n    string public constant symbol = \"MTA\";\n    uint8 public constant decimals = 12; \n    uint256 public constant initialSupply = 20000000000000000000;\n    \n    //event Transfer(address indexed from, address indexed to, uint256 tokens);\n    //event Approval(address indexed owner, address indexed spender, uint256 tokens);\n\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint) balances;\n    mapping (address =\u003e mapping (address =\u003e uint)) allowed;\n    uint256 totalSupply_;\n\n    constructor () public{\n        totalSupply_ = initialSupply;\n        balances[msg.sender] = totalSupply_;\n    }\n\n    function totalSupply() public override view returns (uint256){\n        return totalSupply_;\n    }\n\n    function increaseTotalSupply(uint newTokensAmount) public {\n        totalSupply_ += newTokensAmount;\n        balances[msg.sender] += newTokensAmount;\n    }\n\n     function burnTotalSupply(uint newTokensAmount) public {\n        totalSupply_ -= newTokensAmount;\n        balances[msg.sender] -= newTokensAmount;\n    }\n\n    function balanceOf(address tokenOwner) public override view returns (uint256){\n        return balances[tokenOwner];\n    }\n\n    function allowance(address owner, address delegate) public override view returns (uint256){\n        return allowed[owner][delegate];\n    }\n\n    function transfer(address recipient, uint256 numTokens) public override returns (bool){\n        require(numTokens \u003c= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n        balances[recipient] = balances[recipient].add(numTokens);\n        emit Transfer(msg.sender, recipient, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint256 numTokens) public override returns (bool){\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool){\n        require(numTokens \u003c= balances[owner]);\n        require(numTokens \u003c= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner].sub(numTokens);\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n        balances[buyer] = balances[buyer].add(numTokens);\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}"},"safeMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\npragma experimental ABIEncoderV2;\n\n\n// Implementacion de la libreria SafeMath para realizar las operaciones de manera segura\n// Fuente: \"https://gist.github.com/giladHaimov/8e81dbde10c9aeff69a1d683ed6870be\"\n\nlibrary SafeMath{\n    // Restas\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      assert(b \u003c= a);\n      return a - b;\n    }\n    \n    // Sumas\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      assert(c \u003e= a);\n      return c;\n    }\n    \n    // Multiplicacion\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n}\n"}}