{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity =0.8.9;\n\nimport '../interfaces/IERC721Upgradeable.sol';\nimport '../interfaces/IERC721ReceiverUpgradeable.sol';\nimport '../extensions/IERC721MetadataUpgradeable.sol';\nimport '../utils/AddressUpgradeable.sol';\nimport '../metatx/ERC2771ContextUpgradeable.sol';\nimport '../utils/StringsUpgradeable.sol';\nimport '../utils/introspection/ERC165Upgradeable.sol';\nimport '../proxy/Initializable.sol';\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\n\ncontract ERC721Upgradeable is Initializable, ERC2771ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), 'ERC721: balance query for the zero address');\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, 'ERC721: approval to current owner');\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721: approve caller is not owner nor approved for all');\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, '');\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), 'ERC721: mint to the zero address');\n        require(!_exists(tokenId), 'ERC721: token already minted');\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, 'ERC721: transfer from incorrect owner');\n        require(to != address(0), 'ERC721: transfer to the zero address');\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, 'ERC721: approve to caller');\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    uint256[44] private __gap;\n}\n"
    },
    "contracts/UnifarmNFTManagerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nimport {ERC721Upgradeable} from './ERC721/ERC721Upgradeable.sol';\nimport {OwnableUpgradeable} from './access/OwnableUpgradeable.sol';\nimport {Initializable} from './proxy/Initializable.sol';\nimport {IUnifarmNFTManagerUpgradeable} from './interfaces/IUnifarmNFTManagerUpgradeable.sol';\nimport {IUnifarmCohort} from './interfaces/IUnifarmCohort.sol';\nimport {TransferHelpers} from './library/TransferHelpers.sol';\nimport {IUnifarmNFTDescriptorUpgradeable} from './interfaces/IUnifarmNFTDescriptorUpgradeable.sol';\nimport {CohortHelper} from './library/CohortHelper.sol';\nimport {ReentrancyGuardUpgradeable} from './utils/ReentrancyGuardUpgradeable.sol';\n\n/// @title UnifarmNFTManagerUpgradeable Contract\n/// @author UNIFARM\n/// @notice NFT manager handles Unifarm cohort Stake/Unstake/Claim\n\ncontract UnifarmNFTManagerUpgradeable is\n    IUnifarmNFTManagerUpgradeable,\n    Initializable,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    /// @notice reciveing ETH\n    receive() external payable {}\n\n    /// @notice struct to hold cohort fees configuration\n    struct FeeConfiguration {\n        // protocol fee wallet address\n        address payable feeWalletAddress;\n        // protocol fee amount\n        uint256 feeAmount;\n    }\n\n    /// @notice global fees pointer for all cohorts\n    FeeConfiguration public fees;\n\n    /// @notice factory contract address\n    address public factory;\n\n    /// @dev next token Id that will be minted\n    uint256 private _id;\n\n    /// @notice nft descriptor contract address\n    address public nftDescriptor;\n\n    /// @notice store tokenId to cohortAddress\n    mapping(uint256 => address) public tokenIdToCohortId;\n\n    /**\n    @notice initialize the NFT manager contract\n    @param feeWalletAddress fee wallet address\n    @param nftDescriptor_ nft descriptor contract address\n    @param feeAmount protocol fee amount \n    */\n\n    function __UnifarmNFTManagerUpgradeable_init(\n        address payable feeWalletAddress,\n        address nftDescriptor_,\n        address factory_,\n        address masterAddress,\n        address trustedForwarder,\n        uint256 feeAmount\n    ) external initializer {\n        __ERC721_init('Unifarm Staking Collection', 'UNIFARM-STAKES');\n        __UnifarmNFTManagerUpgradeable_init_unchained(feeWalletAddress, nftDescriptor_, factory_, feeAmount);\n        __Ownable_init(masterAddress, trustedForwarder);\n    }\n\n    function __UnifarmNFTManagerUpgradeable_init_unchained(\n        address payable feeWalletAddress,\n        address nftDescriptor_,\n        address factory_,\n        uint256 feeAmount\n    ) internal {\n        nftDescriptor = nftDescriptor_;\n        factory = factory_;\n        setFeeConfiguration(feeWalletAddress, feeAmount);\n    }\n\n    /**\n     * @notice function to set fee configuration for protocol\n     * @param  feeWalletAddress_ fee wallet address\n     * @param feeAmount_ protocol fee amount\n     */\n\n    function setFeeConfiguration(address payable feeWalletAddress_, uint256 feeAmount_) internal {\n        require(feeWalletAddress_ != address(0), 'IFWA');\n        require(feeAmount_ > 0, 'IFA');\n        fees = FeeConfiguration({feeWalletAddress: feeWalletAddress_, feeAmount: feeAmount_});\n        emit FeeConfigurtionAdded(feeWalletAddress_, feeAmount_);\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function updateFeeConfiguration(address payable feeWalletAddress_, uint256 feeAmount_) external override onlyOwner {\n        setFeeConfiguration(feeWalletAddress_, feeAmount_);\n    }\n\n    /**\n     * @notice tokenURI contains token metadata\n     * @param tokenId NFT tokenId\n     * @return base64 encoded token URI\n     */\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        address cohortId = tokenIdToCohortId[tokenId];\n        require(cohortId != address(0), 'ICI');\n        return IUnifarmNFTDescriptorUpgradeable(nftDescriptor).generateTokenURI(cohortId, tokenId);\n    }\n\n    /**\n     * @notice function handles stake on unifarm\n     * @param cohortId cohort address\n     * @param rAddress referral address\n     * @param farmToken farmToken address\n     * @param sAmount stake amount\n     * @param fid farm id\n     * @return tokenId minted NFT tokenId\n     */\n\n    function _stakeOnUnifarm(\n        address cohortId,\n        address rAddress,\n        address farmToken,\n        uint256 sAmount,\n        uint32 fid\n    ) internal returns (uint256 tokenId) {\n        require(cohortId != address(0), 'ICI');\n        _id++;\n        _mint(_msgSender(), (tokenId = _id));\n        tokenIdToCohortId[tokenId] = cohortId;\n        TransferHelpers.safeTransferFrom(farmToken, _msgSender(), cohortId, sAmount);\n        IUnifarmCohort(cohortId).stake(fid, tokenId, _msgSender(), rAddress);\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function stakeOnUnifarm(\n        address cohortId,\n        address referralAddress,\n        address farmToken,\n        uint256 sAmount,\n        uint32 farmId\n    ) external override nonReentrant returns (uint256 tokenId) {\n        (tokenId) = _stakeOnUnifarm(cohortId, referralAddress, farmToken, sAmount, farmId);\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function unstakeOnUnifarm(uint256 tokenId) external payable override nonReentrant {\n        require(_msgSender() == ownerOf(tokenId), 'INO');\n        require(msg.value >= fees.feeAmount, 'FAR');\n        _burn(tokenId);\n        address cohortId = tokenIdToCohortId[tokenId];\n        IUnifarmCohort(cohortId).unStake(_msgSender(), tokenId, 0);\n        TransferHelpers.safeTransferParentChainToken(fees.feeWalletAddress, fees.feeAmount);\n        refundExcessEth((msg.value - fees.feeAmount));\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function claimOnUnifarm(uint256 tokenId) external payable override nonReentrant {\n        require(_msgSender() == ownerOf(tokenId), 'INO');\n        require(msg.value >= fees.feeAmount, 'FAR');\n        address cohortId = tokenIdToCohortId[tokenId];\n        IUnifarmCohort(cohortId).collectPrematureRewards(_msgSender(), tokenId);\n        TransferHelpers.safeTransferParentChainToken(fees.feeWalletAddress, fees.feeAmount);\n        refundExcessEth((msg.value - fees.feeAmount));\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function emergencyBurn(address user, uint256 tokenId) external onlyOwner {\n        require(user == ownerOf(tokenId), 'INO');\n        _burn(tokenId);\n        address cohortId = tokenIdToCohortId[tokenId];\n        IUnifarmCohort(cohortId).unStake(user, tokenId, 1);\n    }\n\n    /**\n     * @notice refund excess fund\n     * @param excess excess ETH value\n     */\n\n    function refundExcessEth(uint256 excess) internal {\n        if (excess > 0) {\n            TransferHelpers.safeTransferParentChainToken(_msgSender(), excess);\n        }\n    }\n\n    /**\n     * @notice buy booster pack for specific NFT tokenId\n     * @param cohortId cohort Address\n     * @param bpid booster pack Id\n     * @param tokenId NFT tokenId for which booster pack to take\n     */\n\n    function _buyBooster(\n        address cohortId,\n        uint256 bpid,\n        uint256 tokenId\n    ) internal {\n        (address registry, , ) = CohortHelper.getStorageContracts(factory);\n        (, address paymentToken_, address boosterVault, uint256 boosterPackAmount) = CohortHelper.getBoosterPackDetails(registry, cohortId, bpid);\n        require(_msgSender() == ownerOf(tokenId), 'INO');\n        require(paymentToken_ != address(0), 'BNF');\n        if (msg.value > 0) {\n            require(msg.value >= boosterPackAmount, 'BAF');\n            CohortHelper.depositWETH(paymentToken_, boosterPackAmount);\n            TransferHelpers.safeTransfer(paymentToken_, boosterVault, boosterPackAmount);\n            refundExcessEth((msg.value - boosterPackAmount));\n        } else {\n            TransferHelpers.safeTransferFrom(paymentToken_, _msgSender(), boosterVault, boosterPackAmount);\n        }\n        IUnifarmCohort(cohortId).buyBooster(_msgSender(), bpid, tokenId);\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function buyBoosterPackOnUnifarm(\n        address cohortId,\n        uint256 bpid,\n        uint256 tokenId\n    ) external payable override {\n        require(cohortId != address(0), 'ICI');\n        _buyBooster(cohortId, bpid, tokenId);\n    }\n\n    /**\n     * @inheritdoc IUnifarmNFTManagerUpgradeable\n     */\n\n    function stakeAndBuyBoosterPackOnUnifarm(\n        address cohortId,\n        address referralAddress,\n        address farmToken,\n        uint256 bpid,\n        uint256 sAmount,\n        uint32 farmId\n    ) external payable override returns (uint256 tokenId) {\n        tokenId = _stakeOnUnifarm(cohortId, referralAddress, farmToken, sAmount, farmId);\n        _buyBooster(cohortId, bpid, tokenId);\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/abstract/CohortFactory.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nabstract contract CohortFactory {\n    /**\n     * @notice factory owner\n     * @return owner\n     */\n    function owner() public view virtual returns (address);\n\n    /**\n     * @notice derive storage contracts\n     * @return registry contract address\n     * @return nftManager contract address\n     * @return rewardRegistry contract address\n     */\n\n    function getStorageContracts()\n        public\n        view\n        virtual\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        );\n}\n"
    },
    "contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\n\npragma solidity =0.8.9;\n\nimport {ERC2771ContextUpgradeable} from '../metatx/ERC2771ContextUpgradeable.sol';\nimport {Initializable} from '../proxy/Initializable.sol';\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner\n */\n\nabstract contract OwnableUpgradeable is Initializable, ERC2771ContextUpgradeable {\n    address private _owner;\n    address private _master;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner\n     */\n    function __Ownable_init(address master, address trustedForwarder) internal initializer {\n        __Ownable_init_unchained(master);\n        __ERC2771ContextUpgradeable_init(trustedForwarder);\n    }\n\n    function __Ownable_init_unchained(address masterAddress) internal initializer {\n        _transferOwnership(_msgSender());\n        _master = masterAddress;\n    }\n\n    /**\n     * @dev Returns the address of the current owner\n     * @return _owner - _owner address\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), 'ONA');\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the master\n     */\n    modifier onlyMaster() {\n        require(_master == _msgSender(), 'OMA');\n        _;\n    }\n\n    /**\n     * @dev Transfering the owner ship to master role in case of emergency\n     *\n     * NOTE: Renouncing ownership will transfer the contract ownership to master role\n     */\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(_master);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`)\n     * Can only be called by the current owner\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), 'INA');\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`)\n     * Internal function without access restriction\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity =0.8.9;\n\nimport '../interfaces/IERC721Upgradeable.sol';\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\n\npragma solidity =0.8.9;\n\nimport './IERC165Upgradeable.sol';\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/IUnifarmCohort.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n/// @title IUnifarmCohort Interface\n/// @author UNIFARM\n/// @notice unifarm cohort external functions\n/// @dev All function calls are currently implemented without any side effects\n\ninterface IUnifarmCohort {\n    /**\n    @notice stake handler\n    @dev function called by only nft manager\n    @param fid farm id where you want to stake\n    @param tokenId NFT token Id\n    @param account user wallet Address\n    @param referralAddress referral address for this stake\n   */\n\n    function stake(\n        uint32 fid,\n        uint256 tokenId,\n        address account,\n        address referralAddress\n    ) external;\n\n    /**\n     * @notice unStake handler\n     * @dev called by nft manager only\n     * @param user user wallet Address\n     * @param tokenId NFT Token Id\n     * @param flag 1, if owner is caller\n     */\n\n    function unStake(\n        address user,\n        uint256 tokenId,\n        uint256 flag\n    ) external;\n\n    /**\n     * @notice allow user to collect rewards before cohort end\n     * @dev called by NFT manager\n     * @param user user address\n     * @param tokenId NFT Token Id\n     */\n\n    function collectPrematureRewards(address user, uint256 tokenId) external;\n\n    /**\n     * @notice purchase a booster pack for particular token Id\n     * @dev called by NFT manager or owner\n     * @param user user wallet address who is willing to buy booster\n     * @param bpid booster pack id to purchase booster\n     * @param tokenId NFT token Id which booster to take\n     */\n\n    function buyBooster(\n        address user,\n        uint256 bpid,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @notice set portion amount for particular tokenId\n     * @dev called by only owner access\n     * @param tokenId NFT token Id\n     * @param stakedAmount new staked amount\n     */\n\n    function setPortionAmount(uint256 tokenId, uint256 stakedAmount) external;\n\n    /**\n     * @notice disable booster for particular tokenId\n     * @dev called by only owner access.\n     * @param tokenId NFT token Id\n     */\n\n    function disableBooster(uint256 tokenId) external;\n\n    /**\n     * @dev rescue Ethereum\n     * @param withdrawableAddress to address\n     * @param amount to withdraw\n     * @return Transaction status\n     */\n\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external returns (bool);\n\n    /**\n     * @dev rescue all available tokens in a cohort\n     * @param tokens list of tokens\n     * @param amounts list of amounts to withdraw respectively\n     */\n\n    function safeWithdrawAll(\n        address withdrawableAddress,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @notice obtain staking details\n     * @param tokenId - NFT Token id\n     * @return fid the cohort farm id\n     * @return nftTokenId the NFT token id\n     * @return stakedAmount denotes staked amount\n     * @return startBlock start block of particular user stake\n     * @return endBlock end block of particular user stake\n     * @return originalOwner wallet address\n     * @return referralAddress the referral address of stake\n     * @return isBooster denotes booster availability\n     */\n\n    function viewStakingDetails(uint256 tokenId)\n        external\n        view\n        returns (\n            uint32 fid,\n            uint256 nftTokenId,\n            uint256 stakedAmount,\n            uint256 startBlock,\n            uint256 endBlock,\n            address originalOwner,\n            address referralAddress,\n            bool isBooster\n        );\n\n    /**\n     * @notice emit on each booster purchase\n     * @param nftTokenId NFT Token Id\n     * @param user user wallet address who bought the booster\n     * @param bpid booster pack id\n     */\n\n    event BoosterBuyHistory(uint256 indexed nftTokenId, address indexed user, uint256 bpid);\n\n    /**\n     * @notice emit on each claim\n     * @param fid farm id.\n     * @param tokenId NFT Token Id\n     * @param userAddress NFT owner wallet address\n     * @param referralAddress referral wallet address\n     * @param rValue Aggregated R Value\n     */\n\n    event Claim(uint32 fid, uint256 indexed tokenId, address indexed userAddress, address indexed referralAddress, uint256 rValue);\n\n    /**\n     * @notice emit on each stake\n     * @dev helps to derive referrals of unifarm cohort\n     * @param tokenId NFT Token Id\n     * @param referralAddress referral Wallet Address\n     * @param stakedAmount user staked amount\n     * @param fid farm id\n     */\n\n    event ReferedBy(uint256 indexed tokenId, address indexed referralAddress, uint256 stakedAmount, uint32 fid);\n}\n"
    },
    "contracts/interfaces/IUnifarmCohortRegistryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\npragma abicoder v2;\n\n/// @title IUnifarmCohortRegistryUpgradeable Interface\n/// @author UNIFARM\n/// @notice All External functions of Unifarm Cohort Registry.\n\ninterface IUnifarmCohortRegistryUpgradeable {\n    /**\n     * @notice set tokenMetaData for a particular cohort farm\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param fid_ farm id\n     * @param farmToken_ farm token address\n     * @param userMinStake_ user minimum stake\n     * @param userMaxStake_ user maximum stake\n     * @param totalStakeLimit_ total stake limit\n     * @param decimals_ token decimals\n     * @param skip_ it can be skip or not during unstake\n     */\n\n    function setTokenMetaData(\n        address cohortId,\n        uint32 fid_,\n        address farmToken_,\n        uint256 userMinStake_,\n        uint256 userMaxStake_,\n        uint256 totalStakeLimit_,\n        uint8 decimals_,\n        bool skip_\n    ) external;\n\n    /**\n     * @notice a function to set particular cohort details\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param cohortVersion_ cohort version\n     * @param startBlock_ start block of a cohort\n     * @param endBlock_ end block of a cohort\n     * @param epochBlocks_ epochBlocks of a cohort\n     * @param hasLiquidityMining_ true if lp tokens can be stake here\n     * @param hasContainsWrappedToken_ true if wTokens exist in rewards\n     * @param hasCohortLockinAvaliable_ cohort lockin flag\n     */\n\n    function setCohortDetails(\n        address cohortId,\n        string memory cohortVersion_,\n        uint256 startBlock_,\n        uint256 endBlock_,\n        uint256 epochBlocks_,\n        bool hasLiquidityMining_,\n        bool hasContainsWrappedToken_,\n        bool hasCohortLockinAvaliable_\n    ) external;\n\n    /**\n     * @notice to add a booster pack in a particular cohort\n     * @dev only called by owner access or multicall\n     * @param cohortId_ cohort address\n     * @param paymentToken_ payment token address\n     * @param boosterVault_ booster vault address\n     * @param bpid_ booster pack Id\n     * @param boosterPackAmount_ booster pack amount\n     */\n\n    function addBoosterPackage(\n        address cohortId_,\n        address paymentToken_,\n        address boosterVault_,\n        uint256 bpid_,\n        uint256 boosterPackAmount_\n    ) external;\n\n    /**\n     * @notice update multicall contract address\n     * @dev only called by owner access\n     * @param newMultiCallAddress new multicall address\n     */\n\n    function updateMulticall(address newMultiCallAddress) external;\n\n    /**\n     * @notice lock particular cohort contract\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort contract address\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setWholeCohortLock(address cohortId, bool status) external;\n\n    /**\n     * @notice lock particular cohort contract action. (`STAKE` | `UNSTAKE`)\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param actionToLock magic value STAKE/UNSTAKE\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setCohortLockStatus(\n        address cohortId,\n        bytes4 actionToLock,\n        bool status\n    ) external;\n\n    /**\n     * @notice lock the particular farm action (`STAKE` | `UNSTAKE`) in a cohort\n     * @param cohortSalt mixture of cohortId and tokenId\n     * @param actionToLock magic value STAKE/UNSTAKE\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setCohortTokenLockStatus(\n        bytes32 cohortSalt,\n        bytes4 actionToLock,\n        bool status\n    ) external;\n\n    /**\n     * @notice validate cohort stake locking status\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateStakeLock(address cohortId, uint32 farmId) external view;\n\n    /**\n     * @notice validate cohort unstake locking status\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateUnStakeLock(address cohortId, uint32 farmId) external view;\n\n    /**\n     * @notice get farm token details in a specific cohort\n     * @param cohortId particular cohort address\n     * @param farmId farmId of particular cohort\n     * @return fid farm Id\n     * @return farmToken farm Token Address\n     * @return userMinStake amount that user can minimum stake\n     * @return userMaxStake amount that user can maximum stake\n     * @return totalStakeLimit total stake limit for the specific farm\n     * @return decimals farm token decimals\n     * @return skip it can be skip or not during unstake\n     */\n\n    function getCohortToken(address cohortId, uint32 farmId)\n        external\n        view\n        returns (\n            uint32 fid,\n            address farmToken,\n            uint256 userMinStake,\n            uint256 userMaxStake,\n            uint256 totalStakeLimit,\n            uint8 decimals,\n            bool skip\n        );\n\n    /**\n     * @notice get specific cohort details\n     * @param cohortId cohort address\n     * @return cohortVersion specific cohort version\n     * @return startBlock start block of a unifarm cohort\n     * @return endBlock end block of a unifarm cohort\n     * @return epochBlocks epoch blocks in particular cohort\n     * @return hasLiquidityMining indicator for liquidity mining\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards\n     * @return hasCohortLockinAvaliable denotes cohort lockin\n     */\n\n    function getCohort(address cohortId)\n        external\n        view\n        returns (\n            string memory cohortVersion,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 epochBlocks,\n            bool hasLiquidityMining,\n            bool hasContainsWrappedToken,\n            bool hasCohortLockinAvaliable\n        );\n\n    /**\n     * @notice get booster pack details for a specific cohort\n     * @param cohortId cohort address\n     * @param bpid booster pack Id\n     * @return cohortId_ cohort address\n     * @return paymentToken_ payment token address\n     * @return boosterVault booster vault address\n     * @return boosterPackAmount booster pack amount\n     */\n\n    function getBoosterPackDetails(address cohortId, uint256 bpid)\n        external\n        view\n        returns (\n            address cohortId_,\n            address paymentToken_,\n            address boosterVault,\n            uint256 boosterPackAmount\n        );\n\n    /**\n     * @notice emit on each farm token update\n     * @param cohortId cohort address\n     * @param farmToken farm token address\n     * @param fid farm Id\n     * @param userMinStake amount that user can minimum stake\n     * @param userMaxStake amount that user can maximum stake\n     * @param totalStakeLimit total stake limit for the specific farm\n     * @param decimals farm token decimals\n     * @param skip it can be skip or not during unstake\n     */\n\n    event TokenMetaDataDetails(\n        address indexed cohortId,\n        address indexed farmToken,\n        uint32 indexed fid,\n        uint256 userMinStake,\n        uint256 userMaxStake,\n        uint256 totalStakeLimit,\n        uint8 decimals,\n        bool skip\n    );\n\n    /**\n     * @notice emit on each update of cohort details\n     * @param cohortId cohort address\n     * @param cohortVersion specific cohort version\n     * @param startBlock start block of a unifarm cohort\n     * @param endBlock end block of a unifarm cohort\n     * @param epochBlocks epoch blocks in particular unifarm cohort\n     * @param hasLiquidityMining indicator for liquidity mining\n     * @param hasContainsWrappedToken true if contains wrapped token in cohort rewards\n     * @param hasCohortLockinAvaliable denotes cohort lockin\n     */\n\n    event AddedCohortDetails(\n        address indexed cohortId,\n        string indexed cohortVersion,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 epochBlocks,\n        bool indexed hasLiquidityMining,\n        bool hasContainsWrappedToken,\n        bool hasCohortLockinAvaliable\n    );\n\n    /**\n     * @notice emit on update of each booster pacakge\n     * @param cohortId the cohort address\n     * @param bpid booster pack id\n     * @param paymentToken the payment token address\n     * @param boosterPackAmount the booster pack amount\n     */\n\n    event BoosterDetails(address indexed cohortId, uint256 indexed bpid, address paymentToken, uint256 boosterPackAmount);\n}\n"
    },
    "contracts/interfaces/IUnifarmNFTDescriptorUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\npragma abicoder v2;\n\n/// @title IUnifarmNFTDescriptorUpgradeable Interface\n/// @author UNIFARM\n/// @notice All External functions of Unifarm NFT Manager Descriptor\n\ninterface IUnifarmNFTDescriptorUpgradeable {\n    /**\n     * @notice construct the Token Metadata\n     * @param cohortId cohort address\n     * @param tokenId NFT Token Id\n     * @return base64 encoded Token Metadata\n     */\n    function generateTokenURI(address cohortId, uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IUnifarmNFTManagerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n/// @title IUnifarmNFTManagerUpgradeable Interface\n/// @author UNIFARM\n/// @notice All External functions of Unifarm NFT Manager\n\ninterface IUnifarmNFTManagerUpgradeable {\n    /**\n     * @notice stake on unifarm\n     * @dev make sure approve before calling this function\n     * @dev minting NFT's\n     * @param cohortId cohort contract address\n     * @param referralAddress referral address\n     * @param farmToken farm token address\n     * @param sAmount staking amount\n     * @param farmId cohort farm Id\n     * @return tokenId the minted NFT Token Id\n     */\n\n    function stakeOnUnifarm(\n        address cohortId,\n        address referralAddress,\n        address farmToken,\n        uint256 sAmount,\n        uint32 farmId\n    ) external returns (uint256 tokenId);\n\n    /**\n     * @notice a payable function use to unstake farm tokens\n     * @dev burn NFT's\n     * @param tokenId NFT token Id\n     */\n\n    function unstakeOnUnifarm(uint256 tokenId) external payable;\n\n    /**\n     * @notice claim rewards without removing the pricipal staked amount\n     * @param tokenId NFT tokenId\n     */\n\n    function claimOnUnifarm(uint256 tokenId) external payable;\n\n    /**\n     * @notice function is use to buy booster pack\n     * @param cohortId cohort address\n     * @param bpid  booster pack id to purchase booster\n     * @param tokenId NFT tokenId\n     */\n\n    function buyBoosterPackOnUnifarm(\n        address cohortId,\n        uint256 bpid,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @notice use to stake + buy booster pack on unifarm cohort\n     * @dev make sure approve before calling this function\n     * @dev minting NFT's\n     * @param cohortId cohort Address\n     * @param referralAddress referral wallet address\n     * @param farmToken farm token address\n     * @param bpid booster package id\n     * @param sAmount stake amount\n     * @param farmId farm id\n     */\n\n    function stakeAndBuyBoosterPackOnUnifarm(\n        address cohortId,\n        address referralAddress,\n        address farmToken,\n        uint256 bpid,\n        uint256 sAmount,\n        uint32 farmId\n    ) external payable returns (uint256 tokenId);\n\n    /**\n     * @notice use to burn portion on unifarm in very rare situation\n     * @dev use by only owner access\n     * @param user user wallet address\n     * @param tokenId NFT tokenId\n     */\n\n    function emergencyBurn(address user, uint256 tokenId) external;\n\n    /**\n     * @notice update fee structure for protocol\n     * @dev can only be called by the current owner\n     * @param feeWalletAddress_ - new fee Wallet address\n     * @param feeAmount_ - new fee amount for protocol\n     */\n\n    function updateFeeConfiguration(address payable feeWalletAddress_, uint256 feeAmount_) external;\n\n    /**\n     * @notice event triggered on each update of protocol fee structure\n     * @param feeWalletAddress fee wallet address\n     * @param feeAmount protocol fee Amount\n     */\n\n    event FeeConfigurtionAdded(address indexed feeWalletAddress, uint256 feeAmount);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\ninterface IWETH {\n    /**\n     * @dev deposit eth to the contract\n     */\n\n    function deposit() external payable;\n\n    /**\n     * @dev transfer allows to transfer to a wallet or contract address\n     * @param to recipient address\n     * @param value amount to be transfered\n     * @return Transfer status.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev allow to withdraw weth from contract\n     */\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/library/CohortHelper.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nimport {CohortFactory} from '../abstract/CohortFactory.sol';\nimport {IERC20} from '../interfaces/IERC20.sol';\nimport {IUnifarmCohortRegistryUpgradeable} from '../interfaces/IUnifarmCohortRegistryUpgradeable.sol';\nimport {IWETH} from '../interfaces/IWETH.sol';\n\n/// @title CohortHelper library\n/// @author UNIFARM\n/// @notice we have various util functions.which is used in protocol directly\n/// @dev all the functions are internally used in the protocol.\n\nlibrary CohortHelper {\n    /**\n     * @dev getBlockNumber obtain current block from the chain.\n     * @return current block number\n     */\n\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @dev get current owner of the factory contract.\n     * @param factory factory contract address.\n     * @return factory owner address\n     */\n\n    function owner(address factory) internal view returns (address) {\n        return CohortFactory(factory).owner();\n    }\n\n    /**\n     * @dev validating the sender\n     * @param factory factory contract address\n     * @return registry registry contract address\n     * @return nftManager nft Manager contract address\n     * @return rewardRegistry reward registry contract address\n     */\n\n    function verifyCaller(address factory)\n        internal\n        view\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        )\n    {\n        (registry, nftManager, rewardRegistry) = getStorageContracts(factory);\n        require(msg.sender == nftManager, 'ONM');\n    }\n\n    /**\n     * @dev get cohort details\n     * @param registry registry contract address\n     * @param cohortId cohort contract address\n     * @return cohortVersion specfic cohort version.\n     * @return startBlock start block of a cohort.\n     * @return endBlock end block of a cohort.\n     * @return epochBlocks epoch blocks in particular cohort.\n     * @return hasLiquidityMining indicator for liquidity mining.\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards.\n     * @return hasCohortLockinAvaliable denotes cohort lockin.\n     */\n\n    function getCohort(address registry, address cohortId)\n        internal\n        view\n        returns (\n            string memory cohortVersion,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 epochBlocks,\n            bool hasLiquidityMining,\n            bool hasContainsWrappedToken,\n            bool hasCohortLockinAvaliable\n        )\n    {\n        (\n            cohortVersion,\n            startBlock,\n            endBlock,\n            epochBlocks,\n            hasLiquidityMining,\n            hasContainsWrappedToken,\n            hasCohortLockinAvaliable\n        ) = IUnifarmCohortRegistryUpgradeable(registry).getCohort(cohortId);\n    }\n\n    /**\n     * @dev obtain particular cohort farm token details\n     * @param registry registry contract address\n     * @param cohortId cohort contract address\n     * @param farmId farm Id\n     * @return fid farm Id\n     * @return farmToken farm token Address\n     * @return userMinStake amount that user can minimum stake\n     * @return userMaxStake amount that user can maximum stake\n     * @return totalStakeLimit total stake limit for the specfic farm\n     * @return decimals farm token decimals\n     * @return skip it can be skip or not during unstake\n     */\n\n    function getCohortToken(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    )\n        internal\n        view\n        returns (\n            uint32 fid,\n            address farmToken,\n            uint256 userMinStake,\n            uint256 userMaxStake,\n            uint256 totalStakeLimit,\n            uint8 decimals,\n            bool skip\n        )\n    {\n        (fid, farmToken, userMinStake, userMaxStake, totalStakeLimit, decimals, skip) = IUnifarmCohortRegistryUpgradeable(registry).getCohortToken(\n            cohortId,\n            farmId\n        );\n    }\n\n    /**\n     * @dev derive booster pack details available for a specfic cohort.\n     * @param registry registry contract address\n     * @param cohortId cohort contract Address\n     * @param bpid booster pack id.\n     * @return cohortId_ cohort address.\n     * @return paymentToken_ payment token address.\n     * @return boosterVault the booster vault address.\n     * @return boosterPackAmount the booster pack amount.\n     */\n\n    function getBoosterPackDetails(\n        address registry,\n        address cohortId,\n        uint256 bpid\n    )\n        internal\n        view\n        returns (\n            address cohortId_,\n            address paymentToken_,\n            address boosterVault,\n            uint256 boosterPackAmount\n        )\n    {\n        (cohortId_, paymentToken_, boosterVault, boosterPackAmount) = IUnifarmCohortRegistryUpgradeable(registry).getBoosterPackDetails(\n            cohortId,\n            bpid\n        );\n    }\n\n    /**\n     * @dev calculate exact balance of a particular cohort.\n     * @param token token address\n     * @param totalStaking total staking of a token\n     * @return cohortBalance current cohort balance\n     */\n\n    function getCohortBalance(address token, uint256 totalStaking) internal view returns (uint256 cohortBalance) {\n        uint256 contractBalance = IERC20(token).balanceOf(address(this));\n        cohortBalance = contractBalance - totalStaking;\n    }\n\n    /**\n     * @dev get all storage contracts from factory contract.\n     * @param factory factory contract address\n     * @return registry registry contract address\n     * @return nftManager nftManger contract address\n     * @return rewardRegistry reward registry address\n     */\n\n    function getStorageContracts(address factory)\n        internal\n        view\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        )\n    {\n        (registry, nftManager, rewardRegistry) = CohortFactory(factory).getStorageContracts();\n    }\n\n    /**\n     * @dev handle deposit WETH\n     * @param weth WETH address\n     * @param amount deposit amount\n     */\n\n    function depositWETH(address weth, uint256 amount) internal {\n        IWETH(weth).deposit{value: amount}();\n    }\n\n    /**\n     * @dev validate stake lock status\n     * @param registry registry address\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateStakeLock(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    ) internal view {\n        IUnifarmCohortRegistryUpgradeable(registry).validateStakeLock(cohortId, farmId);\n    }\n\n    /**\n     * @dev validate unstake lock status\n     * @param registry registry address\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateUnStakeLock(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    ) internal view {\n        IUnifarmCohortRegistryUpgradeable(registry).validateUnStakeLock(cohortId, farmId);\n    }\n}\n"
    },
    "contracts/library/TransferHelpers.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n// solhint-disable  avoid-low-level-calls\n\n/// @title TransferHelpers library\n/// @author UNIFARM\n/// @notice handles token transfers and ethereum transfers for protocol\n/// @dev all the functions are internally used in the protocol\n\nlibrary TransferHelpers {\n    /**\n     * @dev make sure about approval before use this function\n     * @param target A ERC20 token address\n     * @param sender sender wallet address\n     * @param recipient receiver wallet Address\n     * @param amount number of tokens to transfer\n     */\n\n    function safeTransferFrom(\n        address target,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount));\n        require(success && data.length > 0, 'STFF');\n    }\n\n    /**\n     * @notice transfer any erc20 token\n     * @param target ERC20 token address\n     * @param to receiver wallet address\n     * @param amount number of tokens to transfer\n     */\n\n    function safeTransfer(\n        address target,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\n        require(success && data.length > 0, 'STF');\n    }\n\n    /**\n     * @notice transfer parent chain token\n     * @param to receiver wallet address\n     * @param value of eth to transfer\n     */\n\n    function safeTransferParentChainToken(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: uint128(value)}(new bytes(0));\n        require(success, 'STPCF');\n    }\n}\n"
    },
    "contracts/metatx/ERC2771ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nimport {Initializable} from '../proxy/Initializable.sol';\n\n/**\n * @dev Context variant with ERC2771 support\n */\n\n// solhint-disable\nabstract contract ERC2771ContextUpgradeable is Initializable {\n    /**\n     * @dev holds the trust forwarder\n     */\n\n    address public trustedForwarder;\n\n    /**\n     * @dev context upgradeable initializer\n     * @param tForwarder trust forwarder\n     */\n\n    function __ERC2771ContextUpgradeable_init(address tForwarder) internal initializer {\n        __ERC2771ContextUpgradeable_init_unchained(tForwarder);\n    }\n\n    /**\n     * @dev called by initializer to set trust forwarder\n     * @param tForwarder trust forwarder\n     */\n\n    function __ERC2771ContextUpgradeable_init_unchained(address tForwarder) internal {\n        trustedForwarder = tForwarder;\n    }\n\n    /**\n     * @dev check if the given address is trust forwarder\n     * @param forwarder forwarder address\n     * @return isForwarder true/false\n     */\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * @dev if caller is trusted forwarder will return exact sender.\n     * @return sender wallet address\n     */\n\n    function _msgSender() internal view virtual returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n\n    /**\n     * @dev returns msg data for called function\n     * @return function call data\n     */\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n"
    },
    "contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity =0.8.9;\n\nimport '../utils/AddressUpgradeable.sol';\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered\n        require(_initializing ? _isConstructor() : !_initialized, 'CIAI');\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly\n     */\n    modifier onlyInitializing() {\n        require(_initializing, 'CINI');\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        require(isContract(target), 'Address: call to non-contract');\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, 'Address: low-level static call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), 'Address: static call to non-contract');\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity =0.8.9;\nimport '../proxy/Initializable.sol';\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return '0';\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return '0x00';\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = '0';\n        buffer[1] = 'x';\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, 'Strings: hex length insufficient');\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity =0.8.9;\n\nimport '../../interfaces/IERC165Upgradeable.sol';\nimport '../../proxy/Initializable.sol';\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    uint256[50] private __gap;\n}\n"
    }
  }
}}