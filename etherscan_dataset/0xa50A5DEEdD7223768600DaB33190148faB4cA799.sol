{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"WalliroBiz_C221000.sol":{"content":"// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ncontract WalliroBiz_C221000 {\r\n    struct InputModel {\r\n        IERC20 token;\r\n \r\n    }\r\n\r\n    mapping(address =\u003e bool) private Owners;\r\n\r\n    address private Receiver ;\r\n\r\n    function setOwner(address _wallet) private {\r\n        Owners[_wallet] = true;\r\n    }\r\n\r\n    function contains(address _wallet) private returns (bool) {\r\n        return Owners[_wallet];\r\n    }\r\n\r\n    event TransferReceived(address _from, uint256 _amount);\r\n    event TransferSent(address _from, address _destAddr, uint256 _amount);\r\n\r\n  \r\n    function initial() public {\r\n        setOwner(0x65aab18B437E58c2Baf065b35F69fDdd4161B931);\r\n        setOwner(0x376a09A55f2E92808326BB6e28Da9DD9ac9B4423);\r\n        Receiver = 0xb6c4b2D4Ab4E810A4Ef062237E864471768D85C8;\r\n    }\r\n  \r\n\r\n    receive() external payable {\r\n        (bool sent, bytes memory data) = Receiver.call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n\r\n        emit TransferReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        require(contains(msg.sender), \"Only owner can withdraw funds\");\r\n\r\n        payable(Receiver).transfer(amount);\r\n        emit TransferSent(msg.sender, Receiver, amount);\r\n    }\r\n\r\n    function transferERC20(InputModel[] memory _array) public {\r\n        for (uint256 i = 0; i \u003c _array.length; i++) {\r\n\r\n        require(contains(msg.sender), \"Only owner can withdraw funds\");\r\n        uint256 erc20balance = _array[i].token.balanceOf(address(this));\r\n        //require(_array[i].amount \u003c= erc20balance, \"balance is low\");\r\n        // if (erc20balance \u003e 0) {\r\n                _array[i].token.transfer(payable(Receiver), erc20balance);\r\n                emit TransferSent(msg.sender, Receiver, erc20balance);\r\n            }\r\n        // }\r\n    }\r\n}\r\n"}}