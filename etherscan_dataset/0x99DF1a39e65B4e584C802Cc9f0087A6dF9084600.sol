{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 800
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/L1/EthereumConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"../external/IRootChainManager.sol\";\nimport \"../external/IFxStateSender.sol\";\n\n/// @title Constants for use on the Ethereum network\ncontract EthereumConstants {\n    /// @dev see https://static.matic.network/network/mainnet/v1/index.json\n    /// @return polygon ERC20 predicate for transferring ERC20 tokens to polygon\n    address public immutable ERC20_PREDICATE = 0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf;\n\n    /// @dev see https://static.matic.network/network/mainnet/v1\n    /// @return WETH token on polygon\n    address public immutable WETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\n\n    /// @dev see https://static.matic.network/network/mainnet/v1\n    /// @return fxRoot contract which can send arbitrary state messages\n    IFxStateSender public immutable FX_ROOT =\n        IFxStateSender(0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2);\n\n    /// @dev see https://static.matic.network/network/mainnet/v1\n    /// @return polygon main pos-bridge contract\n    IRootChainManager public immutable CHAIN_MANAGER =\n        IRootChainManager(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\n}\n"
    },
    "contracts/L1/EthereumPortal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./EthereumConstants.sol\";\nimport \"./IEthereumPortal.sol\";\n\n/// @title Main entry point on ethereum network. Sends messages to its counterpart on polygon\n/// @dev the main mechanism is polygon's state sync, see https://docs.polygon.technology/docs/contribute/state-sync/state-sync\ncontract EthereumPortal is EthereumConstants, IEthereumPortal, Ownable {\n    address public polygonContract;\n\n    constructor() Ownable() {}\n\n    /** @param _polygonContract address of the polygon contract */\n    function initialize(address _polygonContract) external onlyOwner {\n        polygonContract = _polygonContract;\n    }\n\n    /**\n     *  @param tokenIn The ERC20 token to deposit\n     *  @param amountIn The amount of tokens to deposit\n     *  @param routerAddress The address of the router contract on L2\n     *  @param routerArguments Calldata to execute the desired swap on L2\n     *  @param calls Calldata to purchase NFT on L2\n     *  @dev The L1 function to execute a cross chain purchase with an ERC20 on L2\n     */\n    function depositERC20(\n        IERC20 tokenIn,\n        uint256 amountIn,\n        address routerAddress,\n        bytes calldata routerArguments,\n        bytes calldata calls\n    ) external {\n        require(\n            CHAIN_MANAGER.rootToChildToken(address(tokenIn)) != address(0x0),\n            \"EthereumPortal: TOKEN MUST BE MAPPED\"\n        );\n\n        bool success = tokenIn.transferFrom(msg.sender, address(this), amountIn);\n        require(success, \"funds transfer failed\");\n        tokenIn.approve(ERC20_PREDICATE, amountIn);\n\n        CHAIN_MANAGER.depositFor(polygonContract, address(tokenIn), abi.encode(amountIn));\n\n        FX_ROOT.sendMessageToChild(\n            polygonContract,\n            abi.encode(\n                CHAIN_MANAGER.rootToChildToken(address(tokenIn)),\n                amountIn,\n                msg.sender,\n                routerAddress,\n                routerArguments,\n                calls\n            )\n        );\n    }\n\n    /**\n     *  @param routerAddress The address of the router contract on L2\n     *  @param routerArguments Calldata to execute the desired swap on L2\n     *  @param calls Calldata to purchase NFT on L2\n     *  @dev The L1 function to execute a cross chain purchase with ETH on L2\n     */\n    function depositEther(\n        address routerAddress,\n        bytes calldata routerArguments,\n        bytes calldata calls\n    ) external payable {\n        CHAIN_MANAGER.depositEtherFor{value: msg.value}(polygonContract);\n\n        FX_ROOT.sendMessageToChild(\n            polygonContract,\n            abi.encode(WETH, msg.value, msg.sender, routerAddress, routerArguments, calls)\n        );\n    }\n}\n"
    },
    "contracts/L1/IEthereumPortal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Main contract which serves as the entry point on Ethereum\ninterface IEthereumPortal {\n    function initialize(address _polygonContract) external;\n\n    function depositERC20(\n        IERC20 tokenIn,\n        uint256 amountIn,\n        address routerAddress,\n        bytes calldata routerArguments,\n        bytes calldata calls\n    ) external;\n\n    function depositEther(\n        address routerAddress,\n        bytes calldata routerArguments,\n        bytes calldata calls\n    ) external payable;\n}\n"
    },
    "contracts/external/IFxStateSender.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev see https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseRootTunnel.sol\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n"
    },
    "contracts/external/IRootChainManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.13;\n\n/// @dev see https://github.com/maticnetwork/pos-portal/blob/v1.1.0/contracts/root/RootChainManager/RootChainManager.sol\ninterface IRootChainManager {\n    function depositEtherFor(address user) external payable;\n\n    function depositFor(\n        address user,\n        address rootToken,\n        bytes calldata depositData\n    ) external;\n\n    function rootToChildToken(address rootToken) external returns (address);\n}\n"
    }
  }
}}