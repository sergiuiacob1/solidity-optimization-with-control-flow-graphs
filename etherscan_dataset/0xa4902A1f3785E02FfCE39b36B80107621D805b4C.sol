{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "details": {
        "constantOptimizer": true,
        "cse": true,
        "deduplicate": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "peephole": true,
        "yul": false
      },
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/persistent/external-positions/IExternalPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IExternalPosition Contract\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IExternalPosition {\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\n\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\n\n    function init(bytes memory) external;\n\n    function receiveCallFromVault(bytes memory) external;\n}\n"
    },
    "contracts/persistent/external-positions/maple-liquidity/MapleLiquidityPositionLibBase1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title MapleLiquidityPositionLibBase1 Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A persistent contract containing all required storage variables and\n/// required functions for a MapleLiquidityPositionLib implementation\n/// @dev DO NOT EDIT CONTRACT. If new events or storage are necessary, they should be added to\n/// a numbered MapleLiquidityPositionLibBaseXXX that inherits the previous base.\n/// e.g., `MapleLiquidityPositionLibBase2 is MapleLiquidityPositionLibBase1`\nabstract contract MapleLiquidityPositionLibBase1 {\n    event UsedLendingPoolAdded(address indexed lendingPool);\n\n    event UsedLendingPoolRemoved(address indexed lendingPool);\n\n    address[] internal usedLendingPools;\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/IMapleLiquidityPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\nimport \"../../../../../persistent/external-positions/IExternalPosition.sol\";\n\npragma solidity 0.6.12;\n\n/// @title IMapleLiquidityPosition Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMapleLiquidityPosition is IExternalPosition {\n    enum Actions {\n        Lend,\n        LendAndStake,\n        IntendToRedeem,\n        Redeem,\n        Stake,\n        Unstake,\n        UnstakeAndRedeem,\n        ClaimInterest,\n        ClaimRewards\n    }\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionDataDecoder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title MapleLiquidityPositionDataDecoder Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice Abstract contract containing data decodings for MapleLiquidityPosition payloads\nabstract contract MapleLiquidityPositionDataDecoder {\n    /// @dev Helper to decode args used during the ClaimInterest action\n    function __decodeClaimInterestActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the ClaimRewards action\n    function __decodeClaimRewardsActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address rewardsContract_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the Lend action\n    function __decodeLendActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_, uint256 liquidityAssetAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the LendAndStake action\n    function __decodeLendAndStakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address pool_,\n            address rewardsContract_,\n            uint256 liquidityAssetAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the IntendToRedeem action\n    function __decodeIntendToRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_)\n    {\n        return abi.decode(_actionArgs, (address));\n    }\n\n    /// @dev Helper to decode args used during the Redeem action\n    function __decodeRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address pool_, uint256 liquidityAssetAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the Stake action\n    function __decodeStakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address rewardsContract_,\n            address pool_,\n            uint256 poolTokenAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the Unstake action\n    function __decodeUnstakeActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (address rewardsContract_, uint256 poolTokenAmount_)\n    {\n        return abi.decode(_actionArgs, (address, uint256));\n    }\n\n    /// @dev Helper to decode args used during the UnstakeAndRedeem action\n    function __decodeUnstakeAndRedeemActionArgs(bytes memory _actionArgs)\n        internal\n        pure\n        returns (\n            address pool_,\n            address rewardsContract_,\n            uint256 poolTokenAmount_\n        )\n    {\n        return abi.decode(_actionArgs, (address, address, uint256));\n    }\n}\n"
    },
    "contracts/release/extensions/external-position-manager/external-positions/maple-liquidity/MapleLiquidityPositionLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n    (c) Enzyme Council <council@enzyme.finance>\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../../../../persistent/external-positions/maple-liquidity/MapleLiquidityPositionLibBase1.sol\";\nimport \"../../../../interfaces/IMaplePool.sol\";\nimport \"../../../../interfaces/IMapleMplRewards.sol\";\nimport \"../../../../utils/AddressArrayLib.sol\";\nimport \"../../../../utils/AssetHelpers.sol\";\nimport \"./IMapleLiquidityPosition.sol\";\nimport \"./MapleLiquidityPositionDataDecoder.sol\";\n\n/// @title MapleLiquidityPositionLib Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice An External Position library contract for Maple liquidity positions\ncontract MapleLiquidityPositionLib is\n    IMapleLiquidityPosition,\n    MapleLiquidityPositionDataDecoder,\n    MapleLiquidityPositionLibBase1,\n    AssetHelpers\n{\n    using AddressArrayLib for address[];\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    uint256 private constant MPT_DECIMALS_FACTOR = 10**18;\n\n    /// @notice Initializes the external position\n    /// @dev Nothing to initialize for this contract\n    function init(bytes memory) external override {}\n\n    /// @notice Receives and executes a call from the Vault\n    /// @param _actionData Encoded data to execute the action\n    function receiveCallFromVault(bytes memory _actionData) external override {\n        (uint256 actionId, bytes memory actionArgs) = abi.decode(_actionData, (uint256, bytes));\n\n        if (actionId == uint256(Actions.Lend)) {\n            __lendAction(actionArgs);\n        } else if (actionId == uint256(Actions.LendAndStake)) {\n            __lendAndStakeAction(actionArgs);\n        } else if (actionId == uint256(Actions.IntendToRedeem)) {\n            __intendToRedeemAction(actionArgs);\n        } else if (actionId == uint256(Actions.Redeem)) {\n            __redeemAction(actionArgs);\n        } else if (actionId == uint256(Actions.Stake)) {\n            __stakeAction(actionArgs);\n        } else if (actionId == uint256(Actions.Unstake)) {\n            __unstakeAction(actionArgs);\n        } else if (actionId == uint256(Actions.UnstakeAndRedeem)) {\n            __unstakeAndRedeemAction(actionArgs);\n        } else if (actionId == uint256(Actions.ClaimInterest)) {\n            __claimInterestAction(actionArgs);\n        } else if (actionId == uint256(Actions.ClaimRewards)) {\n            __claimRewardsAction(actionArgs);\n        } else {\n            revert(\"receiveCallFromVault: Invalid actionId\");\n        }\n    }\n\n    // @dev Calculates the value of pool tokens referenced in liquidityAsset\n    function __calcLiquidityAssetValueOfPoolTokens(\n        address _liquidityAsset,\n        uint256 _poolTokenAmount\n    ) private view returns (uint256 liquidityValue_) {\n        uint256 liquidityAssetDecimalsFactor = 10**(uint256(ERC20(_liquidityAsset).decimals()));\n\n        liquidityValue_ = _poolTokenAmount.mul(liquidityAssetDecimalsFactor).div(\n            MPT_DECIMALS_FACTOR\n        );\n\n        return liquidityValue_;\n    }\n\n    /// @dev Claims all interest accrued and send it to the Vault\n    function __claimInterestAction(bytes memory _actionArgs) private {\n        IMaplePool pool = IMaplePool(__decodeClaimInterestActionArgs(_actionArgs));\n\n        pool.withdrawFunds();\n\n        ERC20 liquidityAssetContract = ERC20(pool.liquidityAsset());\n\n        // Send liquidity asset interest to the vault\n        liquidityAssetContract.safeTransfer(\n            msg.sender,\n            liquidityAssetContract.balanceOf(address(this))\n        );\n    }\n\n    /// @dev Claims all rewards accrued and send it to the Vault\n    function __claimRewardsAction(bytes memory _actionArgs) private {\n        address rewardsContract = __decodeClaimRewardsActionArgs(_actionArgs);\n\n        IMapleMplRewards mapleRewards = IMapleMplRewards(rewardsContract);\n        ERC20 rewardToken = ERC20(mapleRewards.rewardsToken());\n        mapleRewards.getReward();\n\n        rewardToken.safeTransfer(msg.sender, rewardToken.balanceOf(address(this)));\n    }\n\n    /// @dev Activates the cooldown period to redeem an asset from a Maple pool\n    function __intendToRedeemAction(bytes memory _actionArgs) private {\n        address pool = __decodeIntendToRedeemActionArgs(_actionArgs);\n\n        IMaplePool(pool).intendToWithdraw();\n    }\n\n    /// @dev Lends assets to a Maple pool\n    function __lend(\n        address _liquidityAsset,\n        address _pool,\n        uint256 _liquidityAssetAmount\n    ) private {\n        __approveAssetMaxAsNeeded(_liquidityAsset, _pool, _liquidityAssetAmount);\n\n        IMaplePool(_pool).deposit(_liquidityAssetAmount);\n\n        if (!isUsedLendingPool(_pool)) {\n            usedLendingPools.push(_pool);\n\n            emit UsedLendingPoolAdded(_pool);\n        }\n    }\n\n    /// @dev Lends assets to a Maple pool (action)\n    function __lendAction(bytes memory _actionArgs) private {\n        (address pool, uint256 liquidityAssetAmount) = __decodeLendActionArgs(_actionArgs);\n\n        __lend(IMaplePool(pool).liquidityAsset(), pool, liquidityAssetAmount);\n    }\n\n    /// @dev Lends assets to a Maple pool, then stakes to a rewardsContract (action)\n    function __lendAndStakeAction(bytes memory _actionArgs) private {\n        (\n            address pool,\n            address rewardsContract,\n            uint256 liquidityAssetAmount\n        ) = __decodeLendAndStakeActionArgs(_actionArgs);\n        uint256 poolTokenBalanceBefore = ERC20(pool).balanceOf(address(this));\n\n        __lend(IMaplePool(pool).liquidityAsset(), pool, liquidityAssetAmount);\n\n        uint256 poolTokenBalanceAfter = ERC20(pool).balanceOf(address(this));\n\n        __stake(rewardsContract, pool, poolTokenBalanceAfter.sub(poolTokenBalanceBefore));\n    }\n\n    /// @dev Redeems assets from a Maple pool and claims all accrued interest\n    function __redeem(address _pool, uint256 _liquidityAssetAmount) private {\n        // Also claims all accrued interest\n        IMaplePool(_pool).withdraw(_liquidityAssetAmount);\n\n        // If the full amount of pool tokens has been redeemed, it can be removed from usedLendingPools\n        if (ERC20(_pool).balanceOf(address(this)) == 0) {\n            usedLendingPools.removeStorageItem(_pool);\n\n            emit UsedLendingPoolRemoved(_pool);\n        }\n    }\n\n    /// @dev Redeems assets from a Maple pool and claims all accrued interest (action)\n    function __redeemAction(bytes memory actionArgs) private {\n        (address pool, uint256 liquidityAssetAmount) = __decodeRedeemActionArgs(actionArgs);\n\n        __redeem(pool, liquidityAssetAmount);\n\n        address liquidityAsset = IMaplePool(pool).liquidityAsset();\n\n        // Send liquidity asset back to the vault\n        ERC20(liquidityAsset).safeTransfer(\n            msg.sender,\n            ERC20(liquidityAsset).balanceOf(address(this))\n        );\n    }\n\n    /// @dev Stakes assets to a rewardsContract\n    function __stake(\n        address _rewardsContract,\n        address _pool,\n        uint256 _poolTokenAmount\n    ) private {\n        IMaplePool(_pool).increaseCustodyAllowance(_rewardsContract, _poolTokenAmount);\n\n        IMapleMplRewards(_rewardsContract).stake(_poolTokenAmount);\n    }\n\n    /// @dev Decodes actionArgs and calls __stake with args function (action)\n    function __stakeAction(bytes memory _actionArgs) private {\n        (address rewardsContract, address pool, uint256 poolTokenAmount) = __decodeStakeActionArgs(\n            _actionArgs\n        );\n\n        __stake(rewardsContract, pool, poolTokenAmount);\n    }\n\n    /// @dev Unstakes assets from a rewardsContract\n    function __unstake(address _rewardsContract, uint256 _poolTokenAmount) private {\n        IMapleMplRewards(_rewardsContract).withdraw(_poolTokenAmount);\n    }\n\n    /// @dev Unstakes assets from a rewardsContract (action)\n    function __unstakeAction(bytes memory _actionArgs) private {\n        (address rewardsContract, uint256 poolTokenAmount) = __decodeUnstakeActionArgs(\n            _actionArgs\n        );\n        __unstake(rewardsContract, poolTokenAmount);\n    }\n\n    /// @dev Unstakes assets from a rewardsContract, then redeems assets from a Maple pool and claims all accrued interest (action)\n    function __unstakeAndRedeemAction(bytes memory actionArgs) private {\n        (\n            address pool,\n            address rewardsContract,\n            uint256 poolTokenAmount\n        ) = __decodeUnstakeAndRedeemActionArgs(actionArgs);\n\n        address liquidityAsset = IMaplePool(pool).liquidityAsset();\n\n        __unstake(rewardsContract, poolTokenAmount);\n        __redeem(pool, __calcLiquidityAssetValueOfPoolTokens(liquidityAsset, poolTokenAmount));\n\n        // Send liquidity asset back to the vault\n        ERC20(liquidityAsset).safeTransfer(\n            msg.sender,\n            ERC20(liquidityAsset).balanceOf(address(this))\n        );\n    }\n\n    ////////////////////\n    // POSITION VALUE //\n    ////////////////////\n\n    /// @notice Retrieves the debt assets (negative value) of the external position\n    /// @return assets_ Debt assets\n    /// @return amounts_ Debt asset amounts\n    function getDebtAssets()\n        external\n        override\n        returns (address[] memory assets_, uint256[] memory amounts_)\n    {\n        return (assets_, amounts_);\n    }\n\n    /// @notice Retrieves the managed assets (positive value) of the external position\n    /// @return assets_ Managed assets\n    /// @return amounts_ Managed asset amounts\n    function getManagedAssets()\n        external\n        override\n        returns (address[] memory assets_, uint256[] memory amounts_)\n    {\n        address[] memory pools = getUsedLendingPools();\n        uint256 usedLendingPoolsLength = pools.length;\n\n        assets_ = new address[](usedLendingPoolsLength);\n        amounts_ = new uint256[](usedLendingPoolsLength);\n\n        for (uint256 i; i < usedLendingPoolsLength; i++) {\n            IMaplePool poolContract = IMaplePool(pools[i]);\n\n            assets_[i] = poolContract.liquidityAsset();\n\n            // The liquidity asset balance is derived from the pool token balance (which is stored as a wad),\n            // while interest and losses are already returned in terms of the liquidity asset (not pool token)\n            uint256 liquidityAssetBalance = __calcLiquidityAssetValueOfPoolTokens(\n                assets_[i],\n                ERC20(address(poolContract)).balanceOf(address(this))\n            );\n\n            uint256 accumulatedInterest = poolContract.withdrawableFundsOf(address(this));\n            uint256 accumulatedLosses = poolContract.recognizableLossesOf(address(this));\n\n            amounts_[i] = liquidityAssetBalance.add(accumulatedInterest).sub(accumulatedLosses);\n        }\n\n        // If more than 1 pool position, combine amounts of the same asset.\n        // We can remove this if/when we aggregate asset amounts at the ComptrollerLib level.\n        if (usedLendingPoolsLength > 1) {\n            (assets_, amounts_) = __aggregateAssetAmounts(assets_, amounts_);\n        }\n\n        return (assets_, amounts_);\n    }\n\n    ///////////////////\n    // STATE GETTERS //\n    ///////////////////\n\n    /// @notice Gets all pools currently lent to\n    /// @return pools_ The pools currently lent to\n    function getUsedLendingPools() public view returns (address[] memory pools_) {\n        return usedLendingPools;\n    }\n\n    /// @notice Checks whether a pool is currently lent to\n    /// @param _pool The pool\n    /// @return isUsed_ True if the pool is lent to\n    function isUsedLendingPool(address _pool) public view returns (bool isUsed_) {\n        return usedLendingPools.storageArrayContains(_pool);\n    }\n}\n"
    },
    "contracts/release/interfaces/IMapleMplRewards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IMapleMplRewards Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMapleMplRewards {\n    function getReward() external;\n\n    function rewardsToken() external view returns (address);\n\n    function stake(uint256) external;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/release/interfaces/IMaplePool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title IMaplePool Interface\n/// @author Enzyme Council <security@enzyme.finance>\ninterface IMaplePool {\n    function deposit(uint256) external;\n\n    function increaseCustodyAllowance(address, uint256) external;\n\n    function intendToWithdraw() external;\n\n    function liquidityAsset() external view returns (address);\n\n    function recognizableLossesOf(address) external returns (uint256);\n\n    function withdraw(uint256) external;\n\n    function withdrawFunds() external;\n\n    function withdrawableFundsOf(address) external returns (uint256);\n}\n"
    },
    "contracts/release/utils/AddressArrayLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\n/// @title AddressArray Library\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A library to extend the address array data type\nlibrary AddressArrayLib {\n    /////////////\n    // STORAGE //\n    /////////////\n\n    /// @dev Helper to remove an item from a storage array\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\n        internal\n        returns (bool removed_)\n    {\n        uint256 itemCount = _self.length;\n        for (uint256 i; i < itemCount; i++) {\n            if (_self[i] == _itemToRemove) {\n                if (i < itemCount - 1) {\n                    _self[i] = _self[itemCount - 1];\n                }\n                _self.pop();\n                removed_ = true;\n                break;\n            }\n        }\n\n        return removed_;\n    }\n\n    /// @dev Helper to verify if a storage array contains a particular value\n    function storageArrayContains(address[] storage _self, address _target)\n        internal\n        view\n        returns (bool doesContain_)\n    {\n        uint256 arrLength = _self.length;\n        for (uint256 i; i < arrLength; i++) {\n            if (_target == _self[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    ////////////\n    // MEMORY //\n    ////////////\n\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\n    function addItem(address[] memory _self, address _itemToAdd)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        nextArray_ = new address[](_self.length + 1);\n        for (uint256 i; i < _self.length; i++) {\n            nextArray_[i] = _self[i];\n        }\n        nextArray_[_self.length] = _itemToAdd;\n\n        return nextArray_;\n    }\n\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        if (contains(_self, _itemToAdd)) {\n            return _self;\n        }\n\n        return addItem(_self, _itemToAdd);\n    }\n\n    /// @dev Helper to verify if an array contains a particular value\n    function contains(address[] memory _self, address _target)\n        internal\n        pure\n        returns (bool doesContain_)\n    {\n        for (uint256 i; i < _self.length; i++) {\n            if (_target == _self[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Helper to merge the unique items of a second array.\n    /// Does not consider uniqueness of either array, only relative uniqueness.\n    /// Preserves ordering.\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        uint256 newUniqueItemCount;\n        for (uint256 i; i < _arrayToMerge.length; i++) {\n            if (!contains(_self, _arrayToMerge[i])) {\n                newUniqueItemCount++;\n            }\n        }\n\n        if (newUniqueItemCount == 0) {\n            return _self;\n        }\n\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\n        for (uint256 i; i < _self.length; i++) {\n            nextArray_[i] = _self[i];\n        }\n        uint256 nextArrayIndex = _self.length;\n        for (uint256 i; i < _arrayToMerge.length; i++) {\n            if (!contains(_self, _arrayToMerge[i])) {\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\n                nextArrayIndex++;\n            }\n        }\n\n        return nextArray_;\n    }\n\n    /// @dev Helper to verify if array is a set of unique values.\n    /// Does not assert length > 0.\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\n        if (_self.length <= 1) {\n            return true;\n        }\n\n        uint256 arrayLength = _self.length;\n        for (uint256 i; i < arrayLength; i++) {\n            for (uint256 j = i + 1; j < arrayLength; j++) {\n                if (_self[i] == _self[j]) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\n    /// Does not assert uniqueness of either array.\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\n        internal\n        pure\n        returns (address[] memory nextArray_)\n    {\n        if (_itemsToRemove.length == 0) {\n            return _self;\n        }\n\n        bool[] memory indexesToRemove = new bool[](_self.length);\n        uint256 remainingItemsCount = _self.length;\n        for (uint256 i; i < _self.length; i++) {\n            if (contains(_itemsToRemove, _self[i])) {\n                indexesToRemove[i] = true;\n                remainingItemsCount--;\n            }\n        }\n\n        if (remainingItemsCount == _self.length) {\n            nextArray_ = _self;\n        } else if (remainingItemsCount > 0) {\n            nextArray_ = new address[](remainingItemsCount);\n            uint256 nextArrayIndex;\n            for (uint256 i; i < _self.length; i++) {\n                if (!indexesToRemove[i]) {\n                    nextArray_[nextArrayIndex] = _self[i];\n                    nextArrayIndex++;\n                }\n            }\n        }\n\n        return nextArray_;\n    }\n}\n"
    },
    "contracts/release/utils/AssetHelpers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/*\n    This file is part of the Enzyme Protocol.\n\n    (c) Enzyme Council <council@enzyme.finance>\n\n    For the full license information, please view the LICENSE\n    file that was distributed with this source code.\n*/\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\n/// @title AssetHelpers Contract\n/// @author Enzyme Council <security@enzyme.finance>\n/// @notice A util contract for common token actions\nabstract contract AssetHelpers {\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    /// @dev Helper to aggregate amounts of the same assets\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\n        internal\n        pure\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\n    {\n        if (_rawAssets.length == 0) {\n            return (aggregatedAssets_, aggregatedAmounts_);\n        }\n\n        uint256 aggregatedAssetCount = 1;\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\n            bool contains;\n            for (uint256 j; j < i; j++) {\n                if (_rawAssets[i] == _rawAssets[j]) {\n                    contains = true;\n                    break;\n                }\n            }\n            if (!contains) {\n                aggregatedAssetCount++;\n            }\n        }\n\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\n        uint256 aggregatedAssetIndex;\n        for (uint256 i; i < _rawAssets.length; i++) {\n            bool contains;\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\n                    contains = true;\n\n                    aggregatedAmounts_[j] += _rawAmounts[i];\n\n                    break;\n                }\n            }\n            if (!contains) {\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\n                aggregatedAssetIndex++;\n            }\n        }\n\n        return (aggregatedAssets_, aggregatedAmounts_);\n    }\n\n    /// @dev Helper to approve a target account with the max amount of an asset.\n    /// This is helpful for fully trusted contracts, such as adapters that\n    /// interact with external protocol like Uniswap, Compound, etc.\n    function __approveAssetMaxAsNeeded(\n        address _asset,\n        address _target,\n        uint256 _neededAmount\n    ) internal {\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\n        if (allowance < _neededAmount) {\n            if (allowance > 0) {\n                ERC20(_asset).safeApprove(_target, 0);\n            }\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\n        }\n    }\n\n    /// @dev Helper to transfer full asset balances from the current contract to a target\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\n        internal\n        returns (uint256[] memory amountsTransferred_)\n    {\n        amountsTransferred_ = new uint256[](_assets.length);\n        for (uint256 i; i < _assets.length; i++) {\n            ERC20 assetContract = ERC20(_assets[i]);\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\n            if (amountsTransferred_[i] > 0) {\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\n            }\n        }\n\n        return amountsTransferred_;\n    }\n}\n"
    }
  }
}}