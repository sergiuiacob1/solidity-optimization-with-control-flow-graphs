{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/MultiSig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//  Off-chain signature gathering multisig that streams funds - @austingriffith\n//\n// started from 🏗 scaffold-eth - meta-multi-sig-wallet example https://github.com/austintgriffith/scaffold-eth/tree/meta-multi-sig\n//    (off-chain signature based multi-sig)\n//  added a very simple streaming mechanism where `onlySelf` can open a withdraw-based stream\n//\n\npragma solidity >=0.8.0 <0.9.0;\n// Not needed to be explicitly imported in Solidity 0.8.x\n// pragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract MultiSig {\n    using ECDSA for bytes32;\n\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event ExecuteTransaction(address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\n    event Owner(address indexed owner, bool added);\n    mapping(address => bool) public isOwner;\n    uint public signaturesRequired;\n    uint public nonce;\n    uint public chainId;\n\n    constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired) {\n        require(_signaturesRequired > 0, \"constructor: must be non-zero sigs required\");\n        signaturesRequired = _signaturesRequired;\n        for (uint i = 0; i < _owners.length; i++) {\n            address owner = _owners[i];\n            require(owner != address(0), \"constructor: zero address\");\n            require(!isOwner[owner], \"constructor: owner not unique\");\n            isOwner[owner] = true;\n            emit Owner(owner, isOwner[owner]);\n        }\n        chainId = _chainId;\n    }\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"Not Self\");\n        _;\n    }\n\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf {\n        require(newSigner != address(0), \"addSigner: zero address\");\n        require(!isOwner[newSigner], \"addSigner: owner not unique\");\n        require(newSignaturesRequired > 0, \"addSigner: must be non-zero sigs required\");\n        isOwner[newSigner] = true;\n        signaturesRequired = newSignaturesRequired;\n        emit Owner(newSigner, isOwner[newSigner]);\n    }\n\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf {\n        require(isOwner[oldSigner], \"removeSigner: not owner\");\n        require(newSignaturesRequired > 0, \"removeSigner: must be non-zero sigs required\");\n        isOwner[oldSigner] = false;\n        signaturesRequired = newSignaturesRequired;\n        emit Owner(oldSigner, isOwner[oldSigner]);\n    }\n\n    function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf {\n        require(newSignaturesRequired > 0, \"updateSignaturesRequired: must be non-zero sigs required\");\n        signaturesRequired = newSignaturesRequired;\n    }\n\n    function getTransactionHash(uint256 _nonce, address to, uint256 value, bytes memory data) public view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), chainId, _nonce, to, value, data));\n    }\n\n    function executeTransaction(address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\n        public\n        returns (bytes memory)\n    {\n        require(isOwner[msg.sender], \"executeTransaction: only owners can execute\");\n        bytes32 _hash =  getTransactionHash(nonce, to, value, data);\n        nonce++;\n        uint256 validSignatures;\n        address duplicateGuard;\n        for (uint i = 0; i < signatures.length; i++) {\n            address recovered = recover(_hash, signatures[i]);\n            require(recovered > duplicateGuard, \"executeTransaction: duplicate or unordered signatures\");\n            duplicateGuard = recovered;\n            if(isOwner[recovered]){\n              validSignatures++;\n            }\n        }\n\n        require(validSignatures>=signaturesRequired, \"executeTransaction: not enough valid signatures\");\n\n        (bool success, bytes memory result) = to.call{value: value}(data);\n        require(success, \"executeTransaction: tx failed\");\n\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\n        return result;\n    }\n\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n    receive() payable external {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    //\n    //  new streaming stuff\n    //\n\n    event OpenStream(address indexed to, uint256 amount, uint256 frequency);\n    event CloseStream(address indexed to);\n    event Withdraw(address indexed to, uint256 amount, string reason);\n\n    struct Stream {\n        uint256 amount;\n        uint256 frequency;\n        uint256 last;\n    }\n    mapping(address => Stream) public streams;\n\n    function streamWithdraw(uint256 amount, string memory reason) public {\n        require(streams[msg.sender].amount > 0, \"withdraw: no open stream\");\n        _streamWithdraw(payable(msg.sender), amount, reason);\n    }\n\n    function _streamWithdraw(address payable to, uint256 amount, string memory reason) private {\n        uint256 totalAmountCanWithdraw = streamBalance(to);\n        require(totalAmountCanWithdraw >= amount,\"withdraw: not enough\");\n        streams[to].last = streams[to].last + ((block.timestamp - streams[to].last) * amount / totalAmountCanWithdraw);\n        emit Withdraw( to, amount, reason );\n        to.transfer(amount);\n    }\n\n    function streamBalance(address to) public view returns (uint256){\n      return (streams[to].amount * (block.timestamp-streams[to].last)) / streams[to].frequency;\n    }\n\n    function openStream(address to, uint256 amount, uint256 frequency) public onlySelf {\n        require(streams[to].amount == 0, \"openStream: stream already open\");\n        require(amount > 0, \"openStream: no amount\");\n        require(frequency > 0, \"openStream: no frequency\");\n\n        streams[to].amount = amount;\n        streams[to].frequency = frequency;\n        streams[to].last = block.timestamp;\n\n        emit OpenStream(to, amount, frequency);\n    }\n\n    function closeStream(address payable to) public onlySelf {\n        require(streams[to].amount > 0, \"closeStream: stream already closed\");\n        _streamWithdraw(to, streams[to].amount, \"stream closed\");\n        delete streams[to];\n        emit CloseStream(to);\n    }\n\n\n}\n"
    }
  }
}}