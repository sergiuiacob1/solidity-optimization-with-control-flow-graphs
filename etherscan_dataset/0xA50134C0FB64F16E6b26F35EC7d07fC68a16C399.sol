{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/UnifarmCohort.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\npragma abicoder v2;\n\nimport {IUnifarmCohort} from './interfaces/IUnifarmCohort.sol';\nimport {IUnifarmRewardRegistryUpgradeable} from './interfaces/IUnifarmRewardRegistryUpgradeable.sol';\n\n// libraries\nimport {CheckPointReward} from './library/CheckPointReward.sol';\nimport {TransferHelpers} from './library/TransferHelpers.sol';\nimport {CohortHelper} from './library/CohortHelper.sol';\n\n/// @title UnifarmCohort Contract\n/// @author UNIFARM\n/// @notice the main core cohort contract.\n\ncontract UnifarmCohort is IUnifarmCohort {\n    /// @notice reciveing chain currency.\n    receive() external payable {}\n\n    /// @notice dentoes stakes\n    struct Stakes {\n        // farm id\n        uint32 fid;\n        // nft token id for this stake\n        uint256 nftTokenId;\n        // stake amount\n        uint256 stakedAmount;\n        // user start from block\n        uint256 startBlock;\n        // user end block\n        uint256 endBlock;\n        // originalOwner address.\n        address originalOwner;\n        // referralAddress along with stakes.\n        address referralAddress;\n        // true if boosted\n        bool isBooster;\n    }\n\n    /// @notice factory address.\n    address public immutable factory;\n\n    /// @notice average total staking.\n    mapping(uint32 => uint256) public totalStaking;\n\n    /// @notice priorEpochATVL contains average total staking in each epochs.\n    mapping(uint32 => mapping(uint256 => uint256)) public priorEpochATVL;\n\n    /// @notice stakes map with nft Token Id.\n    mapping(uint256 => Stakes) public stakes;\n\n    /// @notice average userTotalStaking.\n    mapping(address => mapping(uint256 => uint256)) public userTotalStaking;\n\n    /**\n     * @notice construct unifarm cohort contract.\n     * @param factory_ factory contract address.\n     */\n\n    constructor(address factory_) {\n        factory = factory_;\n    }\n\n    /**\n     * @dev only owner verify\n     */\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @dev function to verify owner\n     */\n\n    function _onlyOwner() internal view {\n        require(msg.sender == CohortHelper.owner(factory), 'ONA');\n    }\n\n    /**\n     * @dev function helps to compute Aggregate R value\n     * @param farmId farm id\n     * @param startEpoch start epoch\n     * @param currentEpoch current epoch\n     * @param stakedAmount user staked amount\n     * @param epochBlocks  number of block in epoch\n     * @param userStakedBlock user staked Block.\n     * @param totalStakeLimit total staking limit.\n     * @param isBoosterBuyed booster buying status\n     * @return r Aggregated R Value.\n     */\n\n    function computeRValue(\n        uint32 farmId,\n        uint256 startEpoch,\n        uint256 currentEpoch,\n        uint256 stakedAmount,\n        uint256 epochBlocks,\n        uint256 userStakedBlock,\n        uint256 totalStakeLimit,\n        bool isBoosterBuyed\n    ) internal view returns (uint256 r) {\n        uint256 i = startEpoch;\n        if (i == currentEpoch) {\n            r = 0;\n        }\n        while (i < currentEpoch) {\n            uint256 eligibleBlocks;\n            if (userStakedBlock > (i * epochBlocks)) {\n                eligibleBlocks = ((i + 1) * epochBlocks) - userStakedBlock;\n            } else {\n                eligibleBlocks = epochBlocks;\n            }\n            if (isBoosterBuyed == false) {\n                r += (stakedAmount * 1e12 * eligibleBlocks) / totalStakeLimit;\n            } else {\n                uint256 priorTotalStaking = priorEpochATVL[farmId][i];\n                uint256 priorEpochATotalStaking = priorTotalStaking > 0 ? priorTotalStaking : totalStaking[farmId];\n                r += (stakedAmount * 1e12 * eligibleBlocks) / priorEpochATotalStaking;\n            }\n            i++;\n        }\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function buyBooster(\n        address account,\n        uint256 bpid,\n        uint256 tokenId\n    ) external override {\n        (, address nftManager, ) = CohortHelper.getStorageContracts(factory);\n        require(msg.sender == nftManager || msg.sender == CohortHelper.owner(factory), 'IS');\n        require(stakes[tokenId].isBooster == false, 'AB');\n        stakes[tokenId].isBooster = true;\n        emit BoosterBuyHistory(tokenId, account, bpid);\n    }\n\n    /**\n     * @dev validate cohort staking is active or not.\n     * @param registry registry address\n     * @return epoch current epoch\n     */\n\n    function validateStake(address registry) internal view returns (uint256 epoch) {\n        (, uint256 startBlock, uint256 endBlock, uint256 epochBlocks, , , ) = CohortHelper.getCohort(registry, address(this));\n        require(block.number < endBlock, 'SC');\n        epoch = CheckPointReward.getCurrentCheckpoint(startBlock, endBlock, epochBlocks);\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function stake(\n        uint32 fid,\n        uint256 tokenId,\n        address user,\n        address referralAddress\n    ) external override {\n        (address registry, , ) = CohortHelper.verifyCaller(factory);\n\n        require(user != referralAddress, 'SRNA');\n        CohortHelper.validateStakeLock(registry, address(this), fid);\n\n        uint256 epoch = validateStake(registry);\n\n        (, address farmToken, uint256 userMinStake, uint256 userMaxStake, uint256 totalStakeLimit, , ) = CohortHelper.getCohortToken(\n            registry,\n            address(this),\n            fid\n        );\n\n        require(farmToken != address(0), 'FTNE');\n        uint256 stakeAmount = CohortHelper.getCohortBalance(farmToken, totalStaking[fid]);\n\n        {\n            userTotalStaking[user][fid] = userTotalStaking[user][fid] + stakeAmount;\n            totalStaking[fid] = totalStaking[fid] + stakeAmount;\n            require(stakeAmount >= userMinStake, 'UMF');\n            require(userTotalStaking[user][fid] <= userMaxStake, 'UMSF');\n            require(totalStaking[fid] <= totalStakeLimit, 'TSLF');\n            priorEpochATVL[fid][epoch] = totalStaking[fid];\n        }\n\n        stakes[tokenId].fid = fid;\n        stakes[tokenId].nftTokenId = tokenId;\n        stakes[tokenId].stakedAmount = stakeAmount;\n        stakes[tokenId].startBlock = block.number;\n        stakes[tokenId].originalOwner = user;\n        stakes[tokenId].referralAddress = referralAddress;\n\n        emit ReferedBy(tokenId, referralAddress, stakeAmount, fid);\n    }\n\n    /**\n     * @dev validate unstake or claim\n     * @param registry registry address\n     * @param userStakedBlock block when user staked\n     * @param flag 1, if owner is caller\n     * @return blocks data for cohort.\n     * @return true if WToken is included on Cohort Rewards.\n     */\n\n    function validateUnstakeOrClaim(\n        address registry,\n        uint256 userStakedBlock,\n        uint256 flag\n    ) internal view returns (uint256[5] memory, bool) {\n        uint256[5] memory blocksData;\n        (, uint256 startBlock, uint256 endBlock, uint256 epochBlocks, , bool hasContainWrappedToken, bool hasCohortLockinAvaliable) = CohortHelper\n            .getCohort(registry, address(this));\n\n        if (hasCohortLockinAvaliable && flag == 0) {\n            require(block.number > endBlock, 'CIL');\n        }\n\n        blocksData[0] = CheckPointReward.getStartCheckpoint(startBlock, userStakedBlock, epochBlocks);\n        blocksData[1] = CheckPointReward.getCurrentCheckpoint(startBlock, endBlock, epochBlocks);\n        blocksData[2] = endBlock;\n        blocksData[3] = epochBlocks;\n        blocksData[4] = startBlock;\n        return (blocksData, hasContainWrappedToken);\n    }\n\n    /**\n     * @dev update user totalStaking\n     * @param user The Wallet address of user.\n     * @param stakedAmount the amount staked by user.\n     * @param fid staked farm Id\n     */\n\n    function updateUserTotalStaking(\n        address user,\n        uint256 stakedAmount,\n        uint32 fid\n    ) internal {\n        userTotalStaking[user][fid] = userTotalStaking[user][fid] - stakedAmount;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function unStake(\n        address user,\n        uint256 tokenId,\n        uint256 flag\n    ) external override {\n        (address registry, , address rewardRegistry) = CohortHelper.verifyCaller(factory);\n\n        Stakes memory staked = stakes[tokenId];\n\n        if (flag == 0) {\n            CohortHelper.validateUnStakeLock(registry, address(this), staked.fid);\n        }\n\n        stakes[tokenId].endBlock = block.number;\n\n        (, address farmToken, , , uint256 totalStakeLimit, , bool skip) = CohortHelper.getCohortToken(registry, address(this), staked.fid);\n\n        (uint256[5] memory blocksData, bool hasContainWrapToken) = validateUnstakeOrClaim(registry, staked.startBlock, flag);\n\n        uint256 rValue = computeRValue(\n            staked.fid,\n            blocksData[0],\n            blocksData[1],\n            staked.stakedAmount,\n            blocksData[3],\n            (staked.startBlock - (blocksData[4])),\n            totalStakeLimit,\n            staked.isBooster\n        );\n        {\n            totalStaking[staked.fid] = totalStaking[staked.fid] - staked.stakedAmount;\n\n            updateUserTotalStaking(staked.originalOwner, staked.stakedAmount, staked.fid);\n\n            if (CohortHelper.getBlockNumber() < blocksData[2]) {\n                priorEpochATVL[staked.fid][blocksData[1]] = totalStaking[staked.fid];\n            }\n            // transfer the stake token to user\n            if (skip == false) {\n                TransferHelpers.safeTransfer(farmToken, user, staked.stakedAmount);\n            }\n        }\n\n        if (rValue > 0) {\n            IUnifarmRewardRegistryUpgradeable(rewardRegistry).distributeRewards(\n                address(this),\n                user,\n                staked.referralAddress,\n                rValue,\n                hasContainWrapToken\n            );\n        }\n\n        emit Claim(staked.fid, tokenId, user, staked.referralAddress, rValue);\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function collectPrematureRewards(address user, uint256 tokenId) external override {\n        (address registry, , address rewardRegistry) = CohortHelper.verifyCaller(factory);\n        Stakes memory staked = stakes[tokenId];\n\n        CohortHelper.validateUnStakeLock(registry, address(this), staked.fid);\n\n        uint256 stakedAmount = staked.stakedAmount;\n\n        (uint256[5] memory blocksData, bool hasContainWrapToken) = validateUnstakeOrClaim(registry, staked.startBlock, 1);\n        require(blocksData[2] > block.number, 'FNA');\n\n        (, , , uint256 totalStakeLimit, , , ) = CohortHelper.getCohortToken(registry, address(this), staked.fid);\n\n        stakes[tokenId].startBlock = block.number;\n\n        uint256 rValue = computeRValue(\n            staked.fid,\n            blocksData[0],\n            blocksData[1],\n            stakedAmount,\n            blocksData[3],\n            (staked.startBlock - blocksData[4]),\n            totalStakeLimit,\n            staked.isBooster\n        );\n\n        require(rValue > 0, 'NRM');\n\n        IUnifarmRewardRegistryUpgradeable(rewardRegistry).distributeRewards(address(this), user, staked.referralAddress, rValue, hasContainWrapToken);\n\n        emit Claim(staked.fid, tokenId, user, staked.referralAddress, rValue);\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function setPortionAmount(uint256 tokenId, uint256 stakedAmount) external onlyOwner {\n        stakes[tokenId].stakedAmount = stakedAmount;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function disableBooster(uint256 tokenId) external onlyOwner {\n        stakes[tokenId].isBooster = false;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external onlyOwner returns (bool) {\n        require(withdrawableAddress != address(0), 'IWA');\n        TransferHelpers.safeTransferParentChainToken(withdrawableAddress, amount);\n        return true;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function safeWithdrawAll(\n        address withdrawableAddress,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external onlyOwner {\n        require(withdrawableAddress != address(0), 'IWA');\n        require(tokens.length == amounts.length, 'SF');\n        uint8 numberOfTokens = uint8(tokens.length);\n        uint8 i = 0;\n        while (i < numberOfTokens) {\n            TransferHelpers.safeTransfer(tokens[i], withdrawableAddress, amounts[i]);\n            i++;\n        }\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohort\n     */\n\n    function viewStakingDetails(uint256 tokenId)\n        public\n        view\n        override\n        returns (\n            uint32 fid,\n            uint256 nftTokenId,\n            uint256 stakedAmount,\n            uint256 startBlock,\n            uint256 endBlock,\n            address originalOwner,\n            address referralAddress,\n            bool isBooster\n        )\n    {\n        Stakes memory userStake = stakes[tokenId];\n        return (\n            userStake.fid,\n            userStake.nftTokenId,\n            userStake.stakedAmount,\n            userStake.startBlock,\n            userStake.endBlock,\n            userStake.originalOwner,\n            userStake.referralAddress,\n            userStake.isBooster\n        );\n    }\n}\n"
    },
    "contracts/UnifarmCohortFactoryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nimport {Initializable} from './proxy/Initializable.sol';\nimport {UnifarmCohort} from './UnifarmCohort.sol';\nimport {IUnifarmCohortFactoryUpgradeable} from './interfaces/IUnifarmCohortFactoryUpgradeable.sol';\n\n/// @title UnifarmCohortFactoryUpgradeable Contract\n/// @author UNIFARM\n/// @notice deployer of unifarm cohort contracts\n\ncontract UnifarmCohortFactoryUpgradeable is IUnifarmCohortFactoryUpgradeable, Initializable {\n    /// @dev hold all the storage contract addresses for unifarm cohort\n    struct StorageContract {\n        // registry address\n        address registry;\n        // nft manager address\n        address nftManager;\n        // reward registry\n        address rewardRegistry;\n    }\n\n    /// @dev factory owner address\n    address private _owner;\n\n    /// @notice pointer of StorageContract\n    StorageContract internal storageContracts;\n\n    /// @notice all deployed cohorts will push on this array\n    address[] public cohorts;\n\n    /// @notice emit on each cohort deployment\n    event CohortConstructed(address cohortId);\n\n    /// @notice emit on each ownership transfers\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, 'ONA');\n        _;\n    }\n\n    /**\n     * @notice initialize the cohort factory\n     */\n\n    function __UnifarmCohortFactoryUpgradeable_init() external initializer {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`)\n     * @dev can only be called by the current owner\n     * @param newOwner - new owner\n     */\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), 'NOIA');\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`)\n     * @dev Internal function without access restriction\n     * @param newOwner new owner\n     */\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\n     */\n\n    function setStorageContracts(\n        address registry_,\n        address nftManager_,\n        address rewardRegistry_\n    ) external onlyOwner {\n        storageContracts = StorageContract({registry: registry_, nftManager: nftManager_, rewardRegistry: rewardRegistry_});\n    }\n\n    /**\n     * @dev Returns the address of the current owner of the factory\n     * @return _owner owner address\n     */\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\n     */\n\n    function createUnifarmCohort(bytes32 salt) external override onlyOwner returns (address cohortId) {\n        bytes memory bytecode = abi.encodePacked(type(UnifarmCohort).creationCode, abi.encode(address(this)));\n        assembly {\n            cohortId := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        cohorts.push(cohortId);\n        emit CohortConstructed(cohortId);\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\n     */\n\n    function computeCohortAddress(bytes32 salt) public view override returns (address) {\n        bytes memory bytecode = abi.encodePacked(type(UnifarmCohort).creationCode, abi.encode(address(this)));\n        bytes32 initCode = keccak256(bytecode);\n        return address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCode)))));\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\n     */\n\n    function obtainNumberOfCohorts() public view override returns (uint256) {\n        return cohorts.length;\n    }\n\n    /**\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\n     */\n\n    function getStorageContracts()\n        public\n        view\n        override\n        returns (\n            address,\n            address,\n            address\n        )\n    {\n        return (storageContracts.registry, storageContracts.nftManager, storageContracts.rewardRegistry);\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/abstract/CohortFactory.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nabstract contract CohortFactory {\n    /**\n     * @notice factory owner\n     * @return owner\n     */\n    function owner() public view virtual returns (address);\n\n    /**\n     * @notice derive storage contracts\n     * @return registry contract address\n     * @return nftManager contract address\n     * @return rewardRegistry contract address\n     */\n\n    function getStorageContracts()\n        public\n        view\n        virtual\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        );\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IUnifarmCohort.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n/// @title IUnifarmCohort Interface\n/// @author UNIFARM\n/// @notice unifarm cohort external functions\n/// @dev All function calls are currently implemented without any side effects\n\ninterface IUnifarmCohort {\n    /**\n    @notice stake handler\n    @dev function called by only nft manager\n    @param fid farm id where you want to stake\n    @param tokenId NFT token Id\n    @param account user wallet Address\n    @param referralAddress referral address for this stake\n   */\n\n    function stake(\n        uint32 fid,\n        uint256 tokenId,\n        address account,\n        address referralAddress\n    ) external;\n\n    /**\n     * @notice unStake handler\n     * @dev called by nft manager only\n     * @param user user wallet Address\n     * @param tokenId NFT Token Id\n     * @param flag 1, if owner is caller\n     */\n\n    function unStake(\n        address user,\n        uint256 tokenId,\n        uint256 flag\n    ) external;\n\n    /**\n     * @notice allow user to collect rewards before cohort end\n     * @dev called by NFT manager\n     * @param user user address\n     * @param tokenId NFT Token Id\n     */\n\n    function collectPrematureRewards(address user, uint256 tokenId) external;\n\n    /**\n     * @notice purchase a booster pack for particular token Id\n     * @dev called by NFT manager or owner\n     * @param user user wallet address who is willing to buy booster\n     * @param bpid booster pack id to purchase booster\n     * @param tokenId NFT token Id which booster to take\n     */\n\n    function buyBooster(\n        address user,\n        uint256 bpid,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @notice set portion amount for particular tokenId\n     * @dev called by only owner access\n     * @param tokenId NFT token Id\n     * @param stakedAmount new staked amount\n     */\n\n    function setPortionAmount(uint256 tokenId, uint256 stakedAmount) external;\n\n    /**\n     * @notice disable booster for particular tokenId\n     * @dev called by only owner access.\n     * @param tokenId NFT token Id\n     */\n\n    function disableBooster(uint256 tokenId) external;\n\n    /**\n     * @dev rescue Ethereum\n     * @param withdrawableAddress to address\n     * @param amount to withdraw\n     * @return Transaction status\n     */\n\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external returns (bool);\n\n    /**\n     * @dev rescue all available tokens in a cohort\n     * @param tokens list of tokens\n     * @param amounts list of amounts to withdraw respectively\n     */\n\n    function safeWithdrawAll(\n        address withdrawableAddress,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @notice obtain staking details\n     * @param tokenId - NFT Token id\n     * @return fid the cohort farm id\n     * @return nftTokenId the NFT token id\n     * @return stakedAmount denotes staked amount\n     * @return startBlock start block of particular user stake\n     * @return endBlock end block of particular user stake\n     * @return originalOwner wallet address\n     * @return referralAddress the referral address of stake\n     * @return isBooster denotes booster availability\n     */\n\n    function viewStakingDetails(uint256 tokenId)\n        external\n        view\n        returns (\n            uint32 fid,\n            uint256 nftTokenId,\n            uint256 stakedAmount,\n            uint256 startBlock,\n            uint256 endBlock,\n            address originalOwner,\n            address referralAddress,\n            bool isBooster\n        );\n\n    /**\n     * @notice emit on each booster purchase\n     * @param nftTokenId NFT Token Id\n     * @param user user wallet address who bought the booster\n     * @param bpid booster pack id\n     */\n\n    event BoosterBuyHistory(uint256 indexed nftTokenId, address indexed user, uint256 bpid);\n\n    /**\n     * @notice emit on each claim\n     * @param fid farm id.\n     * @param tokenId NFT Token Id\n     * @param userAddress NFT owner wallet address\n     * @param referralAddress referral wallet address\n     * @param rValue Aggregated R Value\n     */\n\n    event Claim(uint32 fid, uint256 indexed tokenId, address indexed userAddress, address indexed referralAddress, uint256 rValue);\n\n    /**\n     * @notice emit on each stake\n     * @dev helps to derive referrals of unifarm cohort\n     * @param tokenId NFT Token Id\n     * @param referralAddress referral Wallet Address\n     * @param stakedAmount user staked amount\n     * @param fid farm id\n     */\n\n    event ReferedBy(uint256 indexed tokenId, address indexed referralAddress, uint256 stakedAmount, uint32 fid);\n}\n"
    },
    "contracts/interfaces/IUnifarmCohortFactoryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\ninterface IUnifarmCohortFactoryUpgradeable {\n    /**\n     * @notice set storage contracts for unifarm cohorts\n     * @dev called by only owner access\n     * @param registry_ registry address\n     * @param nftManager_ NFT manager address\n     * @param rewardRegistry_ reward registry address\n     */\n\n    function setStorageContracts(\n        address registry_,\n        address nftManager_,\n        address rewardRegistry_\n    ) external;\n\n    /**\n    @notice function helps to deploy unifarm cohort contracts\n    @dev only owner access can deploy new cohorts\n    @param salt random bytes\n    @return cohortId the deployed cohort contract address\n   */\n\n    function createUnifarmCohort(bytes32 salt) external returns (address cohortId);\n\n    /**\n     * @notice the function helps to derive deployed cohort address\n     * @dev calculate the deployed cohort contract address by salt\n     * @param salt random bytes\n     * @return deployed cohort address\n     */\n\n    function computeCohortAddress(bytes32 salt) external view returns (address);\n\n    /**\n     * @notice derive storage contracts\n     * @return registry the registry address\n     * @return  nftManager nft manager address\n     * @return  rewardRegistry reward registry address\n     */\n\n    function getStorageContracts()\n        external\n        view\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        );\n\n    /**\n     * @notice get number of cohorts\n     * @return number of cohorts.\n     */\n\n    function obtainNumberOfCohorts() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUnifarmCohortRegistryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\npragma abicoder v2;\n\n/// @title IUnifarmCohortRegistryUpgradeable Interface\n/// @author UNIFARM\n/// @notice All External functions of Unifarm Cohort Registry.\n\ninterface IUnifarmCohortRegistryUpgradeable {\n    /**\n     * @notice set tokenMetaData for a particular cohort farm\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param fid_ farm id\n     * @param farmToken_ farm token address\n     * @param userMinStake_ user minimum stake\n     * @param userMaxStake_ user maximum stake\n     * @param totalStakeLimit_ total stake limit\n     * @param decimals_ token decimals\n     * @param skip_ it can be skip or not during unstake\n     */\n\n    function setTokenMetaData(\n        address cohortId,\n        uint32 fid_,\n        address farmToken_,\n        uint256 userMinStake_,\n        uint256 userMaxStake_,\n        uint256 totalStakeLimit_,\n        uint8 decimals_,\n        bool skip_\n    ) external;\n\n    /**\n     * @notice a function to set particular cohort details\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param cohortVersion_ cohort version\n     * @param startBlock_ start block of a cohort\n     * @param endBlock_ end block of a cohort\n     * @param epochBlocks_ epochBlocks of a cohort\n     * @param hasLiquidityMining_ true if lp tokens can be stake here\n     * @param hasContainsWrappedToken_ true if wTokens exist in rewards\n     * @param hasCohortLockinAvaliable_ cohort lockin flag\n     */\n\n    function setCohortDetails(\n        address cohortId,\n        string memory cohortVersion_,\n        uint256 startBlock_,\n        uint256 endBlock_,\n        uint256 epochBlocks_,\n        bool hasLiquidityMining_,\n        bool hasContainsWrappedToken_,\n        bool hasCohortLockinAvaliable_\n    ) external;\n\n    /**\n     * @notice to add a booster pack in a particular cohort\n     * @dev only called by owner access or multicall\n     * @param cohortId_ cohort address\n     * @param paymentToken_ payment token address\n     * @param boosterVault_ booster vault address\n     * @param bpid_ booster pack Id\n     * @param boosterPackAmount_ booster pack amount\n     */\n\n    function addBoosterPackage(\n        address cohortId_,\n        address paymentToken_,\n        address boosterVault_,\n        uint256 bpid_,\n        uint256 boosterPackAmount_\n    ) external;\n\n    /**\n     * @notice update multicall contract address\n     * @dev only called by owner access\n     * @param newMultiCallAddress new multicall address\n     */\n\n    function updateMulticall(address newMultiCallAddress) external;\n\n    /**\n     * @notice lock particular cohort contract\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort contract address\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setWholeCohortLock(address cohortId, bool status) external;\n\n    /**\n     * @notice lock particular cohort contract action. (`STAKE` | `UNSTAKE`)\n     * @dev only called by owner access or multicall\n     * @param cohortId cohort address\n     * @param actionToLock magic value STAKE/UNSTAKE\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setCohortLockStatus(\n        address cohortId,\n        bytes4 actionToLock,\n        bool status\n    ) external;\n\n    /**\n     * @notice lock the particular farm action (`STAKE` | `UNSTAKE`) in a cohort\n     * @param cohortSalt mixture of cohortId and tokenId\n     * @param actionToLock magic value STAKE/UNSTAKE\n     * @param status true for lock vice-versa false for unlock\n     */\n\n    function setCohortTokenLockStatus(\n        bytes32 cohortSalt,\n        bytes4 actionToLock,\n        bool status\n    ) external;\n\n    /**\n     * @notice validate cohort stake locking status\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateStakeLock(address cohortId, uint32 farmId) external view;\n\n    /**\n     * @notice validate cohort unstake locking status\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateUnStakeLock(address cohortId, uint32 farmId) external view;\n\n    /**\n     * @notice get farm token details in a specific cohort\n     * @param cohortId particular cohort address\n     * @param farmId farmId of particular cohort\n     * @return fid farm Id\n     * @return farmToken farm Token Address\n     * @return userMinStake amount that user can minimum stake\n     * @return userMaxStake amount that user can maximum stake\n     * @return totalStakeLimit total stake limit for the specific farm\n     * @return decimals farm token decimals\n     * @return skip it can be skip or not during unstake\n     */\n\n    function getCohortToken(address cohortId, uint32 farmId)\n        external\n        view\n        returns (\n            uint32 fid,\n            address farmToken,\n            uint256 userMinStake,\n            uint256 userMaxStake,\n            uint256 totalStakeLimit,\n            uint8 decimals,\n            bool skip\n        );\n\n    /**\n     * @notice get specific cohort details\n     * @param cohortId cohort address\n     * @return cohortVersion specific cohort version\n     * @return startBlock start block of a unifarm cohort\n     * @return endBlock end block of a unifarm cohort\n     * @return epochBlocks epoch blocks in particular cohort\n     * @return hasLiquidityMining indicator for liquidity mining\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards\n     * @return hasCohortLockinAvaliable denotes cohort lockin\n     */\n\n    function getCohort(address cohortId)\n        external\n        view\n        returns (\n            string memory cohortVersion,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 epochBlocks,\n            bool hasLiquidityMining,\n            bool hasContainsWrappedToken,\n            bool hasCohortLockinAvaliable\n        );\n\n    /**\n     * @notice get booster pack details for a specific cohort\n     * @param cohortId cohort address\n     * @param bpid booster pack Id\n     * @return cohortId_ cohort address\n     * @return paymentToken_ payment token address\n     * @return boosterVault booster vault address\n     * @return boosterPackAmount booster pack amount\n     */\n\n    function getBoosterPackDetails(address cohortId, uint256 bpid)\n        external\n        view\n        returns (\n            address cohortId_,\n            address paymentToken_,\n            address boosterVault,\n            uint256 boosterPackAmount\n        );\n\n    /**\n     * @notice emit on each farm token update\n     * @param cohortId cohort address\n     * @param farmToken farm token address\n     * @param fid farm Id\n     * @param userMinStake amount that user can minimum stake\n     * @param userMaxStake amount that user can maximum stake\n     * @param totalStakeLimit total stake limit for the specific farm\n     * @param decimals farm token decimals\n     * @param skip it can be skip or not during unstake\n     */\n\n    event TokenMetaDataDetails(\n        address indexed cohortId,\n        address indexed farmToken,\n        uint32 indexed fid,\n        uint256 userMinStake,\n        uint256 userMaxStake,\n        uint256 totalStakeLimit,\n        uint8 decimals,\n        bool skip\n    );\n\n    /**\n     * @notice emit on each update of cohort details\n     * @param cohortId cohort address\n     * @param cohortVersion specific cohort version\n     * @param startBlock start block of a unifarm cohort\n     * @param endBlock end block of a unifarm cohort\n     * @param epochBlocks epoch blocks in particular unifarm cohort\n     * @param hasLiquidityMining indicator for liquidity mining\n     * @param hasContainsWrappedToken true if contains wrapped token in cohort rewards\n     * @param hasCohortLockinAvaliable denotes cohort lockin\n     */\n\n    event AddedCohortDetails(\n        address indexed cohortId,\n        string indexed cohortVersion,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 epochBlocks,\n        bool indexed hasLiquidityMining,\n        bool hasContainsWrappedToken,\n        bool hasCohortLockinAvaliable\n    );\n\n    /**\n     * @notice emit on update of each booster pacakge\n     * @param cohortId the cohort address\n     * @param bpid booster pack id\n     * @param paymentToken the payment token address\n     * @param boosterPackAmount the booster pack amount\n     */\n\n    event BoosterDetails(address indexed cohortId, uint256 indexed bpid, address paymentToken, uint256 boosterPackAmount);\n}\n"
    },
    "contracts/interfaces/IUnifarmRewardRegistryUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\ninterface IUnifarmRewardRegistryUpgradeable {\n    /**\n     * @notice function is used to distribute cohort rewards\n     * @dev only cohort contract can access this function\n     * @param cohortId cohort contract address\n     * @param userAddress user wallet address\n     * @param influencerAddress influencer wallet address\n     * @param rValue Aggregated R value\n     * @param hasContainsWrappedToken has contain wrap token in rewards\n     */\n\n    function distributeRewards(\n        address cohortId,\n        address userAddress,\n        address influencerAddress,\n        uint256 rValue,\n        bool hasContainsWrappedToken\n    ) external;\n\n    /**\n     * @notice admin can add more influencers with some percentage\n     * @dev can only be called by owner or multicall\n     * @param userAddresses list of influencers wallet addresses\n     * @param referralPercentages list of referral percentages\n     */\n\n    function addInfluencers(address[] memory userAddresses, uint256[] memory referralPercentages) external;\n\n    /**\n     * @notice update multicall contract address\n     * @dev only called by owner access\n     * @param newMultiCallAddress new multicall address\n     */\n\n    function updateMulticall(address newMultiCallAddress) external;\n\n    /**\n     * @notice update default referral percenatge\n     * @dev can only be called by owner or multicall\n     * @param newRefPercentage referral percentage in 3 decimals\n     */\n\n    function updateRefPercentage(uint256 newRefPercentage) external;\n\n    /**\n     * @notice set reward tokens for a particular cohort\n     * @dev function can be called by only owner\n     * @param cohortId cohort contract address\n     * @param rewards per block rewards in bytes\n     */\n\n    function setRewardTokenDetails(address cohortId, bytes calldata rewards) external;\n\n    /**\n     * @notice set reward cap for particular cohort\n     * @dev function can be called by only owner\n     * @param cohortId cohort address\n     * @param rewardTokenAddresses reward token addresses\n     * @param rewards rewards available\n     * @return Transaction Status\n     */\n\n    function setRewardCap(\n        address cohortId,\n        address[] memory rewardTokenAddresses,\n        uint256[] memory rewards\n    ) external returns (bool);\n\n    /**\n     * @notice rescue ethers\n     * @dev can called by only owner in rare sitution\n     * @param withdrawableAddress withdrawable address\n     * @param amount to send\n     * @return Transaction Status\n     */\n\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external returns (bool);\n\n    /**\n      @notice withdraw list of erc20 tokens in emergency sitution\n      @dev can called by only owner on worst sitution  \n      @param withdrawableAddress withdrawble wallet address\n      @param tokens list of token address\n      @param amounts list of amount to withdraw\n     */\n\n    function safeWithdrawAll(\n        address withdrawableAddress,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @notice derive reward tokens for a specfic cohort\n     * @param cohortId cohort address\n     * @return rewardTokens array of reward token address\n     * @return pbr array of per block reward\n     */\n\n    function getRewardTokens(address cohortId) external view returns (address[] memory rewardTokens, uint256[] memory pbr);\n\n    /**\n     * @notice get influencer referral percentage\n     * @return referralPercentage the referral percentage\n     */\n\n    function getInfluencerReferralPercentage(address influencerAddress) external view returns (uint256 referralPercentage);\n\n    /**\n     * @notice emit when referral percetage updated\n     * @param newRefPercentage - new referral percentage\n     */\n    event UpdatedRefPercentage(uint256 newRefPercentage);\n\n    /**\n     * @notice set reward token details\n     * @param cohortId - cohort address\n     * @param rewards - list of token address and rewards\n     */\n    event SetRewardTokenDetails(address indexed cohortId, bytes rewards);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\ninterface IWETH {\n    /**\n     * @dev deposit eth to the contract\n     */\n\n    function deposit() external payable;\n\n    /**\n     * @dev transfer allows to transfer to a wallet or contract address\n     * @param to recipient address\n     * @param value amount to be transfered\n     * @return Transfer status.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev allow to withdraw weth from contract\n     */\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/library/CheckPointReward.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n/// @title CheckPointReward library\n/// @author UNIFARM\n/// @notice help to do a calculation of various checkpoints.\n/// @dev all the functions are internally used in the protocol.\n\nlibrary CheckPointReward {\n    /**\n     * @dev help to find block difference\n     * @param from from the blockNumber\n     * @param to till the blockNumber\n     * @return the blockDifference\n     */\n\n    function getBlockDifference(uint256 from, uint256 to) internal pure returns (uint256) {\n        return to - from;\n    }\n\n    /**\n     * @dev calculate number of checkpoint\n     * @param from from blockNumber\n     * @param to till blockNumber\n     * @param epochBlocks epoch blocks length\n     * @return checkpoint number of checkpoint\n     */\n\n    function getCheckpoint(\n        uint256 from,\n        uint256 to,\n        uint256 epochBlocks\n    ) internal pure returns (uint256) {\n        uint256 blockDifference = getBlockDifference(from, to);\n        return uint256(blockDifference / epochBlocks);\n    }\n\n    /**\n     * @dev derive current check point in unifarm cohort\n     * @dev it will be maximum to unifarm cohort endBlock\n     * @param startBlock start block of a unifarm cohort\n     * @param endBlock end block of a unifarm cohort\n     * @param epochBlocks number of blocks in one epoch\n     * @return checkpoint the current checkpoint in unifarm cohort\n     */\n\n    function getCurrentCheckpoint(\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 epochBlocks\n    ) internal view returns (uint256 checkpoint) {\n        uint256 yfEndBlock = block.number;\n        if (yfEndBlock > endBlock) {\n            yfEndBlock = endBlock;\n        }\n        checkpoint = getCheckpoint(startBlock, yfEndBlock, epochBlocks);\n    }\n\n    /**\n     * @dev derive start check point of user staking\n     * @param startBlock start block\n     * @param userStakedBlock block on user staked\n     * @param epochBlocks number of block in epoch\n     * @return checkpoint the start checkpoint of a user\n     */\n\n    function getStartCheckpoint(\n        uint256 startBlock,\n        uint256 userStakedBlock,\n        uint256 epochBlocks\n    ) internal pure returns (uint256 checkpoint) {\n        checkpoint = getCheckpoint(startBlock, userStakedBlock, epochBlocks);\n    }\n}\n"
    },
    "contracts/library/CohortHelper.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\nimport {CohortFactory} from '../abstract/CohortFactory.sol';\nimport {IERC20} from '../interfaces/IERC20.sol';\nimport {IUnifarmCohortRegistryUpgradeable} from '../interfaces/IUnifarmCohortRegistryUpgradeable.sol';\nimport {IWETH} from '../interfaces/IWETH.sol';\n\n/// @title CohortHelper library\n/// @author UNIFARM\n/// @notice we have various util functions.which is used in protocol directly\n/// @dev all the functions are internally used in the protocol.\n\nlibrary CohortHelper {\n    /**\n     * @dev getBlockNumber obtain current block from the chain.\n     * @return current block number\n     */\n\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n     * @dev get current owner of the factory contract.\n     * @param factory factory contract address.\n     * @return factory owner address\n     */\n\n    function owner(address factory) internal view returns (address) {\n        return CohortFactory(factory).owner();\n    }\n\n    /**\n     * @dev validating the sender\n     * @param factory factory contract address\n     * @return registry registry contract address\n     * @return nftManager nft Manager contract address\n     * @return rewardRegistry reward registry contract address\n     */\n\n    function verifyCaller(address factory)\n        internal\n        view\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        )\n    {\n        (registry, nftManager, rewardRegistry) = getStorageContracts(factory);\n        require(msg.sender == nftManager, 'ONM');\n    }\n\n    /**\n     * @dev get cohort details\n     * @param registry registry contract address\n     * @param cohortId cohort contract address\n     * @return cohortVersion specfic cohort version.\n     * @return startBlock start block of a cohort.\n     * @return endBlock end block of a cohort.\n     * @return epochBlocks epoch blocks in particular cohort.\n     * @return hasLiquidityMining indicator for liquidity mining.\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards.\n     * @return hasCohortLockinAvaliable denotes cohort lockin.\n     */\n\n    function getCohort(address registry, address cohortId)\n        internal\n        view\n        returns (\n            string memory cohortVersion,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 epochBlocks,\n            bool hasLiquidityMining,\n            bool hasContainsWrappedToken,\n            bool hasCohortLockinAvaliable\n        )\n    {\n        (\n            cohortVersion,\n            startBlock,\n            endBlock,\n            epochBlocks,\n            hasLiquidityMining,\n            hasContainsWrappedToken,\n            hasCohortLockinAvaliable\n        ) = IUnifarmCohortRegistryUpgradeable(registry).getCohort(cohortId);\n    }\n\n    /**\n     * @dev obtain particular cohort farm token details\n     * @param registry registry contract address\n     * @param cohortId cohort contract address\n     * @param farmId farm Id\n     * @return fid farm Id\n     * @return farmToken farm token Address\n     * @return userMinStake amount that user can minimum stake\n     * @return userMaxStake amount that user can maximum stake\n     * @return totalStakeLimit total stake limit for the specfic farm\n     * @return decimals farm token decimals\n     * @return skip it can be skip or not during unstake\n     */\n\n    function getCohortToken(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    )\n        internal\n        view\n        returns (\n            uint32 fid,\n            address farmToken,\n            uint256 userMinStake,\n            uint256 userMaxStake,\n            uint256 totalStakeLimit,\n            uint8 decimals,\n            bool skip\n        )\n    {\n        (fid, farmToken, userMinStake, userMaxStake, totalStakeLimit, decimals, skip) = IUnifarmCohortRegistryUpgradeable(registry).getCohortToken(\n            cohortId,\n            farmId\n        );\n    }\n\n    /**\n     * @dev derive booster pack details available for a specfic cohort.\n     * @param registry registry contract address\n     * @param cohortId cohort contract Address\n     * @param bpid booster pack id.\n     * @return cohortId_ cohort address.\n     * @return paymentToken_ payment token address.\n     * @return boosterVault the booster vault address.\n     * @return boosterPackAmount the booster pack amount.\n     */\n\n    function getBoosterPackDetails(\n        address registry,\n        address cohortId,\n        uint256 bpid\n    )\n        internal\n        view\n        returns (\n            address cohortId_,\n            address paymentToken_,\n            address boosterVault,\n            uint256 boosterPackAmount\n        )\n    {\n        (cohortId_, paymentToken_, boosterVault, boosterPackAmount) = IUnifarmCohortRegistryUpgradeable(registry).getBoosterPackDetails(\n            cohortId,\n            bpid\n        );\n    }\n\n    /**\n     * @dev calculate exact balance of a particular cohort.\n     * @param token token address\n     * @param totalStaking total staking of a token\n     * @return cohortBalance current cohort balance\n     */\n\n    function getCohortBalance(address token, uint256 totalStaking) internal view returns (uint256 cohortBalance) {\n        uint256 contractBalance = IERC20(token).balanceOf(address(this));\n        cohortBalance = contractBalance - totalStaking;\n    }\n\n    /**\n     * @dev get all storage contracts from factory contract.\n     * @param factory factory contract address\n     * @return registry registry contract address\n     * @return nftManager nftManger contract address\n     * @return rewardRegistry reward registry address\n     */\n\n    function getStorageContracts(address factory)\n        internal\n        view\n        returns (\n            address registry,\n            address nftManager,\n            address rewardRegistry\n        )\n    {\n        (registry, nftManager, rewardRegistry) = CohortFactory(factory).getStorageContracts();\n    }\n\n    /**\n     * @dev handle deposit WETH\n     * @param weth WETH address\n     * @param amount deposit amount\n     */\n\n    function depositWETH(address weth, uint256 amount) internal {\n        IWETH(weth).deposit{value: amount}();\n    }\n\n    /**\n     * @dev validate stake lock status\n     * @param registry registry address\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateStakeLock(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    ) internal view {\n        IUnifarmCohortRegistryUpgradeable(registry).validateStakeLock(cohortId, farmId);\n    }\n\n    /**\n     * @dev validate unstake lock status\n     * @param registry registry address\n     * @param cohortId cohort address\n     * @param farmId farm Id\n     */\n\n    function validateUnStakeLock(\n        address registry,\n        address cohortId,\n        uint32 farmId\n    ) internal view {\n        IUnifarmCohortRegistryUpgradeable(registry).validateUnStakeLock(cohortId, farmId);\n    }\n}\n"
    },
    "contracts/library/TransferHelpers.sol": {
      "content": "// SPDX-License-Identifier: GNU GPLv3\n\npragma solidity =0.8.9;\n\n// solhint-disable  avoid-low-level-calls\n\n/// @title TransferHelpers library\n/// @author UNIFARM\n/// @notice handles token transfers and ethereum transfers for protocol\n/// @dev all the functions are internally used in the protocol\n\nlibrary TransferHelpers {\n    /**\n     * @dev make sure about approval before use this function\n     * @param target A ERC20 token address\n     * @param sender sender wallet address\n     * @param recipient receiver wallet Address\n     * @param amount number of tokens to transfer\n     */\n\n    function safeTransferFrom(\n        address target,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount));\n        require(success && data.length > 0, 'STFF');\n    }\n\n    /**\n     * @notice transfer any erc20 token\n     * @param target ERC20 token address\n     * @param to receiver wallet address\n     * @param amount number of tokens to transfer\n     */\n\n    function safeTransfer(\n        address target,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\n        require(success && data.length > 0, 'STF');\n    }\n\n    /**\n     * @notice transfer parent chain token\n     * @param to receiver wallet address\n     * @param value of eth to transfer\n     */\n\n    function safeTransferParentChainToken(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: uint128(value)}(new bytes(0));\n        require(success, 'STPCF');\n    }\n}\n"
    },
    "contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity =0.8.9;\n\nimport '../utils/AddressUpgradeable.sol';\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered\n        require(_initializing ? _isConstructor() : !_initialized, 'CIAI');\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly\n     */\n    modifier onlyInitializing() {\n        require(_initializing, 'CINI');\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity =0.8.9;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, 'Address: low-level call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\n        require(isContract(target), 'Address: call to non-contract');\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, 'Address: low-level static call failed');\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), 'Address: static call to non-contract');\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  }
}}