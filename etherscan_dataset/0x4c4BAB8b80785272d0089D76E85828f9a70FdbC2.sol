{"OCAmint.sol":{"content":"pragma solidity =0.7.6;\r\n// Developed by Orcania (https://orcania.io/)\r\n\r\nimport \"OMS.sol\";\r\n\r\ninterface IOCA{\r\n         \r\n    function mint(address user, uint256 amount) external;\r\n  \r\n}\r\n\r\ninterface ITRAF {\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    \r\n}\r\n\r\ncontract OCAmint is OMS {\r\n    IOCA OCA;\r\n    ITRAF TRAF;\r\n\r\n    uint256 private _price;\r\n    uint256 private _trafPrice;\r\n    uint256 private _wlPrice;\r\n\r\n    mapping(address =\u003e uint256) private _whiteListed;\r\n\r\n    //Read functions=========================================================================================================================\r\n    function price() external view returns (uint256) {return _price;}\r\n\r\n    function trafPrice() external view returns (uint256) {return _trafPrice;}\r\n\r\n    function wlPrice() external view returns (uint256) {return _wlPrice;}\r\n\r\n    function whiteListed(address user) external view returns(bool) {return _whiteListed[user] == 1;}\r\n\r\n    //Owner Write Functions========================================================================================================================\r\n    function changeData(uint256 price, uint256 trafPrice, uint256 wlPrice) external Owner {\r\n        _price = price;\r\n        _trafPrice = trafPrice;\r\n        _wlPrice = wlPrice;\r\n    }  \r\n\r\n    function setContracts(address oca, address traf) external Owner {\r\n        OCA = IOCA(oca);\r\n        TRAF = ITRAF(traf);\r\n    } \r\n\r\n    function addToWhiteList(address[] calldata users) external Owner {\r\n        uint256 length = users.length;\r\n\r\n        for(uint256 t; t \u003c length; ++t) {\r\n            _whiteListed[users[t]] = 1;\r\n        }\r\n    }\r\n\r\n    function removeFromWhiteList(address[] calldata users) external Owner {\r\n        uint256 length = users.length;\r\n\r\n        for(uint256 t; t \u003c length; ++t) {\r\n            _whiteListed[users[t]] = 2;\r\n        }\r\n    }\r\n\r\n    //User write functions=========================================================================================================================\r\n    function mint() external payable {\r\n        uint256 price = _price;\r\n\r\n        require(msg.value % price == 0);\r\n        uint256 amount = msg.value / price * 1000000000000000000;\r\n\r\n        OCA.mint(msg.sender, amount);\r\n    }\r\n\r\n    function trafMint() external payable {\r\n        require(TRAF.balanceOf(msg.sender) \u003e 0, \"NOT_TRAF_HOLDER\");\r\n\r\n        uint256 price = _trafPrice;\r\n\r\n        require(msg.value % price == 0);\r\n        uint256 amount = msg.value / price * 1000000000000000000;\r\n\r\n        OCA.mint(msg.sender, amount);\r\n    }\r\n\r\n    function wlMint() external payable {\r\n        require(_whiteListed[msg.sender] == 1, \"NOT_WHITE_LISTED\");\r\n\r\n        uint256 price = _wlPrice;\r\n\r\n        require(msg.value % price == 0);\r\n        uint256 amount = msg.value / price * 1000000000000000000;\r\n\r\n        OCA.mint(msg.sender, amount);\r\n    }\r\n\r\n\r\n}"},"OMS.sol":{"content":"// Developed by Orcania (https://orcania.io/)\r\ninterface IERC20{\r\n         \r\n    function transfer(address recipient, uint256 amount) external;\r\n    \r\n}\r\n\r\nabstract contract OMS { //Orcania Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address =\u003e bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    receive() external payable {}\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"OMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"OMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n    //===============\r\n    \r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        require(to.send(value), \"OMS: ISSUE_SENDING_FUNDS\");    \r\n    }\r\n\r\n    function withdrawERC20(address token, address to, uint256 value) external Manager {\r\n        IERC20(token).transfer(to, value);   \r\n    }\r\n\r\n}"}}