{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/bloq/ISwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/* solhint-disable func-name-mixedcase */\n// Partial interface of IUniswapV2Router02\ninterface IUniswapV2Router02 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\ninterface ISwapManager {\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\n\n    function N_DEX() external view returns (uint256);\n\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\n\n    function bestOutputFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountOut,\n            uint256 rIdx\n        );\n\n    function bestPathFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function bestInputFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountIn,\n            uint256 rIdx\n        );\n\n    function bestPathFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function safeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function safeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function comparePathsFixedInput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function comparePathsFixedOutput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function ours(address a) external view returns (bool);\n\n    function oracleCount() external view returns (uint256);\n\n    function oracleAt(uint256 idx) external view returns (address);\n\n    function getOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (address);\n\n    function createOrUpdateOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external returns (address oracleAddr);\n\n    function consultForFree(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\n\n    /// get the data we want and pay the gas to update\n    function consult(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    )\n        external\n        returns (\n            uint256 amountOut,\n            uint256 lastUpdatedAt,\n            bool updated\n        );\n\n    function updateOracles() external returns (uint256 updated, uint256 expected);\n\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\n}\n"
    },
    "contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface CToken {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function repayBorrow() external payable; // For ETH\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\n\n    function transfer(address user, uint256 amount) external returns (bool);\n\n    function getCash() external view returns (uint256);\n\n    function transferFrom(\n        address owner,\n        address user,\n        uint256 amount\n    ) external returns (bool);\n\n    function underlying() external view returns (address);\n\n    function comptroller() external view returns (address);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function markets(address market)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            bool isCompted\n        );\n\n    function oracle() external view returns (address);\n}\n\ninterface Oracle {\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n    function price(string memory symbol) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/oracle/IUniswapV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\n\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\ninterface IUniswapV3Oracle {\n    function assetToEth(\n        address _tokenIn,\n        uint256 _amountIn,\n        uint32 _twapPeriod\n    ) external view returns (uint256 ethAmountOut);\n\n    function ethToAsset(\n        uint256 _ethAmountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAsset(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAssetThruRoute(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod,\n        address _routeThruToken,\n        uint24[2] memory _poolFees\n    ) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLike is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/vesper/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "contracts/interfaces/vesper/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Pausable interface\n */\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function stopEverything() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n\n    function shutdown() external;\n\n    function open() external;\n}\n"
    },
    "contracts/interfaces/vesper/IPoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolRewards {\n    /// Emitted after reward added\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\n    /// Emitted whenever any user claim rewards\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    /// Emitted after adding new rewards token into rewardTokens array\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\n\n    function claimReward(address) external;\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external;\n\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external;\n\n    function updateReward(address) external;\n\n    function claimable(address _account)\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\n\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\n\n    function rewardForDuration()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\n\n    function rewardPerToken()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\n}\n"
    },
    "contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IStrategy {\n    function rebalance() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function keepers() external view returns (address[] memory);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function totalValue() external view returns (uint256);\n\n    function totalValueCurrent() external returns (uint256);\n\n    function pool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IGovernable.sol\";\nimport \"./IPausable.sol\";\n\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\n\n    function deposit(uint256 _share) external;\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function poolRewards() external view returns (address);\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function reportLoss(uint256 _loss) external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function keepers() external view returns (address[] memory);\n\n    function isKeeper(address _address) external view returns (bool);\n\n    function maintainers() external view returns (address[] memory);\n\n    function isMaintainer(address _address) external view returns (bool);\n\n    function pricePerShare() external view returns (uint256);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function token() external view returns (IERC20);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/bloq/ISwapManager.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract Strategy is IStrategy, Context {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    // solhint-disable-next-line  var-name-mixedcase\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    IERC20 public immutable collateralToken;\n    address public receiptToken;\n    address public immutable override pool;\n    address public override feeCollector;\n    ISwapManager public swapManager;\n\n    uint256 public oraclePeriod = 3600; // 1h\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\n\n    EnumerableSet.AddressSet private _keepers;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken\n    ) {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        swapManager = ISwapManager(_swapManager);\n        pool = _pool;\n        collateralToken = IVesperPool(_pool).token();\n        receiptToken = _receiptToken;\n        require(_keepers.add(_msgSender()), \"add-keeper-failed\");\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(_keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\n        _;\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.add(_keeperAddress), \"add-keeper-failed\");\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view override returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    /**\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\n     * @param _newStrategy Address of new strategy\n     */\n    function migrate(address _newStrategy) external virtual override onlyPool {\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\n        _beforeMigration(_newStrategy);\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.remove(_keeperAddress), \"remove-keeper-failed\");\n    }\n\n    /**\n     * @notice Update fee collector\n     * @param _feeCollector fee collector address\n     */\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @notice Update swap manager address\n     * @param _swapManager swap manager address\n     */\n    function updateSwapManager(address _swapManager) external onlyGovernor {\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        require(_swapManager != address(swapManager), \"sm-is-same\");\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\n        swapManager = ISwapManager(_swapManager);\n    }\n\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\n        require(_newSwapSlippage <= 10000, \"invalid-slippage-value\");\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\n        swapSlippage = _newSwapSlippage;\n    }\n\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\n        require(_newRouterIdx < swapManager.N_DEX(), \"invalid-router-index\");\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\n        require(_newPeriod > 59, \"invalid-oracle-period\");\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\n        oraclePeriod = _newPeriod;\n        oracleRouterIdx = _newRouterIdx;\n    }\n\n    /// @dev Approve all required tokens\n    function approveToken() external onlyKeeper {\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n    }\n\n    function setupOracles() external onlyKeeper {\n        _setupOracles();\n    }\n\n    /**\n     * @dev Withdraw collateral token from lending pool.\n     * @param _amount Amount of collateral token\n     */\n    function withdraw(uint256 _amount) external override onlyPool {\n        _withdraw(_amount);\n    }\n\n    /**\n     * @dev Rebalance profit, loss and investment of this strategy\n     */\n    function rebalance() external virtual override onlyKeeper {\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _reinvest();\n    }\n\n    /**\n     * @dev sweep given token to feeCollector of strategy\n     * @param _fromToken token address to sweep\n     */\n    function sweepERC20(address _fromToken) external override onlyKeeper {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\n        if (_fromToken == ETH) {\n            Address.sendValue(payable(feeCollector), address(this).balance);\n        } else {\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\n        }\n    }\n\n    /// @notice Returns address of token correspond to collateral token\n    function token() external view override returns (address) {\n        return receiptToken;\n    }\n\n    /**\n     * @notice Calculate total value of asset under management\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view virtual override returns (uint256 _value);\n\n    /**\n     * @notice Calculate total value of asset under management (in real-time)\n     * @dev Report total value in collateral token\n     */\n    function totalValueCurrent() external virtual override returns (uint256) {\n        return totalValue();\n    }\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool);\n\n    /**\n     * @notice some strategy may want to prepare before doing migration.\n        Example In Maker old strategy want to give vault ownership to new strategy\n     * @param _newStrategy .\n     */\n    function _beforeMigration(address _newStrategy) internal virtual;\n\n    /**\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\n     * excess debt, if any.\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\n     */\n    function _generateReport()\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        _profit = _realizeProfit(_totalDebt);\n        _loss = _realizeLoss(_totalDebt);\n        _payback = _liquidate(_excessDebt);\n    }\n\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\n        return (_amount * (10000 - _slippage)) / (10000);\n    }\n\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\n        if (_from == WETH || _to == WETH) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = WETH;\n            path[2] = _to;\n        }\n    }\n\n    function _consultOracle(\n        address _from,\n        address _to,\n        uint256 _amt\n    ) internal returns (uint256, bool) {\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            (bool _success, bytes memory _returnData) =\n                // solhint-disable-next-line avoid-low-level-calls\n                address(swapManager).call(\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\n                );\n            if (_success) {\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\n                return (0, false);\n            }\n        }\n        return (0, false);\n    }\n\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\n        require(path.length > 1, \"invalid-oracle-path\");\n        amountOut = _amountIn;\n        bool isValid;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\n            require(isValid, \"invalid-oracle-rate\");\n        }\n    }\n\n    /**\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\n     * however, this method will throw minAmountOut is not met\n     * @param _from address of from token\n     * @param _to address of to token\n     * @param _amountIn Amount to be swapped\n     * @param _minAmountOut minimum amount out\n     */\n    function _safeSwap(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) internal {\n        if (_from == _to) {\n            return;\n        }\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\n        if (_minAmountOut == 0) _minAmountOut = 1;\n        if (amountOut != 0) {\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\n                _amountIn,\n                _minAmountOut,\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    // These methods can be implemented by the inheriting strategy.\n    /* solhint-disable no-empty-blocks */\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\n\n    /**\n     * @notice Set up any oracles that are needed for this strategy.\n     */\n    function _setupOracles() internal virtual {}\n\n    /* solhint-enable */\n\n    // These methods must be implemented by the inheriting strategy\n    function _withdraw(uint256 _amount) internal virtual;\n\n    function _approveToken(uint256 _amount) internal virtual;\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\n\n    /**\n     * @notice Calculate earning and withdraw/convert it into collateral token.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _profit Profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\n\n    /**\n     * @notice Calculate loss\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\n\n    /**\n     * @notice Reinvest collateral.\n     * @dev Once we file report back in pool, we might have some collateral in hand\n     * which we want to reinvest aka deposit in lender/provider.\n     */\n    function _reinvest() internal virtual;\n}\n"
    },
    "contracts/strategies/compound/CompoundXYCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../../interfaces/oracle/IUniswapV3Oracle.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will\n/// borrow another token. Supply X borrow Y and keep borrowed amount here.\n/// It does not handle rewards and ETH as collateral\nabstract contract CompoundXYCore is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint32 internal constant TWAP_PERIOD = 3_600;\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n    address public borrowToken;\n\n    Comptroller public comptroller;\n\n    CToken public immutable supplyCToken;\n    CToken public immutable borrowCToken;\n\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n\n        NAME = _name;\n\n        comptroller = Comptroller(_comptroller);\n        supplyCToken = CToken(_receiptToken);\n        borrowCToken = CToken(_borrowCToken);\n        borrowToken = _getUnderlyingToken(_borrowCToken);\n\n        address[] memory _cTokens = new address[](2);\n        _cTokens[0] = _receiptToken;\n        _cTokens[1] = _borrowCToken;\n        comptroller.enterMarkets(_cTokens);\n    }\n\n    /// @notice Calculate current position based on totalValue and debt of strategy\n    function isLossMaking() external view returns (bool) {\n        return totalValue() < IVesperPool(pool).totalDebtOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(supplyCToken) || _token == address(collateralToken) || _token == borrowToken;\n    }\n\n    /// @notice Calculate total value based on supply and borrow position\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        uint256 _collateralInCompound =\n            (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) / 1e18;\n\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        uint256 _collateralNeededForRepay;\n        if (_borrowInCompound > _borrowBalanceHere) {\n            (, _collateralNeededForRepay, ) = swapManager.bestInputFixedOutput(\n                address(collateralToken),\n                borrowToken,\n                _borrowInCompound - _borrowBalanceHere\n            );\n        }\n        _totalValue = _collateralInCompound + collateralToken.balanceOf(address(this)) - _collateralNeededForRepay;\n    }\n\n    /// @dev Hook that executes after collateral borrow.\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @dev Approve dex router\n    function _approveRouter(address _router, uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(supplyCToken), _amount);\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            address _router = address(swapManager.ROUTERS(i));\n            _approveRouter(_router, _amount);\n            collateralToken.safeApprove(_router, _amount);\n            IERC20(borrowToken).safeApprove(_router, _amount);\n        }\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \"wrong-receipt-token\");\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), false);\n    }\n\n    /// @dev Hook that executes before repaying borrowed collateral\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\n    /// @dev Override to handle ETH\n    function _borrowY(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-failed\");\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\n        internal\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\n    {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = borrowCToken.borrowBalanceCurrent(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n\n        uint256 _collateral = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _collateralFactor = _getCollateralFactor(address(supplyCToken));\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral =\n            _depositAmount > 0 ? _collateral + _depositAmount : _collateral > _withdrawAmount\n                ? _collateral - _withdrawAmount\n                : 0;\n\n        // Calculate max borrow based on collateral factor\n        uint256 _maxCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor) / 1e18;\n        Oracle _oracle = Oracle(comptroller.oracle());\n\n        // Compound \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Rari \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Iron \"UnderlyingPrice\" decimal = (18 + 8 - tokenDecimal)\n        uint256 _collateralTokenPrice = _oracle.getUnderlyingPrice(address(supplyCToken));\n        uint256 _borrowTokenPrice = _oracle.getUnderlyingPrice(address(borrowCToken));\n        // Max borrow limit in borrow token\n        uint256 _maxBorrowPossible = (_maxCollateralForBorrow * _collateralTokenPrice) / _borrowTokenPrice;\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n        }\n    }\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Claim rewardToken and first convert rewardToken to borrowToken to cover interest, if any, on borrowed amount.\n     * Convert remaining rewardToken to collateral.\n     */\n    function _generateReport()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        // Claim any reward we have.\n        _claimRewardsAndConvertTo(address(collateralToken));\n\n        uint256 _borrow = borrowCToken.borrowBalanceCurrent(address(this));\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        // _borrow increases every block. There can be a scenario when rewardToken are not\n        // enough to cover interest diff for borrow, reinvest function will handle\n        // collateral liquidation\n        if (_borrow > _borrowBalanceHere) {\n            _swapToBorrowToken(_borrow - _borrowBalanceHere);\n        } else {\n            // When _borrowBalanceHere exceeds _borrow balance from Compound\n            // Customize this hook to handle the excess profit\n            _rebalanceBorrow(_borrowBalanceHere - _borrow);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCompound);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        if (_excessDebt > 0) {\n            _payback = Math.min(_collateralHere, _excessDebt);\n        }\n    }\n\n    /// @dev Get the borrow balance strategy is holding. Override to handle vToken balance.\n    function _getBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /// @dev TraderJoe Compound fork has different markets API so allow this method to override.\n    function _getCollateralFactor(address _cToken) internal view virtual returns (uint256 _collateralFactor) {\n        (, _collateralFactor, ) = comptroller.markets(_cToken);\n    }\n\n    /// @dev Get underlying token. Compound handle ETH differently hence allow this method to override\n    function _getUnderlyingToken(address _cToken) internal view virtual returns (address) {\n        return CToken(_cToken).underlying();\n    }\n\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(supplyCToken.mint(_amount) == 0, \"supply-failed\");\n        }\n    }\n\n    /// @dev Hook to handle profit scenario i.e. actual borrowed balance > Compound borrow account.\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    /// @dev Withdraw collateral aka X from Compound. Override to handle ETH\n    function _redeemX(uint256 _amount) internal virtual {\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \"withdraw-failed\");\n    }\n\n    /// @dev Deposit collateral in Compound and adjust borrow position\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n        if (_repayAmount > 0) {\n            // Repay to maintain safe position\n            _repay(_repayAmount, false);\n            _mintX(collateralToken.balanceOf(address(this)));\n        } else {\n            // Happy path, mint more borrow more\n            _mintX(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    /**\n     * @dev Repay borrow amount\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\n     */\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\n        if (_repayAmount > 0) {\n            uint256 _borrowBalanceHere = _getBorrowBalance();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _borrowBalanceHere) {\n                if (_shouldClaimComp) {\n                    // Claim rewardToken and convert those to collateral.\n                    _claimRewardsAndConvertTo(address(collateralToken));\n                }\n\n                uint256 _currentBorrow = borrowCToken.borrowBalanceCurrent(address(this));\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _currentBorrow is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _currentBorrow > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _currentBorrow = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_currentBorrow - _borrowBalanceHere)\n                _swapToBorrowToken(_currentBorrow - _borrowBalanceHere);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /// @dev Repay Y to Compound. _beforeRepayY hook can be used for pre-repay actions.\n    /// @dev Override this to handle ETH\n    function _repayY(uint256 _amount) internal virtual {\n        _beforeRepayY(_amount);\n        require(borrowCToken.repayBorrow(_amount) == 0, \"repay-failed\");\n    }\n\n    /// @dev Safe swap, it will not revert.\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) private {\n        uint256 _minAmountOut =\n            swapSlippage != 10000\n                ? _calcAmtOutAfterSlippage(\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\n                    swapSlippage\n                )\n                : 1;\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\n    }\n\n    /**\n     * @dev Swap given token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        (address[] memory _path, uint256 _amountIn, uint256 _rIdx) =\n            swapManager.bestInputFixedOutput(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                _redeemX(_amountIn - _collateralHere);\n            }\n            swapManager.ROUTERS(_rIdx).swapTokensForExactTokens(\n                _shortOnBorrow,\n                _amountIn,\n                _path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\n        _repay(_repayAmount, true);\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n        uint256 _supply = supplyCToken.balanceOfUnderlying(address(this));\n        _redeemX(_supply > _amount ? _amount : _supply);\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        if (_borrowBalanceHere > _borrowInCompound) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\n            uint256 _recoveryAmount =\n                (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\n                    ? _amountToRecover\n                    : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwap(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n        minBorrowLimit = 0;\n        maxBorrowLimit = 0;\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n\n    // We overridden _generateReport which eliminates need of below function.\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\n}\n"
    },
    "contracts/strategies/compound/CompoundXYStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./CompoundXYCore.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../../interfaces/oracle/IUniswapV3Oracle.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will borrow\n/// another token. Supply X borrow Y and keep borrowed amount here. It does handle rewards and handle\n/// wrap/unwrap of WETH as ETH is required to interact with Compound.\ncontract CompoundXYStrategy is CompoundXYCore {\n    using SafeERC20 for IERC20;\n\n    address public immutable rewardToken;\n    address private constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) CompoundXYCore(_pool, _swapManager, _comptroller, _receiptToken, _borrowCToken, _name) {\n        require(_rewardToken != address(0), \"rewardToken-address-is-zero\");\n        rewardToken = _rewardToken;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return super.isReservedToken(_token) || _token == rewardToken;\n    }\n\n    /**\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\n     * @dev Compound calculate rewardToken accrued and store it when user interact with\n     * Compound contracts, i.e. deposit, withdraw or transfer tokens.\n     * So compAccrued() will return stored rewardToken accrued amount, which may be inaccurate.\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = super.totalValue();\n        uint256 _rewardAccrued = comptroller.compAccrued(address(this));\n        if (_rewardAccrued > 0) {\n            (, uint256 _rewardAsCollateral, ) =\n                swapManager.bestOutputFixedInput(rewardToken, address(collateralToken), _rewardAccrued);\n            // Update totalValue\n            _totalValue += _rewardAsCollateral;\n        }\n    }\n\n    function _approveRouter(address _router, uint256 _amount) internal virtual override {\n        IERC20(rewardToken).safeApprove(_router, _amount);\n    }\n\n    /// @dev If borrowToken WETH then wrap borrowed ETH to get WETH\n    function _borrowY(uint256 _amount) internal override {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n            if (borrowToken == WETH) {\n                TokenLike(WETH).deposit{value: address(this).balance}();\n            }\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        address[] memory _markets = new address[](2);\n        _markets[0] = address(supplyCToken);\n        _markets[1] = address(borrowCToken);\n        comptroller.claimComp(address(this), _markets);\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\n        }\n    }\n\n    /// @dev Native Compound cETH doesn't has underlying method\n    function _getUnderlyingToken(address _cToken) internal view virtual override returns (address) {\n        if (_cToken == CETH) {\n            return WETH;\n        }\n        return CToken(_cToken).underlying();\n    }\n\n    /// @dev If borrowToken is WETH then unwrap WETH to get ETH and repay borrow using ETH.\n    function _repayY(uint256 _amount) internal override {\n        _beforeRepayY(_amount);\n        if (borrowToken == WETH) {\n            TokenLike(WETH).withdraw(_amount);\n            borrowCToken.repayBorrow{value: _amount}();\n        } else {\n            require(borrowCToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/VesperCompoundXYStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./CompoundXYStrategy.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\ncontract VesperCompoundXYStrategy is CompoundXYStrategy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n    // VSP token address\n    address public immutable vsp;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        address _vPool,\n        address _vsp,\n        string memory _name\n    ) CompoundXYStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _name) {\n        require(_vsp != address(0), \"vsp-address-is-zero\");\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(_vPool);\n        vsp = _vsp;\n    }\n\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\n    function borrowBalance() external view returns (uint256) {\n        return _getBorrowBalance();\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return super.isReservedToken(_token) || _token == address(vPool);\n    }\n\n    /// @notice Calculate total value based reward accrued (COMP and VSP), supply and borrow position\n    function totalValue() public view override returns (uint256 _totalValue) {\n        _totalValue = super.totalValue();\n        address _poolRewards = vPool.poolRewards();\n        if (_poolRewards != address(0)) {\n            (, uint256[] memory _claimableAmounts) = IPoolRewards(_poolRewards).claimable(address(this));\n            uint256 _vspAmount = _claimableAmounts[0];\n            if (_vspAmount > 0) {\n                (, uint256 _vspAsCollateral, ) =\n                    swapManager.bestOutputFixedInput(vsp, address(collateralToken), _vspAmount);\n                // Update totalValue\n                _totalValue += _vspAsCollateral;\n            }\n        }\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal override {\n        vPool.deposit(_amount);\n    }\n\n    function _approveRouter(address _router, uint256 _amount) internal override {\n        super._approveRouter(_router, _amount);\n        IERC20(vsp).safeApprove(_router, _amount);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal override {\n        _withdrawFromPool(_amount);\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        super._claimRewardsAndConvertTo(_toToken);\n        address _poolRewards = vPool.poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n            uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\n            if (_vspAmount > 0) {\n                _safeSwap(vsp, _toToken, _vspAmount, 1);\n            }\n        }\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getBorrowBalance() internal view override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\n    }\n\n    function _rebalanceBorrow(uint256 _excessBorrow) internal override {\n        if (_excessBorrow > 0) {\n            uint256 _borrowedHereBefore = IERC20(borrowToken).balanceOf(address(this));\n            _withdrawFromPool(_excessBorrow);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this)) - _borrowedHereBefore;\n            if (_borrowedHere > 0) {\n                _safeSwap(borrowToken, address(collateralToken), _borrowedHere, 1);\n            }\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawFromPool(uint256 _amount) internal {\n        uint256 _pricePerShare = vPool.pricePerShare();\n        uint256 _shares = (_amount * 1e18) / _pricePerShare;\n        _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n\n        uint256 _maxShares = vPool.balanceOf(address(this));\n        vPool.withdraw(_shares > _maxShares ? _maxShares : _shares);\n    }\n}\n"
    }
  }
}}